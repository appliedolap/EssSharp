/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing VariablesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VariablesApiTests : IDisposable
    {
        private VariablesApi instance;

        public VariablesApiTests()
        {
            instance = new VariablesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VariablesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VariablesApi
            //Assert.IsType<VariablesApi>(instance);
        }

        /// <summary>
        /// Test VariablesCreateAppVariable
        /// </summary>
        [Fact]
        public void VariablesCreateAppVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //Variable body = null;
            //var response = instance.VariablesCreateAppVariable(applicationName, body);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test VariablesCreateVariable
        /// </summary>
        [Fact]
        public void VariablesCreateVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //Variable body = null;
            //var response = instance.VariablesCreateVariable(applicationName, databaseName, body);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test VariablesDeleteAppVariable
        /// </summary>
        [Fact]
        public void VariablesDeleteAppVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string variableName = null;
            //instance.VariablesDeleteAppVariable(applicationName, variableName);
        }

        /// <summary>
        /// Test VariablesDeleteVariable
        /// </summary>
        [Fact]
        public void VariablesDeleteVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string variableName = null;
            //instance.VariablesDeleteVariable(applicationName, databaseName, variableName);
        }

        /// <summary>
        /// Test VariablesEditAppVariable
        /// </summary>
        [Fact]
        public void VariablesEditAppVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string variableName = null;
            //Variable body = null;
            //var response = instance.VariablesEditAppVariable(applicationName, variableName, body);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test VariablesEditVariable
        /// </summary>
        [Fact]
        public void VariablesEditVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string variableName = null;
            //Variable body = null;
            //var response = instance.VariablesEditVariable(applicationName, databaseName, variableName, body);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test VariablesGetAppVariable
        /// </summary>
        [Fact]
        public void VariablesGetAppVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string variableName = null;
            //var response = instance.VariablesGetAppVariable(applicationName, variableName);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test VariablesGetVariable
        /// </summary>
        [Fact]
        public void VariablesGetVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string variableName = null;
            //var response = instance.VariablesGetVariable(applicationName, databaseName, variableName);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test VariablesListAppVariables
        /// </summary>
        [Fact]
        public void VariablesListAppVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //var response = instance.VariablesListAppVariables(applicationName);
            //Assert.IsType<VariableList>(response);
        }

        /// <summary>
        /// Test VariablesListVariables
        /// </summary>
        [Fact]
        public void VariablesListVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.VariablesListVariables(applicationName, databaseName);
            //Assert.IsType<VariableList>(response);
        }
    }
}
