/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationConnectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationConnectionsApiTests : IDisposable
    {
        private ApplicationConnectionsApi instance;

        public ApplicationConnectionsApiTests()
        {
            instance = new ApplicationConnectionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationConnectionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationConnectionsApi
            //Assert.IsType<ApplicationConnectionsApi>(instance);
        }

        /// <summary>
        /// Test ApplicationConnectionsCreateConnection
        /// </summary>
        [Fact]
        public void ApplicationConnectionsCreateConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //Connection body = null;
            //instance.ApplicationConnectionsCreateConnection(applicationName, body);
        }

        /// <summary>
        /// Test ApplicationConnectionsDeleteConnection
        /// </summary>
        [Fact]
        public void ApplicationConnectionsDeleteConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string connectionName = null;
            //instance.ApplicationConnectionsDeleteConnection(applicationName, connectionName);
        }

        /// <summary>
        /// Test ApplicationConnectionsGetConnectionDetails
        /// </summary>
        [Fact]
        public void ApplicationConnectionsGetConnectionDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string connectionName = null;
            //bool? password = null;
            //var response = instance.ApplicationConnectionsGetConnectionDetails(applicationName, connectionName, password);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test ApplicationConnectionsGetConnections
        /// </summary>
        [Fact]
        public void ApplicationConnectionsGetConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //int? offset = null;
            //int? limit = null;
            //string connType = null;
            //bool? repoConn = null;
            //bool? walletConn = null;
            //var response = instance.ApplicationConnectionsGetConnections(applicationName, offset, limit, connType, repoConn, walletConn);
            //Assert.IsType<ConnectionsList>(response);
        }

        /// <summary>
        /// Test ApplicationConnectionsTestConnection
        /// </summary>
        [Fact]
        public void ApplicationConnectionsTestConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //Connection body = null;
            //instance.ApplicationConnectionsTestConnection(applicationName, body);
        }

        /// <summary>
        /// Test ApplicationConnectionsTestConnectionExisting
        /// </summary>
        [Fact]
        public void ApplicationConnectionsTestConnectionExistingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string connectionName = null;
            //instance.ApplicationConnectionsTestConnectionExisting(applicationName, connectionName);
        }

        /// <summary>
        /// Test ApplicationConnectionsUpdateConnection
        /// </summary>
        [Fact]
        public void ApplicationConnectionsUpdateConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string connectionName = null;
            //Connection body = null;
            //var response = instance.ApplicationConnectionsUpdateConnection(applicationName, connectionName, body);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test ApplicationConnectionsWallets
        /// </summary>
        [Fact]
        public void ApplicationConnectionsWalletsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string connectionName = null;
            //var response = instance.ApplicationConnectionsWallets(applicationName, connectionName);
            //Assert.IsType<WalletLocation>(response);
        }
    }
}
