/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationDatasourcesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationDatasourcesApiTests : IDisposable
    {
        private ApplicationDatasourcesApi instance;

        public ApplicationDatasourcesApiTests()
        {
            instance = new ApplicationDatasourcesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationDatasourcesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationDatasourcesApi
            //Assert.IsType<ApplicationDatasourcesApi>(instance);
        }

        /// <summary>
        /// Test ApplicationDatasourcesCreateDatasource
        /// </summary>
        [Fact]
        public void ApplicationDatasourcesCreateDatasourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //Datasource body = null;
            //instance.ApplicationDatasourcesCreateDatasource(applicationName, body);
        }

        /// <summary>
        /// Test ApplicationDatasourcesDeleteDatasource
        /// </summary>
        [Fact]
        public void ApplicationDatasourcesDeleteDatasourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string datasourceName = null;
            //instance.ApplicationDatasourcesDeleteDatasource(applicationName, datasourceName);
        }

        /// <summary>
        /// Test ApplicationDatasourcesGetDataStream
        /// </summary>
        [Fact]
        public void ApplicationDatasourcesGetDataStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //bool? includeHeaders = null;
            //bool? metaDataOnly = null;
            //DatasourceQueryInfo body = null;
            //instance.ApplicationDatasourcesGetDataStream(applicationName, includeHeaders, metaDataOnly, body);
        }

        /// <summary>
        /// Test ApplicationDatasourcesGetDatasourceDetails
        /// </summary>
        [Fact]
        public void ApplicationDatasourcesGetDatasourceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string datasouceName = null;
            //var response = instance.ApplicationDatasourcesGetDatasourceDetails(applicationName, datasouceName);
            //Assert.IsType<Datasource>(response);
        }

        /// <summary>
        /// Test ApplicationDatasourcesGetDatasources
        /// </summary>
        [Fact]
        public void ApplicationDatasourcesGetDatasourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ApplicationDatasourcesGetDatasources(applicationName, offset, limit);
            //Assert.IsType<DatasourcesList>(response);
        }

        /// <summary>
        /// Test ApplicationDatasourcesUpdateDatasource
        /// </summary>
        [Fact]
        public void ApplicationDatasourcesUpdateDatasourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string datasouceName = null;
            //Datasource body = null;
            //var response = instance.ApplicationDatasourcesUpdateDatasource(applicationName, datasouceName, body);
            //Assert.IsType<Datasource>(response);
        }
    }
}
