/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationConfigurationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationConfigurationApiTests : IDisposable
    {
        private ApplicationConfigurationApi instance;

        public ApplicationConfigurationApiTests()
        {
            instance = new ApplicationConfigurationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationConfigurationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationConfigurationApi
            //Assert.IsType<ApplicationConfigurationApi>(instance);
        }

        /// <summary>
        /// Test ApplicationConfigurationAddConfiguration
        /// </summary>
        [Fact]
        public void ApplicationConfigurationAddConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //ApplicationConfigEntry body = null;
            //var response = instance.ApplicationConfigurationAddConfiguration(applicationName, body);
            //Assert.IsType<ApplicationConfigEntry>(response);
        }

        /// <summary>
        /// Test ApplicationConfigurationDeleteConfiguration
        /// </summary>
        [Fact]
        public void ApplicationConfigurationDeleteConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string configId = null;
            //instance.ApplicationConfigurationDeleteConfiguration(applicationName, configId);
        }

        /// <summary>
        /// Test ApplicationConfigurationGetConfiguration
        /// </summary>
        [Fact]
        public void ApplicationConfigurationGetConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string configId = null;
            //var response = instance.ApplicationConfigurationGetConfiguration(applicationName, configId);
            //Assert.IsType<ApplicationConfigEntry>(response);
        }

        /// <summary>
        /// Test ApplicationConfigurationGetConfigurationKeys
        /// </summary>
        [Fact]
        public void ApplicationConfigurationGetConfigurationKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string key = null;
            //string configured = null;
            //var response = instance.ApplicationConfigurationGetConfigurationKeys(applicationName, key, configured);
            //Assert.IsType<List<ApplicationConfigList>>(response);
        }

        /// <summary>
        /// Test ApplicationConfigurationGetConfigurations
        /// </summary>
        [Fact]
        public void ApplicationConfigurationGetConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //var response = instance.ApplicationConfigurationGetConfigurations(applicationName);
            //Assert.IsType<ApplicationConfigList>(response);
        }

        /// <summary>
        /// Test ApplicationConfigurationSetConfiguration
        /// </summary>
        [Fact]
        public void ApplicationConfigurationSetConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string configId = null;
            //ApplicationConfigEntry body = null;
            //var response = instance.ApplicationConfigurationSetConfiguration(applicationName, configId, body);
            //Assert.IsType<ApplicationConfigEntry>(response);
        }

        /// <summary>
        /// Test ApplicationConfigurationSetConfigurations
        /// </summary>
        [Fact]
        public void ApplicationConfigurationSetConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //List<ApplicationConfigEntry> body = null;
            //var response = instance.ApplicationConfigurationSetConfigurations(applicationName, body);
            //Assert.IsType<ApplicationConfigList>(response);
        }
    }
}
