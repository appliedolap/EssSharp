/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing GlobalDatasourcesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GlobalDatasourcesApiTests : IDisposable
    {
        private GlobalDatasourcesApi instance;

        public GlobalDatasourcesApiTests()
        {
            instance = new GlobalDatasourcesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GlobalDatasourcesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GlobalDatasourcesApi
            //Assert.IsType<GlobalDatasourcesApi>(instance);
        }

        /// <summary>
        /// Test GlobalDatasourcesCreateDatasource
        /// </summary>
        [Fact]
        public void GlobalDatasourcesCreateDatasourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Datasource body = null;
            //instance.GlobalDatasourcesCreateDatasource(body);
        }

        /// <summary>
        /// Test GlobalDatasourcesDeleteDatasource
        /// </summary>
        [Fact]
        public void GlobalDatasourcesDeleteDatasourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasourceName = null;
            //instance.GlobalDatasourcesDeleteDatasource(datasourceName);
        }

        /// <summary>
        /// Test GlobalDatasourcesGetData
        /// </summary>
        [Fact]
        public void GlobalDatasourcesGetDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string streamId = null;
            //instance.GlobalDatasourcesGetData(streamId);
        }

        /// <summary>
        /// Test GlobalDatasourcesGetDataStream
        /// </summary>
        [Fact]
        public void GlobalDatasourcesGetDataStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeHeaders = null;
            //bool? metaDataOnly = null;
            //DatasourceQueryInfo body = null;
            //instance.GlobalDatasourcesGetDataStream(includeHeaders, metaDataOnly, body);
        }

        /// <summary>
        /// Test GlobalDatasourcesGetDatasourceDetails
        /// </summary>
        [Fact]
        public void GlobalDatasourcesGetDatasourceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasouceName = null;
            //var response = instance.GlobalDatasourcesGetDatasourceDetails(datasouceName);
            //Assert.IsType<Datasource>(response);
        }

        /// <summary>
        /// Test GlobalDatasourcesGetDatasources
        /// </summary>
        [Fact]
        public void GlobalDatasourcesGetDatasourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GlobalDatasourcesGetDatasources(offset, limit);
            //Assert.IsType<DatasourcesList>(response);
        }

        /// <summary>
        /// Test GlobalDatasourcesGetDelimitedDataStream
        /// </summary>
        [Fact]
        public void GlobalDatasourcesGetDelimitedDataStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeHeaders = null;
            //bool? metaDataOnly = null;
            //DatasourceQueryInfo body = null;
            //instance.GlobalDatasourcesGetDelimitedDataStream(includeHeaders, metaDataOnly, body);
        }

        /// <summary>
        /// Test GlobalDatasourcesGetResults
        /// </summary>
        [Fact]
        public void GlobalDatasourcesGetResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //DatasourceQueryInfo body = null;
            //var response = instance.GlobalDatasourcesGetResults(pageSize, body);
            //Assert.IsType<ResultBean>(response);
        }

        /// <summary>
        /// Test GlobalDatasourcesUpdateDatasource
        /// </summary>
        [Fact]
        public void GlobalDatasourcesUpdateDatasourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string datasouceName = null;
            //Datasource body = null;
            //var response = instance.GlobalDatasourcesUpdateDatasource(datasouceName, body);
            //Assert.IsType<Datasource>(response);
        }
    }
}
