/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing GlobalConnectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GlobalConnectionsApiTests : IDisposable
    {
        private GlobalConnectionsApi instance;

        public GlobalConnectionsApiTests()
        {
            instance = new GlobalConnectionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GlobalConnectionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GlobalConnectionsApi
            //Assert.IsType<GlobalConnectionsApi>(instance);
        }

        /// <summary>
        /// Test GlobalConnectionsCreateConnection
        /// </summary>
        [Fact]
        public void GlobalConnectionsCreateConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Connection body = null;
            //instance.GlobalConnectionsCreateConnection(body);
        }

        /// <summary>
        /// Test GlobalConnectionsDeleteConnection
        /// </summary>
        [Fact]
        public void GlobalConnectionsDeleteConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectionName = null;
            //instance.GlobalConnectionsDeleteConnection(connectionName);
        }

        /// <summary>
        /// Test GlobalConnectionsGetConnectionDetails
        /// </summary>
        [Fact]
        public void GlobalConnectionsGetConnectionDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectionName = null;
            //bool? password = null;
            //var response = instance.GlobalConnectionsGetConnectionDetails(connectionName, password);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test GlobalConnectionsGetConnections
        /// </summary>
        [Fact]
        public void GlobalConnectionsGetConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //string connType = null;
            //bool? repoConn = null;
            //bool? walletConn = null;
            //var response = instance.GlobalConnectionsGetConnections(offset, limit, connType, repoConn, walletConn);
            //Assert.IsType<ConnectionsList>(response);
        }

        /// <summary>
        /// Test GlobalConnectionsTestConnection
        /// </summary>
        [Fact]
        public void GlobalConnectionsTestConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Connection body = null;
            //instance.GlobalConnectionsTestConnection(body);
        }

        /// <summary>
        /// Test GlobalConnectionsTestConnectionExisting
        /// </summary>
        [Fact]
        public void GlobalConnectionsTestConnectionExistingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectionName = null;
            //instance.GlobalConnectionsTestConnectionExisting(connectionName);
        }

        /// <summary>
        /// Test GlobalConnectionsUpdateConnection
        /// </summary>
        [Fact]
        public void GlobalConnectionsUpdateConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectionName = null;
            //Connection body = null;
            //var response = instance.GlobalConnectionsUpdateConnection(connectionName, body);
            //Assert.IsType<Connection>(response);
        }

        /// <summary>
        /// Test GlobalConnectionsWallets
        /// </summary>
        [Fact]
        public void GlobalConnectionsWalletsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string connectionName = null;
            //var response = instance.GlobalConnectionsWallets(connectionName);
            //Assert.IsType<WalletLocation>(response);
        }
    }
}
