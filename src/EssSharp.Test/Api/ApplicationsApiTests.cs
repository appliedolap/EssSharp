/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationsApiTests : IDisposable
    {
        private ApplicationsApi instance;

        public ApplicationsApiTests()
        {
            instance = new ApplicationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationsApi
            //Assert.IsType<ApplicationsApi>(instance);
        }

        /// <summary>
        /// Test ApplicationsCopyApplication
        /// </summary>
        [Fact]
        public void ApplicationsCopyApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CopyRenameBean body = null;
            //instance.ApplicationsCopyApplication(body);
        }

        /// <summary>
        /// Test ApplicationsCopyDatabase
        /// </summary>
        [Fact]
        public void ApplicationsCopyDatabaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //CubeCopy body = null;
            //instance.ApplicationsCopyDatabase(applicationName, body);
        }

        /// <summary>
        /// Test ApplicationsCreateApplications
        /// </summary>
        [Fact]
        public void ApplicationsCreateApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateApplication body = null;
            //instance.ApplicationsCreateApplications(body);
        }

        /// <summary>
        /// Test ApplicationsCreateShadowApplication
        /// </summary>
        [Fact]
        public void ApplicationsCreateShadowApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ShadowCopyBean body = null;
            //instance.ApplicationsCreateShadowApplication(body);
        }

        /// <summary>
        /// Test ApplicationsDeleteApplication
        /// </summary>
        [Fact]
        public void ApplicationsDeleteApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //instance.ApplicationsDeleteApplication(applicationName);
        }

        /// <summary>
        /// Test ApplicationsDeleteDatabase
        /// </summary>
        [Fact]
        public void ApplicationsDeleteDatabaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //instance.ApplicationsDeleteDatabase(applicationName, databaseName);
        }

        /// <summary>
        /// Test ApplicationsDropShadowApplication
        /// </summary>
        [Fact]
        public void ApplicationsDropShadowApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shadowAppName = null;
            //instance.ApplicationsDropShadowApplication(shadowAppName);
        }

        /// <summary>
        /// Test ApplicationsExecuteReportScript
        /// </summary>
        [Fact]
        public void ApplicationsExecuteReportScriptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filename = null;
            //string lockForUpdate = null;
            //instance.ApplicationsExecuteReportScript(applicationName, databaseName, filename, lockForUpdate);
        }

        /// <summary>
        /// Test ApplicationsGetActiveAlias
        /// </summary>
        [Fact]
        public void ApplicationsGetActiveAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.ApplicationsGetActiveAlias(applicationName, databaseName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ApplicationsGetAliases
        /// </summary>
        [Fact]
        public void ApplicationsGetAliasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.ApplicationsGetAliases(applicationName, databaseName);
            //Assert.IsType<StringCollectionResponse>(response);
        }

        /// <summary>
        /// Test ApplicationsGetApplication
        /// </summary>
        [Fact]
        public void ApplicationsGetApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //bool? role = null;
            //var response = instance.ApplicationsGetApplication(applicationName, role);
            //Assert.IsType<Application>(response);
        }

        /// <summary>
        /// Test ApplicationsGetApplicationNames
        /// </summary>
        [Fact]
        public void ApplicationsGetApplicationNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appVisiblity = null;
            //var response = instance.ApplicationsGetApplicationNames(appVisiblity);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ApplicationsGetApplicationProvisionReport
        /// </summary>
        [Fact]
        public void ApplicationsGetApplicationProvisionReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //instance.ApplicationsGetApplicationProvisionReport(applicationName);
        }

        /// <summary>
        /// Test ApplicationsGetApplications
        /// </summary>
        [Fact]
        public void ApplicationsGetApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? offset = null;
            //int? limit = null;
            //string connectionName = null;
            //string applicationNameForConnection = null;
            //string fields = null;
            //var response = instance.ApplicationsGetApplications(filter, offset, limit, connectionName, applicationNameForConnection, fields);
            //Assert.IsType<ApplicationList>(response);
        }

        /// <summary>
        /// Test ApplicationsGetApplicationsTree
        /// </summary>
        [Fact]
        public void ApplicationsGetApplicationsTreeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApplicationsGetApplicationsTree();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ApplicationsGetCube
        /// </summary>
        [Fact]
        public void ApplicationsGetCubeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.ApplicationsGetCube(applicationName, databaseName);
            //Assert.IsType<Cube>(response);
        }

        /// <summary>
        /// Test ApplicationsGetCubes
        /// </summary>
        [Fact]
        public void ApplicationsGetCubesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string connectionName = null;
            //string applicationNameForConnection = null;
            //var response = instance.ApplicationsGetCubes(applicationName, connectionName, applicationNameForConnection);
            //Assert.IsType<CubeList>(response);
        }

        /// <summary>
        /// Test ApplicationsPerformDbOperation
        /// </summary>
        [Fact]
        public void ApplicationsPerformDbOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string action = null;
            //instance.ApplicationsPerformDbOperation(applicationName, databaseName, action);
        }

        /// <summary>
        /// Test ApplicationsPerformOperation
        /// </summary>
        [Fact]
        public void ApplicationsPerformOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string action = null;
            //instance.ApplicationsPerformOperation(applicationName, action);
        }

        /// <summary>
        /// Test ApplicationsPromoteShadowApplication
        /// </summary>
        [Fact]
        public void ApplicationsPromoteShadowApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ShadowPromoteBean body = null;
            //instance.ApplicationsPromoteShadowApplication(body);
        }

        /// <summary>
        /// Test ApplicationsRenameApplication
        /// </summary>
        [Fact]
        public void ApplicationsRenameApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CopyRenameBean body = null;
            //instance.ApplicationsRenameApplication(body);
        }

        /// <summary>
        /// Test ApplicationsRenameDatabase
        /// </summary>
        [Fact]
        public void ApplicationsRenameDatabaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //CopyRenameBean body = null;
            //instance.ApplicationsRenameDatabase(applicationName, body);
        }

        /// <summary>
        /// Test DatabasesFormulaFunctions
        /// </summary>
        [Fact]
        public void DatabasesFormulaFunctionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabasesFormulaFunctions(applicationName, databaseName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DatabasesGetCalculationFunctions
        /// </summary>
        [Fact]
        public void DatabasesGetCalculationFunctionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabasesGetCalculationFunctions(applicationName, databaseName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DatabasesGetCurrencySettings
        /// </summary>
        [Fact]
        public void DatabasesGetCurrencySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabasesGetCurrencySettings(applicationName, databaseName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DatabasesGetMdxFunctions
        /// </summary>
        [Fact]
        public void DatabasesGetMdxFunctionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabasesGetMdxFunctions(applicationName, databaseName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DatabasesSetCurrencySettings
        /// </summary>
        [Fact]
        public void DatabasesSetCurrencySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //CurrencySettings body = null;
            //var response = instance.DatabasesSetCurrencySettings(applicationName, databaseName, body);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SetActiveAlias
        /// </summary>
        [Fact]
        public void SetActiveAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string aliasTableName = null;
            //var response = instance.SetActiveAlias(applicationName, databaseName, aliasTableName);
            //Assert.IsType<StringCollectionResponse>(response);
        }
    }
}
