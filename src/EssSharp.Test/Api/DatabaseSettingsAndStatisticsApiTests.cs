/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing DatabaseSettingsAndStatisticsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DatabaseSettingsAndStatisticsApiTests : IDisposable
    {
        private DatabaseSettingsAndStatisticsApi instance;

        public DatabaseSettingsAndStatisticsApiTests()
        {
            instance = new DatabaseSettingsAndStatisticsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DatabaseSettingsAndStatisticsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DatabaseSettingsAndStatisticsApi
            //Assert.IsType<DatabaseSettingsAndStatisticsApi>(instance);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsExportQueryData
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsExportQueryDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //QueryTrackingInputs body = null;
            //instance.DatabaseSettingsStatisticsExportQueryData(applicationName, databaseName, body);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetBuffersSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetBuffersSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetBuffersSettings(applicationName, databaseName);
            //Assert.IsType<BufferSettings>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetCachesSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetCachesSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetCachesSettings(applicationName, databaseName);
            //Assert.IsType<CacheSettings>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetCalculationSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetCalculationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetCalculationSettings(applicationName, databaseName);
            //Assert.IsType<CalculationSettings>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetCompressSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetCompressSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetCompressSettings(applicationName, databaseName);
            //Assert.IsType<CompressionSettings>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetCompressionInfoSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetCompressionInfoSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //bool? fetch = null;
            //var response = instance.DatabaseSettingsStatisticsGetCompressionInfoSettings(applicationName, databaseName, fetch);
            //Assert.IsType<CompressionInfoOutput>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetOutlineAttributesSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetOutlineAttributesSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string connectionName = null;
            //string applicationNameForConnection = null;
            //var response = instance.DatabaseSettingsStatisticsGetOutlineAttributesSettings(applicationName, databaseName, connectionName, applicationNameForConnection);
            //Assert.IsType<AttributeOutlineSettings>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetOutlineSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetOutlineSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string connectionName = null;
            //string applicationNameForConnection = null;
            //string expand = null;
            //var response = instance.DatabaseSettingsStatisticsGetOutlineSettings(applicationName, databaseName, connectionName, applicationNameForConnection, expand);
            //Assert.IsType<OutlineSettingsList>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetOutlineSettingsDateFormats
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetOutlineSettingsDateFormats(applicationName, databaseName);
            //Assert.IsType<OutlineDateFormat>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetRuntimeStats
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetRuntimeStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetRuntimeStats(applicationName, databaseName);
            //Assert.IsType<RuntimeStatistics>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string expand = null;
            //var response = instance.DatabaseSettingsStatisticsGetSettings(applicationName, databaseName, expand);
            //Assert.IsType<SettingsList>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetStartupSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetStartupSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetStartupSettings(applicationName, databaseName);
            //Assert.IsType<StartupSettings>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetStatistics
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string expand = null;
            //var response = instance.DatabaseSettingsStatisticsGetStatistics(applicationName, databaseName, expand);
            //Assert.IsType<StatisticsList>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetStorageStats
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetStorageStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetStorageStats(applicationName, databaseName);
            //Assert.IsType<StorageStatistics>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsGetTransSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsGetTransSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.DatabaseSettingsStatisticsGetTransSettings(applicationName, databaseName);
            //Assert.IsType<TransactionSettings>(response);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsImportQueryData
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsImportQueryDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //QueryTrackingInputs body = null;
            //instance.DatabaseSettingsStatisticsImportQueryData(applicationName, databaseName, body);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsUpdateOutlineSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsUpdateOutlineSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //List<PatchElement> body = null;
            //instance.DatabaseSettingsStatisticsUpdateOutlineSettings(applicationName, databaseName, body);
        }

        /// <summary>
        /// Test DatabaseSettingsStatisticsUpdateSettings
        /// </summary>
        [Fact]
        public void DatabaseSettingsStatisticsUpdateSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //List<PatchElement> body = null;
            //instance.DatabaseSettingsStatisticsUpdateSettings(applicationName, databaseName, body);
        }
    }
}
