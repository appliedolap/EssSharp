/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing PartitionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PartitionsApiTests : IDisposable
    {
        private PartitionsApi instance;

        public PartitionsApiTests()
        {
            instance = new PartitionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PartitionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PartitionsApi
            //Assert.IsType<PartitionsApi>(instance);
        }

        /// <summary>
        /// Test PartitionCreatePartition
        /// </summary>
        [Fact]
        public void PartitionCreatePartitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //PartitionBean body = null;
            //bool? executeInBackground = null;
            //instance.PartitionCreatePartition(applicationName, databaseName, body, executeInBackground);
        }

        /// <summary>
        /// Test PartitionDeletePartition
        /// </summary>
        [Fact]
        public void PartitionDeletePartitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string type = null;
            //string serverName = null;
            //string applicationName2 = null;
            //string databaseName2 = null;
            //string datasourceName = null;
            //string measuresDimensionName = null;
            //bool? applicationLevelDatasource = null;
            //instance.PartitionDeletePartition(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
        }

        /// <summary>
        /// Test PartitionGetPartitionCellCount
        /// </summary>
        [Fact]
        public void PartitionGetPartitionCellCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //PartitionBean body = null;
            //var response = instance.PartitionGetPartitionCellCount(applicationName, databaseName, body);
            //Assert.IsType<PartitionBean>(response);
        }

        /// <summary>
        /// Test PartitionGetPartitions
        /// </summary>
        [Fact]
        public void PartitionGetPartitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //List<string> type = null;
            //int? offset = null;
            //int? limit = null;
            //string serverName = null;
            //string applicationName2 = null;
            //string databaseName2 = null;
            //string datasourceName = null;
            //string measuresDimensionName = null;
            //bool? applicationLevelDatasource = null;
            //var response = instance.PartitionGetPartitions(applicationName, databaseName, type, offset, limit, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
            //Assert.IsType<PartitionList>(response);
        }

        /// <summary>
        /// Test PartitionGetSupportedFederatedTypes
        /// </summary>
        [Fact]
        public void PartitionGetSupportedFederatedTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //instance.PartitionGetSupportedFederatedTypes(applicationName, databaseName);
        }

        /// <summary>
        /// Test PartitionLockPartition
        /// </summary>
        [Fact]
        public void PartitionLockPartitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string type = null;
            //string serverName = null;
            //string applicationName2 = null;
            //string databaseName2 = null;
            //string datasourceName = null;
            //string measuresDimensionName = null;
            //bool? applicationLevelDatasource = null;
            //instance.PartitionLockPartition(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
        }

        /// <summary>
        /// Test PartitionReplicateDataFromSource
        /// </summary>
        [Fact]
        public void PartitionReplicateDataFromSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string applicationName2 = null;
            //string databaseName2 = null;
            //string serverName = null;
            //string replicateOption = null;
            //instance.PartitionReplicateDataFromSource(applicationName, databaseName, applicationName2, databaseName2, serverName, replicateOption);
        }

        /// <summary>
        /// Test PartitionUnlockPartition
        /// </summary>
        [Fact]
        public void PartitionUnlockPartitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string type = null;
            //string serverName = null;
            //string applicationName2 = null;
            //string databaseName2 = null;
            //string datasourceName = null;
            //string measuresDimensionName = null;
            //bool? applicationLevelDatasource = null;
            //instance.PartitionUnlockPartition(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
        }

        /// <summary>
        /// Test PartitionUpdatePartition
        /// </summary>
        [Fact]
        public void PartitionUpdatePartitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //PartitionBean body = null;
            //bool? executeInBackground = null;
            //instance.PartitionUpdatePartition(applicationName, databaseName, body, executeInBackground);
        }

        /// <summary>
        /// Test PartitionValidatePartition
        /// </summary>
        [Fact]
        public void PartitionValidatePartitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //PartitionBean body = null;
            //instance.PartitionValidatePartition(applicationName, databaseName, body);
        }
    }
}
