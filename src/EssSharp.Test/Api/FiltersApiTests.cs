/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing FiltersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FiltersApiTests : IDisposable
    {
        private FiltersApi instance;

        public FiltersApiTests()
        {
            instance = new FiltersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FiltersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' FiltersApi
            //Assert.IsType<FiltersApi>(instance);
        }

        /// <summary>
        /// Test FiltersAddFilterPermission
        /// </summary>
        [Fact]
        public void FiltersAddFilterPermissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //UserGroupProvisionInfo body = null;
            //var response = instance.FiltersAddFilterPermission(applicationName, databaseName, filterName, body);
            //Assert.IsType<UserGroupProvisionInfo>(response);
        }

        /// <summary>
        /// Test FiltersCopyFilter
        /// </summary>
        [Fact]
        public void FiltersCopyFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //FilterCopy body = null;
            //var response = instance.FiltersCopyFilter(applicationName, databaseName, body);
            //Assert.IsType<FilterBean>(response);
        }

        /// <summary>
        /// Test FiltersCreateFilter
        /// </summary>
        [Fact]
        public void FiltersCreateFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //FilterBean body = null;
            //var response = instance.FiltersCreateFilter(applicationName, databaseName, body);
            //Assert.IsType<FilterBean>(response);
        }

        /// <summary>
        /// Test FiltersDeleteFilter
        /// </summary>
        [Fact]
        public void FiltersDeleteFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //instance.FiltersDeleteFilter(applicationName, databaseName, filterName);
        }

        /// <summary>
        /// Test FiltersEditFilter
        /// </summary>
        [Fact]
        public void FiltersEditFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //FilterBean body = null;
            //var response = instance.FiltersEditFilter(applicationName, databaseName, filterName, body);
            //Assert.IsType<FilterBean>(response);
        }

        /// <summary>
        /// Test FiltersGetFilter
        /// </summary>
        [Fact]
        public void FiltersGetFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //var response = instance.FiltersGetFilter(applicationName, databaseName, filterName);
            //Assert.IsType<FilterBean>(response);
        }

        /// <summary>
        /// Test FiltersGetFilterPermissions
        /// </summary>
        [Fact]
        public void FiltersGetFilterPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //var response = instance.FiltersGetFilterPermissions(applicationName, databaseName, filterName);
            //Assert.IsType<List<UserGroupProvisionInfoList>>(response);
        }

        /// <summary>
        /// Test FiltersGetFilterRows
        /// </summary>
        [Fact]
        public void FiltersGetFilterRowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //var response = instance.FiltersGetFilterRows(applicationName, databaseName, filterName);
            //Assert.IsType<FilterRowList>(response);
        }

        /// <summary>
        /// Test FiltersListFilters
        /// </summary>
        [Fact]
        public void FiltersListFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //var response = instance.FiltersListFilters(applicationName, databaseName);
            //Assert.IsType<List<FilterList>>(response);
        }

        /// <summary>
        /// Test FiltersRemoveFilterPermission
        /// </summary>
        [Fact]
        public void FiltersRemoveFilterPermissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //string userGroupId = null;
            //bool group = null;
            //instance.FiltersRemoveFilterPermission(applicationName, databaseName, filterName, userGroupId, group);
        }

        /// <summary>
        /// Test FiltersRenameFilter
        /// </summary>
        [Fact]
        public void FiltersRenameFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //FilterCopy body = null;
            //var response = instance.FiltersRenameFilter(applicationName, databaseName, body);
            //Assert.IsType<FilterBean>(response);
        }

        /// <summary>
        /// Test FiltersReplaceFilterPermission
        /// </summary>
        [Fact]
        public void FiltersReplaceFilterPermissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //string filterName = null;
            //UserGroupProvisionInfoList body = null;
            //var response = instance.FiltersReplaceFilterPermission(applicationName, databaseName, filterName, body);
            //Assert.IsType<UserGroupProvisionInfo>(response);
        }

        /// <summary>
        /// Test FiltersValidateFilter
        /// </summary>
        [Fact]
        public void FiltersValidateFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationName = null;
            //string databaseName = null;
            //FilterBean body = null;
            //instance.FiltersValidateFilter(applicationName, databaseName, body);
        }
    }
}
