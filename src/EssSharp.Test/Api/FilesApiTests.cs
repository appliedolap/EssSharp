/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EssSharp.Client;
using EssSharp.Api;
// uncomment below to import models
//using EssSharp.Model;

namespace EssSharp.Test.Api
{
    /// <summary>
    ///  Class for testing FilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FilesApiTests : IDisposable
    {
        private FilesApi instance;

        public FilesApiTests()
        {
            instance = new FilesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FilesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' FilesApi
            //Assert.IsType<FilesApi>(instance);
        }

        /// <summary>
        /// Test FilesAbortUpload
        /// </summary>
        [Fact]
        public void FilesAbortUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string uploadId = null;
            //instance.FilesAbortUpload(path, uploadId);
        }

        /// <summary>
        /// Test FilesAddFile
        /// </summary>
        [Fact]
        public void FilesAddFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //bool overwrite = null;
            //bool? append = null;
            //var response = instance.FilesAddFile(path, overwrite, append);
            //Assert.IsType<GenericEntity>(response);
        }

        /// <summary>
        /// Test FilesCopyResource
        /// </summary>
        [Fact]
        public void FilesCopyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FilePathDetail body = null;
            //bool? overwrite = null;
            //instance.FilesCopyResource(body, overwrite);
        }

        /// <summary>
        /// Test FilesCreateUpload
        /// </summary>
        [Fact]
        public void FilesCreateUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //bool overwrite = null;
            //bool append = null;
            //var response = instance.FilesCreateUpload(path, overwrite, append);
            //Assert.IsType<CreateFilePartUploadResponse>(response);
        }

        /// <summary>
        /// Test FilesDeleteFile
        /// </summary>
        [Fact]
        public void FilesDeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.FilesDeleteFile(path);
        }

        /// <summary>
        /// Test FilesExtract
        /// </summary>
        [Fact]
        public void FilesExtractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ZipFileDetails body = null;
            //bool? overwrite = null;
            //instance.FilesExtract(body, overwrite);
        }

        /// <summary>
        /// Test FilesGetSharedPath
        /// </summary>
        [Fact]
        public void FilesGetSharedPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.FilesGetSharedPath();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test FilesGetUserHomePath
        /// </summary>
        [Fact]
        public void FilesGetUserHomePathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.FilesGetUserHomePath();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test FilesListFiles
        /// </summary>
        [Fact]
        public void FilesListFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //int? offset = null;
            //int? limit = null;
            //string type = null;
            //bool? overwrite = null;
            //string action = null;
            //long? fileSize = null;
            //string filter = null;
            //bool? recursive = null;
            //var response = instance.FilesListFiles(path, offset, limit, type, overwrite, action, fileSize, filter, recursive);
            //Assert.IsType<FileCollectionResponse>(response);
        }

        /// <summary>
        /// Test FilesListRootFolders
        /// </summary>
        [Fact]
        public void FilesListRootFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //bool? recursive = null;
            //var response = instance.FilesListRootFolders(filter, recursive);
            //Assert.IsType<CollectionResponse>(response);
        }

        /// <summary>
        /// Test FilesMoveResource
        /// </summary>
        [Fact]
        public void FilesMoveResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FilePathDetail body = null;
            //bool? overwrite = null;
            //instance.FilesMoveResource(body, overwrite);
        }

        /// <summary>
        /// Test FilesUploadCommit
        /// </summary>
        [Fact]
        public void FilesUploadCommitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string uploadId = null;
            //Dictionary<string, string> body = null;
            //var response = instance.FilesUploadCommit(path, uploadId, body);
            //Assert.IsType<CommitFilePartUploadResponse>(response);
        }

        /// <summary>
        /// Test FilesUploadPart
        /// </summary>
        [Fact]
        public void FilesUploadPartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //int partNum = null;
            //string uploadId = null;
            //var response = instance.FilesUploadPart(path, partNum, uploadId);
            //Assert.IsType<UploadFilePartResponse>(response);
        }

        /// <summary>
        /// Test GetUploadConfig
        /// </summary>
        [Fact]
        public void GetUploadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetUploadConfig();
        }
    }
}
