/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using EssSharp.Api;
using EssSharp.Model;
using EssSharp.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace EssSharp.Test.Model
{
    /// <summary>
    ///  Class for testing StorageStatistics
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class StorageStatisticsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for StorageStatistics
        //private StorageStatistics instance;

        public StorageStatisticsTests()
        {
            // TODO uncomment below to create an instance of StorageStatistics
            //instance = new StorageStatistics();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of StorageStatistics
        /// </summary>
        [Fact]
        public void StorageStatisticsInstanceTest()
        {
            // TODO uncomment below to test "IsType" StorageStatistics
            //Assert.IsType<StorageStatistics>(instance);
        }


        /// <summary>
        /// Test the property 'Dimensions'
        /// </summary>
        [Fact]
        public void DimensionsTest()
        {
            // TODO unit test for the property 'Dimensions'
        }
        /// <summary>
        /// Test the property 'MaxKeyLengthBits'
        /// </summary>
        [Fact]
        public void MaxKeyLengthBitsTest()
        {
            // TODO unit test for the property 'MaxKeyLengthBits'
        }
        /// <summary>
        /// Test the property 'MaxKeyLengthBytes'
        /// </summary>
        [Fact]
        public void MaxKeyLengthBytesTest()
        {
            // TODO unit test for the property 'MaxKeyLengthBytes'
        }
        /// <summary>
        /// Test the property 'NumberOfInputLevelCells'
        /// </summary>
        [Fact]
        public void NumberOfInputLevelCellsTest()
        {
            // TODO unit test for the property 'NumberOfInputLevelCells'
        }
        /// <summary>
        /// Test the property 'NumberOfIncrementalDataSlices'
        /// </summary>
        [Fact]
        public void NumberOfIncrementalDataSlicesTest()
        {
            // TODO unit test for the property 'NumberOfIncrementalDataSlices'
        }
        /// <summary>
        /// Test the property 'NumberOfIncrementalInputCells'
        /// </summary>
        [Fact]
        public void NumberOfIncrementalInputCellsTest()
        {
            // TODO unit test for the property 'NumberOfIncrementalInputCells'
        }
        /// <summary>
        /// Test the property 'NumberOfAggregateViews'
        /// </summary>
        [Fact]
        public void NumberOfAggregateViewsTest()
        {
            // TODO unit test for the property 'NumberOfAggregateViews'
        }
        /// <summary>
        /// Test the property 'NumberOfAggregateCells'
        /// </summary>
        [Fact]
        public void NumberOfAggregateCellsTest()
        {
            // TODO unit test for the property 'NumberOfAggregateCells'
        }
        /// <summary>
        /// Test the property 'NumberOfIncrementalAggregateCells'
        /// </summary>
        [Fact]
        public void NumberOfIncrementalAggregateCellsTest()
        {
            // TODO unit test for the property 'NumberOfIncrementalAggregateCells'
        }
        /// <summary>
        /// Test the property 'CostOfQueryingIncrementalData'
        /// </summary>
        [Fact]
        public void CostOfQueryingIncrementalDataTest()
        {
            // TODO unit test for the property 'CostOfQueryingIncrementalData'
        }
        /// <summary>
        /// Test the property 'InputLevelDataSize'
        /// </summary>
        [Fact]
        public void InputLevelDataSizeTest()
        {
            // TODO unit test for the property 'InputLevelDataSize'
        }
        /// <summary>
        /// Test the property 'AggregateDataSize'
        /// </summary>
        [Fact]
        public void AggregateDataSizeTest()
        {
            // TODO unit test for the property 'AggregateDataSize'
        }
        /// <summary>
        /// Test the property 'NumberOfExistingBlocks'
        /// </summary>
        [Fact]
        public void NumberOfExistingBlocksTest()
        {
            // TODO unit test for the property 'NumberOfExistingBlocks'
        }
        /// <summary>
        /// Test the property 'BlockSize'
        /// </summary>
        [Fact]
        public void BlockSizeTest()
        {
            // TODO unit test for the property 'BlockSize'
        }
        /// <summary>
        /// Test the property 'PotentialNumberOfBlocks'
        /// </summary>
        [Fact]
        public void PotentialNumberOfBlocksTest()
        {
            // TODO unit test for the property 'PotentialNumberOfBlocks'
        }
        /// <summary>
        /// Test the property 'ExistingLevelZeroBlocks'
        /// </summary>
        [Fact]
        public void ExistingLevelZeroBlocksTest()
        {
            // TODO unit test for the property 'ExistingLevelZeroBlocks'
        }
        /// <summary>
        /// Test the property 'ExistingUpperLevelBlocks'
        /// </summary>
        [Fact]
        public void ExistingUpperLevelBlocksTest()
        {
            // TODO unit test for the property 'ExistingUpperLevelBlocks'
        }
        /// <summary>
        /// Test the property 'BlockDensity'
        /// </summary>
        [Fact]
        public void BlockDensityTest()
        {
            // TODO unit test for the property 'BlockDensity'
        }
        /// <summary>
        /// Test the property 'PercentageOfMaximumBlocksExisting'
        /// </summary>
        [Fact]
        public void PercentageOfMaximumBlocksExistingTest()
        {
            // TODO unit test for the property 'PercentageOfMaximumBlocksExisting'
        }
        /// <summary>
        /// Test the property 'CompressionRatio'
        /// </summary>
        [Fact]
        public void CompressionRatioTest()
        {
            // TODO unit test for the property 'CompressionRatio'
        }
        /// <summary>
        /// Test the property 'AverageClusteringRatio'
        /// </summary>
        [Fact]
        public void AverageClusteringRatioTest()
        {
            // TODO unit test for the property 'AverageClusteringRatio'
        }
        /// <summary>
        /// Test the property 'PageFileSize'
        /// </summary>
        [Fact]
        public void PageFileSizeTest()
        {
            // TODO unit test for the property 'PageFileSize'
        }
        /// <summary>
        /// Test the property 'IndexFileSize'
        /// </summary>
        [Fact]
        public void IndexFileSizeTest()
        {
            // TODO unit test for the property 'IndexFileSize'
        }

    }

}
