/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ColumnOperation
    /// </summary>
    [DataContract(Name = "ColumnOperation")]
    public partial class ColumnOperation : IEquatable<ColumnOperation>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CREATE for value: CREATE
            /// </summary>
            [EnumMember(Value = "CREATE")]
            CREATE = 1,

            /// <summary>
            /// Enum JOIN for value: JOIN
            /// </summary>
            [EnumMember(Value = "JOIN")]
            JOIN = 2,

            /// <summary>
            /// Enum SPLIT for value: SPLIT
            /// </summary>
            [EnumMember(Value = "SPLIT")]
            SPLIT = 3,

            /// <summary>
            /// Enum MOVE for value: MOVE
            /// </summary>
            [EnumMember(Value = "MOVE")]
            MOVE = 4,

            /// <summary>
            /// Enum CREATETEXT for value: CREATETEXT
            /// </summary>
            [EnumMember(Value = "CREATETEXT")]
            CREATETEXT = 5,

            /// <summary>
            /// Enum SUBSTRING for value: SUBSTRING
            /// </summary>
            [EnumMember(Value = "SUBSTRING")]
            SUBSTRING = 6

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnOperation" /> class.
        /// </summary>
        /// <param name="updateColumns">updateColumns.</param>
        /// <param name="type">type.</param>
        /// <param name="position">position.</param>
        public ColumnOperation(bool updateColumns = default(bool), TypeEnum? type = default(TypeEnum?), int position = default(int))
        {
            this.UpdateColumns = updateColumns;
            this.Type = type;
            this.Position = position;
        }

        /// <summary>
        /// Gets or Sets UpdateColumns
        /// </summary>
        [DataMember(Name = "updateColumns", EmitDefaultValue = true)]
        public bool UpdateColumns { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public int Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColumnOperation {\n");
            sb.Append("  UpdateColumns: ").Append(UpdateColumns).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ColumnOperation);
        }

        /// <summary>
        /// Returns true if ColumnOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of ColumnOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ColumnOperation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpdateColumns == input.UpdateColumns ||
                    this.UpdateColumns.Equals(input.UpdateColumns)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UpdateColumns.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
