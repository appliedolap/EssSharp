/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ConnectionInfoBean
    /// </summary>
    [DataContract(Name = "ConnectionInfoBean")]
    public partial class ConnectionInfoBean : IEquatable<ConnectionInfoBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionInfoBean" /> class.
        /// </summary>
        /// <param name="connectionName">connectionName.</param>
        /// <param name="serverName">serverName.</param>
        /// <param name="userName">userName.</param>
        /// <param name="password">password.</param>
        /// <param name="description">description.</param>
        /// <param name="applicationName">applicationName.</param>
        /// <param name="databaseName">databaseName.</param>
        /// <param name="datasourceName">datasourceName.</param>
        /// <param name="measuresDimensionName">measuresDimensionName.</param>
        /// <param name="schemaName">schemaName.</param>
        /// <param name="factTableName">factTableName.</param>
        /// <param name="essbaseToColumnMap">essbaseToColumnMap.</param>
        /// <param name="essbaseToDataSourceMap">essbaseToDataSourceMap.</param>
        /// <param name="alterCredentials">alterCredentials.</param>
        /// <param name="applicationLevelConnection">applicationLevelConnection.</param>
        /// <param name="applicationLevelDatasource">applicationLevelDatasource.</param>
        public ConnectionInfoBean(string connectionName = default(string), string serverName = default(string), string userName = default(string), string password = default(string), string description = default(string), string applicationName = default(string), string databaseName = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), string schemaName = default(string), string factTableName = default(string), EsbToColMap essbaseToColumnMap = default(EsbToColMap), EssToDsMapDTO essbaseToDataSourceMap = default(EssToDsMapDTO), bool alterCredentials = default(bool), bool applicationLevelConnection = default(bool), bool applicationLevelDatasource = default(bool))
        {
            this.ConnectionName = connectionName;
            this.ServerName = serverName;
            this.UserName = userName;
            this.Password = password;
            this.Description = description;
            this.ApplicationName = applicationName;
            this.DatabaseName = databaseName;
            this.DatasourceName = datasourceName;
            this.MeasuresDimensionName = measuresDimensionName;
            this.SchemaName = schemaName;
            this.FactTableName = factTableName;
            this.EssbaseToColumnMap = essbaseToColumnMap;
            this.EssbaseToDataSourceMap = essbaseToDataSourceMap;
            this.AlterCredentials = alterCredentials;
            this.ApplicationLevelConnection = applicationLevelConnection;
            this.ApplicationLevelDatasource = applicationLevelDatasource;
        }

        /// <summary>
        /// Gets or Sets ConnectionName
        /// </summary>
        [DataMember(Name = "connectionName", EmitDefaultValue = false)]
        public string ConnectionName { get; set; }

        /// <summary>
        /// Gets or Sets ServerName
        /// </summary>
        [DataMember(Name = "serverName", EmitDefaultValue = false)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name = "applicationName", EmitDefaultValue = false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseName
        /// </summary>
        [DataMember(Name = "databaseName", EmitDefaultValue = false)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or Sets DatasourceName
        /// </summary>
        [DataMember(Name = "datasourceName", EmitDefaultValue = false)]
        public string DatasourceName { get; set; }

        /// <summary>
        /// Gets or Sets MeasuresDimensionName
        /// </summary>
        [DataMember(Name = "measuresDimensionName", EmitDefaultValue = false)]
        public string MeasuresDimensionName { get; set; }

        /// <summary>
        /// Gets or Sets SchemaName
        /// </summary>
        [DataMember(Name = "schemaName", EmitDefaultValue = false)]
        public string SchemaName { get; set; }

        /// <summary>
        /// Gets or Sets FactTableName
        /// </summary>
        [DataMember(Name = "factTableName", EmitDefaultValue = false)]
        public string FactTableName { get; set; }

        /// <summary>
        /// Gets or Sets EssbaseToColumnMap
        /// </summary>
        [DataMember(Name = "essbaseToColumnMap", EmitDefaultValue = false)]
        public EsbToColMap EssbaseToColumnMap { get; set; }

        /// <summary>
        /// Gets or Sets EssbaseToDataSourceMap
        /// </summary>
        [DataMember(Name = "essbaseToDataSourceMap", EmitDefaultValue = false)]
        public EssToDsMapDTO EssbaseToDataSourceMap { get; set; }

        /// <summary>
        /// Gets or Sets AlterCredentials
        /// </summary>
        [DataMember(Name = "alterCredentials", EmitDefaultValue = true)]
        public bool AlterCredentials { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationLevelConnection
        /// </summary>
        [DataMember(Name = "applicationLevelConnection", EmitDefaultValue = true)]
        public bool ApplicationLevelConnection { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationLevelDatasource
        /// </summary>
        [DataMember(Name = "applicationLevelDatasource", EmitDefaultValue = true)]
        public bool ApplicationLevelDatasource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionInfoBean {\n");
            sb.Append("  ConnectionName: ").Append(ConnectionName).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  DatasourceName: ").Append(DatasourceName).Append("\n");
            sb.Append("  MeasuresDimensionName: ").Append(MeasuresDimensionName).Append("\n");
            sb.Append("  SchemaName: ").Append(SchemaName).Append("\n");
            sb.Append("  FactTableName: ").Append(FactTableName).Append("\n");
            sb.Append("  EssbaseToColumnMap: ").Append(EssbaseToColumnMap).Append("\n");
            sb.Append("  EssbaseToDataSourceMap: ").Append(EssbaseToDataSourceMap).Append("\n");
            sb.Append("  AlterCredentials: ").Append(AlterCredentials).Append("\n");
            sb.Append("  ApplicationLevelConnection: ").Append(ApplicationLevelConnection).Append("\n");
            sb.Append("  ApplicationLevelDatasource: ").Append(ApplicationLevelDatasource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectionInfoBean);
        }

        /// <summary>
        /// Returns true if ConnectionInfoBean instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectionInfoBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectionInfoBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectionName == input.ConnectionName ||
                    (this.ConnectionName != null &&
                    this.ConnectionName.Equals(input.ConnectionName))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.DatabaseName == input.DatabaseName ||
                    (this.DatabaseName != null &&
                    this.DatabaseName.Equals(input.DatabaseName))
                ) && 
                (
                    this.DatasourceName == input.DatasourceName ||
                    (this.DatasourceName != null &&
                    this.DatasourceName.Equals(input.DatasourceName))
                ) && 
                (
                    this.MeasuresDimensionName == input.MeasuresDimensionName ||
                    (this.MeasuresDimensionName != null &&
                    this.MeasuresDimensionName.Equals(input.MeasuresDimensionName))
                ) && 
                (
                    this.SchemaName == input.SchemaName ||
                    (this.SchemaName != null &&
                    this.SchemaName.Equals(input.SchemaName))
                ) && 
                (
                    this.FactTableName == input.FactTableName ||
                    (this.FactTableName != null &&
                    this.FactTableName.Equals(input.FactTableName))
                ) && 
                (
                    this.EssbaseToColumnMap == input.EssbaseToColumnMap ||
                    (this.EssbaseToColumnMap != null &&
                    this.EssbaseToColumnMap.Equals(input.EssbaseToColumnMap))
                ) && 
                (
                    this.EssbaseToDataSourceMap == input.EssbaseToDataSourceMap ||
                    (this.EssbaseToDataSourceMap != null &&
                    this.EssbaseToDataSourceMap.Equals(input.EssbaseToDataSourceMap))
                ) && 
                (
                    this.AlterCredentials == input.AlterCredentials ||
                    this.AlterCredentials.Equals(input.AlterCredentials)
                ) && 
                (
                    this.ApplicationLevelConnection == input.ApplicationLevelConnection ||
                    this.ApplicationLevelConnection.Equals(input.ApplicationLevelConnection)
                ) && 
                (
                    this.ApplicationLevelDatasource == input.ApplicationLevelDatasource ||
                    this.ApplicationLevelDatasource.Equals(input.ApplicationLevelDatasource)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionName != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionName.GetHashCode();
                }
                if (this.ServerName != null)
                {
                    hashCode = (hashCode * 59) + this.ServerName.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationName.GetHashCode();
                }
                if (this.DatabaseName != null)
                {
                    hashCode = (hashCode * 59) + this.DatabaseName.GetHashCode();
                }
                if (this.DatasourceName != null)
                {
                    hashCode = (hashCode * 59) + this.DatasourceName.GetHashCode();
                }
                if (this.MeasuresDimensionName != null)
                {
                    hashCode = (hashCode * 59) + this.MeasuresDimensionName.GetHashCode();
                }
                if (this.SchemaName != null)
                {
                    hashCode = (hashCode * 59) + this.SchemaName.GetHashCode();
                }
                if (this.FactTableName != null)
                {
                    hashCode = (hashCode * 59) + this.FactTableName.GetHashCode();
                }
                if (this.EssbaseToColumnMap != null)
                {
                    hashCode = (hashCode * 59) + this.EssbaseToColumnMap.GetHashCode();
                }
                if (this.EssbaseToDataSourceMap != null)
                {
                    hashCode = (hashCode * 59) + this.EssbaseToDataSourceMap.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AlterCredentials.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplicationLevelConnection.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplicationLevelDatasource.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
