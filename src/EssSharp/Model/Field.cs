/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Field
    /// </summary>
    [DataContract(Name = "Field")]
    public partial class Field : IEquatable<Field>, IValidatableObject
    {
        /// <summary>
        /// Defines SelectFilterJoinOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SelectFilterJoinOptionEnum
        {
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            [EnumMember(Value = "AND")]
            AND = 1,

            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            [EnumMember(Value = "OR")]
            OR = 2

        }


        /// <summary>
        /// Gets or Sets SelectFilterJoinOption
        /// </summary>
        [DataMember(Name = "selectFilterJoinOption", EmitDefaultValue = false)]
        public SelectFilterJoinOptionEnum? SelectFilterJoinOption { get; set; }
        /// <summary>
        /// Defines RejectFilterJoinOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RejectFilterJoinOptionEnum
        {
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            [EnumMember(Value = "AND")]
            AND = 1,

            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            [EnumMember(Value = "OR")]
            OR = 2

        }


        /// <summary>
        /// Gets or Sets RejectFilterJoinOption
        /// </summary>
        [DataMember(Name = "rejectFilterJoinOption", EmitDefaultValue = false)]
        public RejectFilterJoinOptionEnum? RejectFilterJoinOption { get; set; }
        /// <summary>
        /// Defines Case
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CaseEnum
        {
            /// <summary>
            /// Enum NOOP for value: NOOP
            /// </summary>
            [EnumMember(Value = "NOOP")]
            NOOP = 1,

            /// <summary>
            /// Enum LOWERCASE for value: LOWER_CASE
            /// </summary>
            [EnumMember(Value = "LOWER_CASE")]
            LOWERCASE = 2,

            /// <summary>
            /// Enum UPPERCASE for value: UPPER_CASE
            /// </summary>
            [EnumMember(Value = "UPPER_CASE")]
            UPPERCASE = 3,

            /// <summary>
            /// Enum FIRSTCAPITALCASE for value: FIRST_CAPITAL_CASE
            /// </summary>
            [EnumMember(Value = "FIRST_CAPITAL_CASE")]
            FIRSTCAPITALCASE = 4

        }


        /// <summary>
        /// Gets or Sets Case
        /// </summary>
        [DataMember(Name = "case", EmitDefaultValue = false)]
        public CaseEnum? Case { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Field" /> class.
        /// </summary>
        /// <param name="rejectFilters">rejectFilters.</param>
        /// <param name="selectFilters">selectFilters.</param>
        /// <param name="replaceInformation">replaceInformation.</param>
        /// <param name="selectFilterJoinOption">selectFilterJoinOption.</param>
        /// <param name="rejectFilterJoinOption">rejectFilterJoinOption.</param>
        /// <param name="dateFormat">dateFormat.</param>
        /// <param name="name">name.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="suffix">suffix.</param>
        /// <param name="option">option.</param>
        /// <param name="convertSpaceToUnderScore">convertSpaceToUnderScore.</param>
        /// <param name="trim">trim.</param>
        /// <param name="width">width.</param>
        /// <param name="smartList">smartList.</param>
        /// <param name="dimensionBuildOptions">dimensionBuildOptions.</param>
        /// <param name="dataloadOptions">dataloadOptions.</param>
        /// <param name="transform">transform.</param>
        /// <param name="_case">_case.</param>
        public Field(List<Filter> rejectFilters = default(List<Filter>), List<Filter> selectFilters = default(List<Filter>), List<ReplaceInfo> replaceInformation = default(List<ReplaceInfo>), SelectFilterJoinOptionEnum? selectFilterJoinOption = default(SelectFilterJoinOptionEnum?), RejectFilterJoinOptionEnum? rejectFilterJoinOption = default(RejectFilterJoinOptionEnum?), string dateFormat = default(string), string name = default(string), string prefix = default(string), string suffix = default(string), byte[] option = default(byte[]), bool convertSpaceToUnderScore = default(bool), bool trim = default(bool), double width = default(double), string smartList = default(string), FieldDimBuildOptions dimensionBuildOptions = default(FieldDimBuildOptions), FieldDataLoadOptions dataloadOptions = default(FieldDataLoadOptions), Transform transform = default(Transform), CaseEnum? _case = default(CaseEnum?))
        {
            this.RejectFilters = rejectFilters;
            this.SelectFilters = selectFilters;
            this.ReplaceInformation = replaceInformation;
            this.SelectFilterJoinOption = selectFilterJoinOption;
            this.RejectFilterJoinOption = rejectFilterJoinOption;
            this.DateFormat = dateFormat;
            this.Name = name;
            this.Prefix = prefix;
            this.Suffix = suffix;
            this.Option = option;
            this.ConvertSpaceToUnderScore = convertSpaceToUnderScore;
            this.Trim = trim;
            this.Width = width;
            this.SmartList = smartList;
            this.DimensionBuildOptions = dimensionBuildOptions;
            this.DataloadOptions = dataloadOptions;
            this.Transform = transform;
            this.Case = _case;
        }

        /// <summary>
        /// Gets or Sets RejectFilters
        /// </summary>
        [DataMember(Name = "rejectFilters", EmitDefaultValue = false)]
        public List<Filter> RejectFilters { get; set; }

        /// <summary>
        /// Gets or Sets SelectFilters
        /// </summary>
        [DataMember(Name = "selectFilters", EmitDefaultValue = false)]
        public List<Filter> SelectFilters { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceInformation
        /// </summary>
        [DataMember(Name = "replaceInformation", EmitDefaultValue = false)]
        public List<ReplaceInfo> ReplaceInformation { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name = "dateFormat", EmitDefaultValue = false)]
        public string DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Suffix
        /// </summary>
        [DataMember(Name = "suffix", EmitDefaultValue = false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Gets or Sets Option
        /// </summary>
        [DataMember(Name = "option", EmitDefaultValue = false)]
        public byte[] Option { get; set; }

        /// <summary>
        /// Gets or Sets ConvertSpaceToUnderScore
        /// </summary>
        [DataMember(Name = "convertSpaceToUnderScore", EmitDefaultValue = true)]
        public bool ConvertSpaceToUnderScore { get; set; }

        /// <summary>
        /// Gets or Sets Trim
        /// </summary>
        [DataMember(Name = "trim", EmitDefaultValue = true)]
        public bool Trim { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public double Width { get; set; }

        /// <summary>
        /// Gets or Sets SmartList
        /// </summary>
        [DataMember(Name = "smartList", EmitDefaultValue = false)]
        public string SmartList { get; set; }

        /// <summary>
        /// Gets or Sets DimensionBuildOptions
        /// </summary>
        [DataMember(Name = "dimensionBuildOptions", EmitDefaultValue = false)]
        public FieldDimBuildOptions DimensionBuildOptions { get; set; }

        /// <summary>
        /// Gets or Sets DataloadOptions
        /// </summary>
        [DataMember(Name = "dataloadOptions", EmitDefaultValue = false)]
        public FieldDataLoadOptions DataloadOptions { get; set; }

        /// <summary>
        /// Gets or Sets Transform
        /// </summary>
        [DataMember(Name = "transform", EmitDefaultValue = false)]
        public Transform Transform { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  RejectFilters: ").Append(RejectFilters).Append("\n");
            sb.Append("  SelectFilters: ").Append(SelectFilters).Append("\n");
            sb.Append("  ReplaceInformation: ").Append(ReplaceInformation).Append("\n");
            sb.Append("  SelectFilterJoinOption: ").Append(SelectFilterJoinOption).Append("\n");
            sb.Append("  RejectFilterJoinOption: ").Append(RejectFilterJoinOption).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Option: ").Append(Option).Append("\n");
            sb.Append("  ConvertSpaceToUnderScore: ").Append(ConvertSpaceToUnderScore).Append("\n");
            sb.Append("  Trim: ").Append(Trim).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  SmartList: ").Append(SmartList).Append("\n");
            sb.Append("  DimensionBuildOptions: ").Append(DimensionBuildOptions).Append("\n");
            sb.Append("  DataloadOptions: ").Append(DataloadOptions).Append("\n");
            sb.Append("  Transform: ").Append(Transform).Append("\n");
            sb.Append("  Case: ").Append(Case).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Field);
        }

        /// <summary>
        /// Returns true if Field instances are equal
        /// </summary>
        /// <param name="input">Instance of Field to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Field input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RejectFilters == input.RejectFilters ||
                    this.RejectFilters != null &&
                    input.RejectFilters != null &&
                    this.RejectFilters.SequenceEqual(input.RejectFilters)
                ) && 
                (
                    this.SelectFilters == input.SelectFilters ||
                    this.SelectFilters != null &&
                    input.SelectFilters != null &&
                    this.SelectFilters.SequenceEqual(input.SelectFilters)
                ) && 
                (
                    this.ReplaceInformation == input.ReplaceInformation ||
                    this.ReplaceInformation != null &&
                    input.ReplaceInformation != null &&
                    this.ReplaceInformation.SequenceEqual(input.ReplaceInformation)
                ) && 
                (
                    this.SelectFilterJoinOption == input.SelectFilterJoinOption ||
                    this.SelectFilterJoinOption.Equals(input.SelectFilterJoinOption)
                ) && 
                (
                    this.RejectFilterJoinOption == input.RejectFilterJoinOption ||
                    this.RejectFilterJoinOption.Equals(input.RejectFilterJoinOption)
                ) && 
                (
                    this.DateFormat == input.DateFormat ||
                    (this.DateFormat != null &&
                    this.DateFormat.Equals(input.DateFormat))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.Option == input.Option ||
                    (this.Option != null &&
                    this.Option.Equals(input.Option))
                ) && 
                (
                    this.ConvertSpaceToUnderScore == input.ConvertSpaceToUnderScore ||
                    this.ConvertSpaceToUnderScore.Equals(input.ConvertSpaceToUnderScore)
                ) && 
                (
                    this.Trim == input.Trim ||
                    this.Trim.Equals(input.Trim)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.SmartList == input.SmartList ||
                    (this.SmartList != null &&
                    this.SmartList.Equals(input.SmartList))
                ) && 
                (
                    this.DimensionBuildOptions == input.DimensionBuildOptions ||
                    (this.DimensionBuildOptions != null &&
                    this.DimensionBuildOptions.Equals(input.DimensionBuildOptions))
                ) && 
                (
                    this.DataloadOptions == input.DataloadOptions ||
                    (this.DataloadOptions != null &&
                    this.DataloadOptions.Equals(input.DataloadOptions))
                ) && 
                (
                    this.Transform == input.Transform ||
                    (this.Transform != null &&
                    this.Transform.Equals(input.Transform))
                ) && 
                (
                    this.Case == input.Case ||
                    this.Case.Equals(input.Case)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RejectFilters != null)
                {
                    hashCode = (hashCode * 59) + this.RejectFilters.GetHashCode();
                }
                if (this.SelectFilters != null)
                {
                    hashCode = (hashCode * 59) + this.SelectFilters.GetHashCode();
                }
                if (this.ReplaceInformation != null)
                {
                    hashCode = (hashCode * 59) + this.ReplaceInformation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SelectFilterJoinOption.GetHashCode();
                hashCode = (hashCode * 59) + this.RejectFilterJoinOption.GetHashCode();
                if (this.DateFormat != null)
                {
                    hashCode = (hashCode * 59) + this.DateFormat.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Prefix != null)
                {
                    hashCode = (hashCode * 59) + this.Prefix.GetHashCode();
                }
                if (this.Suffix != null)
                {
                    hashCode = (hashCode * 59) + this.Suffix.GetHashCode();
                }
                if (this.Option != null)
                {
                    hashCode = (hashCode * 59) + this.Option.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConvertSpaceToUnderScore.GetHashCode();
                hashCode = (hashCode * 59) + this.Trim.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                if (this.SmartList != null)
                {
                    hashCode = (hashCode * 59) + this.SmartList.GetHashCode();
                }
                if (this.DimensionBuildOptions != null)
                {
                    hashCode = (hashCode * 59) + this.DimensionBuildOptions.GetHashCode();
                }
                if (this.DataloadOptions != null)
                {
                    hashCode = (hashCode * 59) + this.DataloadOptions.GetHashCode();
                }
                if (this.Transform != null)
                {
                    hashCode = (hashCode * 59) + this.Transform.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Case.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
