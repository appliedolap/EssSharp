/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// GeneralOutlineSettings
    /// </summary>
    [DataContract(Name = "GeneralOutlineSettings")]
    public partial class GeneralOutlineSettings : IEquatable<GeneralOutlineSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralOutlineSettings" /> class.
        /// </summary>
        /// <param name="caseSensitiveMembers">caseSensitiveMembers.</param>
        /// <param name="outlineType">outlineType.</param>
        /// <param name="allowDuplicateMemberNames">allowDuplicateMemberNames.</param>
        /// <param name="typeMeasuresEnabled">typeMeasuresEnabled.</param>
        /// <param name="dateFormat">dateFormat.</param>
        /// <param name="varyingAttributesEnabled">varyingAttributesEnabled.</param>
        /// <param name="timeModified">timeModified.</param>
        /// <param name="autoConfigure">autoConfigure.</param>
        public GeneralOutlineSettings(bool caseSensitiveMembers = default(bool), string outlineType = default(string), bool allowDuplicateMemberNames = default(bool), bool typeMeasuresEnabled = default(bool), string dateFormat = default(string), bool varyingAttributesEnabled = default(bool), long timeModified = default(long), bool autoConfigure = default(bool))
        {
            this.CaseSensitiveMembers = caseSensitiveMembers;
            this.OutlineType = outlineType;
            this.AllowDuplicateMemberNames = allowDuplicateMemberNames;
            this.TypeMeasuresEnabled = typeMeasuresEnabled;
            this.DateFormat = dateFormat;
            this.VaryingAttributesEnabled = varyingAttributesEnabled;
            this.TimeModified = timeModified;
            this.AutoConfigure = autoConfigure;
        }

        /// <summary>
        /// Gets or Sets CaseSensitiveMembers
        /// </summary>
        [DataMember(Name = "caseSensitiveMembers", EmitDefaultValue = true)]
        public bool CaseSensitiveMembers { get; set; }

        /// <summary>
        /// Gets or Sets OutlineType
        /// </summary>
        [DataMember(Name = "outlineType", EmitDefaultValue = false)]
        public string OutlineType { get; set; }

        /// <summary>
        /// Gets or Sets AllowDuplicateMemberNames
        /// </summary>
        [DataMember(Name = "allowDuplicateMemberNames", EmitDefaultValue = true)]
        public bool AllowDuplicateMemberNames { get; set; }

        /// <summary>
        /// Gets or Sets TypeMeasuresEnabled
        /// </summary>
        [DataMember(Name = "typeMeasuresEnabled", EmitDefaultValue = true)]
        public bool TypeMeasuresEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name = "dateFormat", EmitDefaultValue = false)]
        public string DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets VaryingAttributesEnabled
        /// </summary>
        [DataMember(Name = "varyingAttributesEnabled", EmitDefaultValue = true)]
        public bool VaryingAttributesEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TimeModified
        /// </summary>
        [DataMember(Name = "timeModified", EmitDefaultValue = false)]
        public long TimeModified { get; set; }

        /// <summary>
        /// Gets or Sets AutoConfigure
        /// </summary>
        [DataMember(Name = "autoConfigure", EmitDefaultValue = true)]
        public bool AutoConfigure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneralOutlineSettings {\n");
            sb.Append("  CaseSensitiveMembers: ").Append(CaseSensitiveMembers).Append("\n");
            sb.Append("  OutlineType: ").Append(OutlineType).Append("\n");
            sb.Append("  AllowDuplicateMemberNames: ").Append(AllowDuplicateMemberNames).Append("\n");
            sb.Append("  TypeMeasuresEnabled: ").Append(TypeMeasuresEnabled).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  VaryingAttributesEnabled: ").Append(VaryingAttributesEnabled).Append("\n");
            sb.Append("  TimeModified: ").Append(TimeModified).Append("\n");
            sb.Append("  AutoConfigure: ").Append(AutoConfigure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralOutlineSettings);
        }

        /// <summary>
        /// Returns true if GeneralOutlineSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralOutlineSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralOutlineSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CaseSensitiveMembers == input.CaseSensitiveMembers ||
                    this.CaseSensitiveMembers.Equals(input.CaseSensitiveMembers)
                ) && 
                (
                    this.OutlineType == input.OutlineType ||
                    (this.OutlineType != null &&
                    this.OutlineType.Equals(input.OutlineType))
                ) && 
                (
                    this.AllowDuplicateMemberNames == input.AllowDuplicateMemberNames ||
                    this.AllowDuplicateMemberNames.Equals(input.AllowDuplicateMemberNames)
                ) && 
                (
                    this.TypeMeasuresEnabled == input.TypeMeasuresEnabled ||
                    this.TypeMeasuresEnabled.Equals(input.TypeMeasuresEnabled)
                ) && 
                (
                    this.DateFormat == input.DateFormat ||
                    (this.DateFormat != null &&
                    this.DateFormat.Equals(input.DateFormat))
                ) && 
                (
                    this.VaryingAttributesEnabled == input.VaryingAttributesEnabled ||
                    this.VaryingAttributesEnabled.Equals(input.VaryingAttributesEnabled)
                ) && 
                (
                    this.TimeModified == input.TimeModified ||
                    this.TimeModified.Equals(input.TimeModified)
                ) && 
                (
                    this.AutoConfigure == input.AutoConfigure ||
                    this.AutoConfigure.Equals(input.AutoConfigure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CaseSensitiveMembers.GetHashCode();
                if (this.OutlineType != null)
                {
                    hashCode = (hashCode * 59) + this.OutlineType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowDuplicateMemberNames.GetHashCode();
                hashCode = (hashCode * 59) + this.TypeMeasuresEnabled.GetHashCode();
                if (this.DateFormat != null)
                {
                    hashCode = (hashCode * 59) + this.DateFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VaryingAttributesEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeModified.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoConfigure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
