/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// EsbToColMapInfo
    /// </summary>
    [DataContract(Name = "EsbToColMapInfo")]
    public partial class EsbToColMapInfo : IEquatable<EsbToColMapInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EsbToColMapInfo" /> class.
        /// </summary>
        /// <param name="essbaseName">essbaseName.</param>
        /// <param name="columnName">columnName.</param>
        public EsbToColMapInfo(string essbaseName = default(string), string columnName = default(string))
        {
            this.EssbaseName = essbaseName;
            this.ColumnName = columnName;
        }

        /// <summary>
        /// Gets or Sets EssbaseName
        /// </summary>
        [DataMember(Name = "essbaseName", EmitDefaultValue = false)]
        public string EssbaseName { get; set; }

        /// <summary>
        /// Gets or Sets ColumnName
        /// </summary>
        [DataMember(Name = "columnName", EmitDefaultValue = false)]
        public string ColumnName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EsbToColMapInfo {\n");
            sb.Append("  EssbaseName: ").Append(EssbaseName).Append("\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EsbToColMapInfo);
        }

        /// <summary>
        /// Returns true if EsbToColMapInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EsbToColMapInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EsbToColMapInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EssbaseName == input.EssbaseName ||
                    (this.EssbaseName != null &&
                    this.EssbaseName.Equals(input.EssbaseName))
                ) && 
                (
                    this.ColumnName == input.ColumnName ||
                    (this.ColumnName != null &&
                    this.ColumnName.Equals(input.ColumnName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EssbaseName != null)
                {
                    hashCode = (hashCode * 59) + this.EssbaseName.GetHashCode();
                }
                if (this.ColumnName != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
