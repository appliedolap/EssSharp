/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Datasource
    /// </summary>
    [DataContract(Name = "Datasource")]
    public partial class Datasource : IEquatable<Datasource>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum TEMPLATE for value: TEMPLATE
            /// </summary>
            [EnumMember(Value = "TEMPLATE")]
            TEMPLATE = 1,

            /// <summary>
            /// Enum EXCELFILE for value: EXCELFILE
            /// </summary>
            [EnumMember(Value = "EXCELFILE")]
            EXCELFILE = 2,

            /// <summary>
            /// Enum DB for value: DB
            /// </summary>
            [EnumMember(Value = "DB")]
            DB = 3,

            /// <summary>
            /// Enum DELIMITEDFILE for value: DELIMITEDFILE
            /// </summary>
            [EnumMember(Value = "DELIMITEDFILE")]
            DELIMITEDFILE = 4,

            /// <summary>
            /// Enum FIXEDWIDTHFILE for value: FIXEDWIDTHFILE
            /// </summary>
            [EnumMember(Value = "FIXEDWIDTHFILE")]
            FIXEDWIDTHFILE = 5,

            /// <summary>
            /// Enum BI for value: BI
            /// </summary>
            [EnumMember(Value = "BI")]
            BI = 6,

            /// <summary>
            /// Enum ESSBASE for value: ESSBASE
            /// </summary>
            [EnumMember(Value = "ESSBASE")]
            ESSBASE = 7,

            /// <summary>
            /// Enum JDBC for value: JDBC
            /// </summary>
            [EnumMember(Value = "JDBC")]
            JDBC = 8,

            /// <summary>
            /// Enum SPARK for value: SPARK
            /// </summary>
            [EnumMember(Value = "SPARK")]
            SPARK = 9,

            /// <summary>
            /// Enum MSSQL for value: MS_SQL
            /// </summary>
            [EnumMember(Value = "MS_SQL")]
            MSSQL = 10,

            /// <summary>
            /// Enum MYSQL for value: MYSQL
            /// </summary>
            [EnumMember(Value = "MYSQL")]
            MYSQL = 11,

            /// <summary>
            /// Enum DB2 for value: DB2
            /// </summary>
            [EnumMember(Value = "DB2")]
            DB2 = 12,

            /// <summary>
            /// Enum ORACLE for value: ORACLE
            /// </summary>
            [EnumMember(Value = "ORACLE")]
            ORACLE = 13,

            /// <summary>
            /// Enum FILE for value: FILE
            /// </summary>
            [EnumMember(Value = "FILE")]
            FILE = 14

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Datasource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Datasource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Datasource" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="connection">connection (required).</param>
        /// <param name="description">description.</param>
        /// <param name="columns">columns (required).</param>
        /// <param name="name">name.</param>
        /// <param name="ignoreErrorRecords">ignoreErrorRecords.</param>
        /// <param name="delimeter">delimeter.</param>
        /// <param name="customDelimiter">customDelimiter.</param>
        /// <param name="query">query.</param>
        /// <param name="application">application.</param>
        /// <param name="cube">cube.</param>
        /// <param name="startRow">startRow.</param>
        /// <param name="endRow">endRow.</param>
        /// <param name="headerRow">headerRow.</param>
        /// <param name="sheet">sheet.</param>
        /// <param name="skipHiddenRows">skipHiddenRows.</param>
        /// <param name="widths">widths.</param>
        /// <param name="queryParameters">queryParameters.</param>
        /// <param name="headers">headers.</param>
        /// <param name="links">links.</param>
        public Datasource(TypeEnum type = default(TypeEnum), string connection = default(string), string description = default(string), ColumnsType columns = default(ColumnsType), string name = default(string), bool ignoreErrorRecords = default(bool), string delimeter = default(string), string customDelimiter = default(string), string query = default(string), string application = default(string), string cube = default(string), long startRow = default(long), long endRow = default(long), long headerRow = default(long), string sheet = default(string), bool skipHiddenRows = default(bool), List<long> widths = default(List<long>), List<QueryParamsInfo> queryParameters = default(List<QueryParamsInfo>), List<HeaderType> headers = default(List<HeaderType>), List<Link> links = default(List<Link>))
        {
            this.Type = type;
            // to ensure "connection" is required (not null)
            if (connection == null)
            {
                throw new ArgumentNullException("connection is a required property for Datasource and cannot be null");
            }
            this.Connection = connection;
            // to ensure "columns" is required (not null)
            if (columns == null)
            {
                throw new ArgumentNullException("columns is a required property for Datasource and cannot be null");
            }
            this.Columns = columns;
            this.Description = description;
            this.Name = name;
            this.IgnoreErrorRecords = ignoreErrorRecords;
            this.Delimeter = delimeter;
            this.CustomDelimiter = customDelimiter;
            this.Query = query;
            this.Application = application;
            this.Cube = cube;
            this.StartRow = startRow;
            this.EndRow = endRow;
            this.HeaderRow = headerRow;
            this.Sheet = sheet;
            this.SkipHiddenRows = skipHiddenRows;
            this.Widths = widths;
            this.QueryParameters = queryParameters;
            this.Headers = headers;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Connection
        /// </summary>
        [DataMember(Name = "connection", IsRequired = true, EmitDefaultValue = true)]
        public string Connection { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", IsRequired = true, EmitDefaultValue = true)]
        public ColumnsType Columns { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreErrorRecords
        /// </summary>
        [DataMember(Name = "ignoreErrorRecords", EmitDefaultValue = true)]
        public bool IgnoreErrorRecords { get; set; }

        /// <summary>
        /// Gets or Sets Delimeter
        /// </summary>
        [DataMember(Name = "delimeter", EmitDefaultValue = false)]
        public string Delimeter { get; set; }

        /// <summary>
        /// Gets or Sets CustomDelimiter
        /// </summary>
        [DataMember(Name = "customDelimiter", EmitDefaultValue = false)]
        public string CustomDelimiter { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Cube
        /// </summary>
        [DataMember(Name = "cube", EmitDefaultValue = false)]
        public string Cube { get; set; }

        /// <summary>
        /// Gets or Sets StartRow
        /// </summary>
        [DataMember(Name = "startRow", EmitDefaultValue = false)]
        public long StartRow { get; set; }

        /// <summary>
        /// Gets or Sets EndRow
        /// </summary>
        [DataMember(Name = "endRow", EmitDefaultValue = false)]
        public long EndRow { get; set; }

        /// <summary>
        /// Gets or Sets HeaderRow
        /// </summary>
        [DataMember(Name = "headerRow", EmitDefaultValue = false)]
        public long HeaderRow { get; set; }

        /// <summary>
        /// Gets or Sets Sheet
        /// </summary>
        [DataMember(Name = "sheet", EmitDefaultValue = false)]
        public string Sheet { get; set; }

        /// <summary>
        /// Gets or Sets SkipHiddenRows
        /// </summary>
        [DataMember(Name = "skipHiddenRows", EmitDefaultValue = true)]
        public bool SkipHiddenRows { get; set; }

        /// <summary>
        /// Gets or Sets Widths
        /// </summary>
        [DataMember(Name = "widths", EmitDefaultValue = false)]
        public List<long> Widths { get; set; }

        /// <summary>
        /// Gets or Sets QueryParameters
        /// </summary>
        [DataMember(Name = "queryParameters", EmitDefaultValue = false)]
        public List<QueryParamsInfo> QueryParameters { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public List<HeaderType> Headers { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Datasource {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IgnoreErrorRecords: ").Append(IgnoreErrorRecords).Append("\n");
            sb.Append("  Delimeter: ").Append(Delimeter).Append("\n");
            sb.Append("  CustomDelimiter: ").Append(CustomDelimiter).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Cube: ").Append(Cube).Append("\n");
            sb.Append("  StartRow: ").Append(StartRow).Append("\n");
            sb.Append("  EndRow: ").Append(EndRow).Append("\n");
            sb.Append("  HeaderRow: ").Append(HeaderRow).Append("\n");
            sb.Append("  Sheet: ").Append(Sheet).Append("\n");
            sb.Append("  SkipHiddenRows: ").Append(SkipHiddenRows).Append("\n");
            sb.Append("  Widths: ").Append(Widths).Append("\n");
            sb.Append("  QueryParameters: ").Append(QueryParameters).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Datasource);
        }

        /// <summary>
        /// Returns true if Datasource instances are equal
        /// </summary>
        /// <param name="input">Instance of Datasource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Datasource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Connection == input.Connection ||
                    (this.Connection != null &&
                    this.Connection.Equals(input.Connection))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Columns == input.Columns ||
                    (this.Columns != null &&
                    this.Columns.Equals(input.Columns))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IgnoreErrorRecords == input.IgnoreErrorRecords ||
                    this.IgnoreErrorRecords.Equals(input.IgnoreErrorRecords)
                ) && 
                (
                    this.Delimeter == input.Delimeter ||
                    (this.Delimeter != null &&
                    this.Delimeter.Equals(input.Delimeter))
                ) && 
                (
                    this.CustomDelimiter == input.CustomDelimiter ||
                    (this.CustomDelimiter != null &&
                    this.CustomDelimiter.Equals(input.CustomDelimiter))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Cube == input.Cube ||
                    (this.Cube != null &&
                    this.Cube.Equals(input.Cube))
                ) && 
                (
                    this.StartRow == input.StartRow ||
                    this.StartRow.Equals(input.StartRow)
                ) && 
                (
                    this.EndRow == input.EndRow ||
                    this.EndRow.Equals(input.EndRow)
                ) && 
                (
                    this.HeaderRow == input.HeaderRow ||
                    this.HeaderRow.Equals(input.HeaderRow)
                ) && 
                (
                    this.Sheet == input.Sheet ||
                    (this.Sheet != null &&
                    this.Sheet.Equals(input.Sheet))
                ) && 
                (
                    this.SkipHiddenRows == input.SkipHiddenRows ||
                    this.SkipHiddenRows.Equals(input.SkipHiddenRows)
                ) && 
                (
                    this.Widths == input.Widths ||
                    this.Widths != null &&
                    input.Widths != null &&
                    this.Widths.SequenceEqual(input.Widths)
                ) && 
                (
                    this.QueryParameters == input.QueryParameters ||
                    this.QueryParameters != null &&
                    input.QueryParameters != null &&
                    this.QueryParameters.SequenceEqual(input.QueryParameters)
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Connection != null)
                {
                    hashCode = (hashCode * 59) + this.Connection.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreErrorRecords.GetHashCode();
                if (this.Delimeter != null)
                {
                    hashCode = (hashCode * 59) + this.Delimeter.GetHashCode();
                }
                if (this.CustomDelimiter != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDelimiter.GetHashCode();
                }
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Cube != null)
                {
                    hashCode = (hashCode * 59) + this.Cube.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartRow.GetHashCode();
                hashCode = (hashCode * 59) + this.EndRow.GetHashCode();
                hashCode = (hashCode * 59) + this.HeaderRow.GetHashCode();
                if (this.Sheet != null)
                {
                    hashCode = (hashCode * 59) + this.Sheet.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkipHiddenRows.GetHashCode();
                if (this.Widths != null)
                {
                    hashCode = (hashCode * 59) + this.Widths.GetHashCode();
                }
                if (this.QueryParameters != null)
                {
                    hashCode = (hashCode * 59) + this.QueryParameters.GetHashCode();
                }
                if (this.Headers != null)
                {
                    hashCode = (hashCode * 59) + this.Headers.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
