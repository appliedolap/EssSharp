/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ApplicationStatistics
    /// </summary>
    [DataContract(Name = "ApplicationStatistics")]
    public partial class ApplicationStatistics : IEquatable<ApplicationStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationStatistics" /> class.
        /// </summary>
        /// <param name="applicationStartTime">applicationStartTime.</param>
        /// <param name="applicationElapsedTime">applicationElapsedTime.</param>
        /// <param name="numberOfConnections">numberOfConnections.</param>
        /// <param name="loadStatus">loadStatus.</param>
        public ApplicationStatistics(long applicationStartTime = default(long), string applicationElapsedTime = default(string), int numberOfConnections = default(int), string loadStatus = default(string))
        {
            this.ApplicationStartTime = applicationStartTime;
            this.ApplicationElapsedTime = applicationElapsedTime;
            this.NumberOfConnections = numberOfConnections;
            this.LoadStatus = loadStatus;
        }

        /// <summary>
        /// Gets or Sets ApplicationStartTime
        /// </summary>
        [DataMember(Name = "applicationStartTime", EmitDefaultValue = false)]
        public long ApplicationStartTime { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationElapsedTime
        /// </summary>
        [DataMember(Name = "applicationElapsedTime", EmitDefaultValue = false)]
        public string ApplicationElapsedTime { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfConnections
        /// </summary>
        [DataMember(Name = "numberOfConnections", EmitDefaultValue = false)]
        public int NumberOfConnections { get; set; }

        /// <summary>
        /// Gets or Sets LoadStatus
        /// </summary>
        [DataMember(Name = "loadStatus", EmitDefaultValue = false)]
        public string LoadStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationStatistics {\n");
            sb.Append("  ApplicationStartTime: ").Append(ApplicationStartTime).Append("\n");
            sb.Append("  ApplicationElapsedTime: ").Append(ApplicationElapsedTime).Append("\n");
            sb.Append("  NumberOfConnections: ").Append(NumberOfConnections).Append("\n");
            sb.Append("  LoadStatus: ").Append(LoadStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationStatistics);
        }

        /// <summary>
        /// Returns true if ApplicationStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationStatistics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationStartTime == input.ApplicationStartTime ||
                    this.ApplicationStartTime.Equals(input.ApplicationStartTime)
                ) && 
                (
                    this.ApplicationElapsedTime == input.ApplicationElapsedTime ||
                    (this.ApplicationElapsedTime != null &&
                    this.ApplicationElapsedTime.Equals(input.ApplicationElapsedTime))
                ) && 
                (
                    this.NumberOfConnections == input.NumberOfConnections ||
                    this.NumberOfConnections.Equals(input.NumberOfConnections)
                ) && 
                (
                    this.LoadStatus == input.LoadStatus ||
                    (this.LoadStatus != null &&
                    this.LoadStatus.Equals(input.LoadStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ApplicationStartTime.GetHashCode();
                if (this.ApplicationElapsedTime != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationElapsedTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfConnections.GetHashCode();
                if (this.LoadStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LoadStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
