/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// MeasureOptions
    /// </summary>
    [DataContract(Name = "MeasureOptions")]
    public partial class MeasureOptions : IEquatable<MeasureOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines CurrencyConversion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyConversionEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 2,

            /// <summary>
            /// Enum CATEGORY for value: CATEGORY
            /// </summary>
            [EnumMember(Value = "CATEGORY")]
            CATEGORY = 3,

            /// <summary>
            /// Enum NOCONVERSION for value: NO_CONVERSION
            /// </summary>
            [EnumMember(Value = "NO_CONVERSION")]
            NOCONVERSION = 4

        }


        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name = "currencyConversion", EmitDefaultValue = false)]
        public CurrencyConversionEnum? CurrencyConversion { get; set; }
        /// <summary>
        /// Defines Skip
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SkipEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum NA for value: NA
            /// </summary>
            [EnumMember(Value = "NA")]
            NA = 2,

            /// <summary>
            /// Enum MISSING for value: MISSING
            /// </summary>
            [EnumMember(Value = "MISSING")]
            MISSING = 3,

            /// <summary>
            /// Enum ZERO for value: ZERO
            /// </summary>
            [EnumMember(Value = "ZERO")]
            ZERO = 4,

            /// <summary>
            /// Enum MISSINGZERO for value: MISSING_ZERO
            /// </summary>
            [EnumMember(Value = "MISSING_ZERO")]
            MISSINGZERO = 5

        }


        /// <summary>
        /// Gets or Sets Skip
        /// </summary>
        [DataMember(Name = "skip", EmitDefaultValue = false)]
        public SkipEnum? Skip { get; set; }
        /// <summary>
        /// Defines TimeBalanceOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeBalanceOptionEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 2,

            /// <summary>
            /// Enum FIRST for value: FIRST
            /// </summary>
            [EnumMember(Value = "FIRST")]
            FIRST = 3,

            /// <summary>
            /// Enum LAST for value: LAST
            /// </summary>
            [EnumMember(Value = "LAST")]
            LAST = 4,

            /// <summary>
            /// Enum AVERAGE for value: AVERAGE
            /// </summary>
            [EnumMember(Value = "AVERAGE")]
            AVERAGE = 5

        }


        /// <summary>
        /// Gets or Sets TimeBalanceOption
        /// </summary>
        [DataMember(Name = "timeBalanceOption", EmitDefaultValue = false)]
        public TimeBalanceOptionEnum? TimeBalanceOption { get; set; }
        /// <summary>
        /// Defines VarianceReporting
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VarianceReportingEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum NONEXPENSE for value: NON_EXPENSE
            /// </summary>
            [EnumMember(Value = "NON_EXPENSE")]
            NONEXPENSE = 2,

            /// <summary>
            /// Enum EXPENSE for value: EXPENSE
            /// </summary>
            [EnumMember(Value = "EXPENSE")]
            EXPENSE = 3

        }


        /// <summary>
        /// Gets or Sets VarianceReporting
        /// </summary>
        [DataMember(Name = "varianceReporting", EmitDefaultValue = false)]
        public VarianceReportingEnum? VarianceReporting { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasureOptions" /> class.
        /// </summary>
        /// <param name="currencyCategory">currencyCategory.</param>
        /// <param name="currencyName">currencyName.</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="skip">skip.</param>
        /// <param name="timeBalanceOption">timeBalanceOption.</param>
        /// <param name="varianceReporting">varianceReporting.</param>
        /// <param name="twoPass">twoPass.</param>
        public MeasureOptions(string currencyCategory = default(string), string currencyName = default(string), CurrencyConversionEnum? currencyConversion = default(CurrencyConversionEnum?), SkipEnum? skip = default(SkipEnum?), TimeBalanceOptionEnum? timeBalanceOption = default(TimeBalanceOptionEnum?), VarianceReportingEnum? varianceReporting = default(VarianceReportingEnum?), bool twoPass = default(bool))
        {
            this.CurrencyCategory = currencyCategory;
            this.CurrencyName = currencyName;
            this.CurrencyConversion = currencyConversion;
            this.Skip = skip;
            this.TimeBalanceOption = timeBalanceOption;
            this.VarianceReporting = varianceReporting;
            this.TwoPass = twoPass;
        }

        /// <summary>
        /// Gets or Sets CurrencyCategory
        /// </summary>
        [DataMember(Name = "currencyCategory", EmitDefaultValue = false)]
        public string CurrencyCategory { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        [DataMember(Name = "currencyName", EmitDefaultValue = false)]
        public string CurrencyName { get; set; }

        /// <summary>
        /// Gets or Sets TwoPass
        /// </summary>
        [DataMember(Name = "twoPass", EmitDefaultValue = true)]
        public bool TwoPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MeasureOptions {\n");
            sb.Append("  CurrencyCategory: ").Append(CurrencyCategory).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  TimeBalanceOption: ").Append(TimeBalanceOption).Append("\n");
            sb.Append("  VarianceReporting: ").Append(VarianceReporting).Append("\n");
            sb.Append("  TwoPass: ").Append(TwoPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeasureOptions);
        }

        /// <summary>
        /// Returns true if MeasureOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of MeasureOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeasureOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencyCategory == input.CurrencyCategory ||
                    (this.CurrencyCategory != null &&
                    this.CurrencyCategory.Equals(input.CurrencyCategory))
                ) && 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    this.CurrencyConversion.Equals(input.CurrencyConversion)
                ) && 
                (
                    this.Skip == input.Skip ||
                    this.Skip.Equals(input.Skip)
                ) && 
                (
                    this.TimeBalanceOption == input.TimeBalanceOption ||
                    this.TimeBalanceOption.Equals(input.TimeBalanceOption)
                ) && 
                (
                    this.VarianceReporting == input.VarianceReporting ||
                    this.VarianceReporting.Equals(input.VarianceReporting)
                ) && 
                (
                    this.TwoPass == input.TwoPass ||
                    this.TwoPass.Equals(input.TwoPass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCategory != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCategory.GetHashCode();
                }
                if (this.CurrencyName != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyConversion.GetHashCode();
                hashCode = (hashCode * 59) + this.Skip.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeBalanceOption.GetHashCode();
                hashCode = (hashCode * 59) + this.VarianceReporting.GetHashCode();
                hashCode = (hashCode * 59) + this.TwoPass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
