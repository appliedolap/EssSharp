/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// GridOperation
    /// </summary>
    [DataContract(Name = "GridOperation")]
    public partial class GridOperation : IEquatable<GridOperation>, IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Zoomin for value: zoomin
            /// </summary>
            [EnumMember(Value = "zoomin")]
            Zoomin = 1,

            /// <summary>
            /// Enum Zoomout for value: zoomout
            /// </summary>
            [EnumMember(Value = "zoomout")]
            Zoomout = 2,

            /// <summary>
            /// Enum Keeponly for value: keeponly
            /// </summary>
            [EnumMember(Value = "keeponly")]
            Keeponly = 3,

            /// <summary>
            /// Enum Removeonly for value: removeonly
            /// </summary>
            [EnumMember(Value = "removeonly")]
            Removeonly = 4,

            /// <summary>
            /// Enum Refresh for value: refresh
            /// </summary>
            [EnumMember(Value = "refresh")]
            Refresh = 5,

            /// <summary>
            /// Enum Pivot for value: pivot
            /// </summary>
            [EnumMember(Value = "pivot")]
            Pivot = 6,

            /// <summary>
            /// Enum PivotToPOV for value: pivotToPOV
            /// </summary>
            [EnumMember(Value = "pivotToPOV")]
            PivotToPOV = 7,

            /// <summary>
            /// Enum Submit for value: submit
            /// </summary>
            [EnumMember(Value = "submit")]
            Submit = 8

        }


        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GridOperation" /> class.
        /// </summary>
        /// <param name="grid">grid.</param>
        /// <param name="action">action.</param>
        /// <param name="alias">alias.</param>
        /// <param name="coordinates">coordinates.</param>
        /// <param name="ranges">ranges.</param>
        public GridOperation(Grid grid = default(Grid), ActionEnum? action = default(ActionEnum?), string alias = default(string), List<int> coordinates = default(List<int>), List<List<int>> ranges = default(List<List<int>>))
        {
            this.Grid = grid;
            this.Action = action;
            this.Alias = alias;
            this.Coordinates = coordinates;
            this.Ranges = ranges;
        }

        /// <summary>
        /// Gets or Sets Grid
        /// </summary>
        [DataMember(Name = "grid", EmitDefaultValue = false)]
        public Grid Grid { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [DataMember(Name = "coordinates", EmitDefaultValue = false)]
        public List<int> Coordinates { get; set; }

        /// <summary>
        /// Gets or Sets Ranges
        /// </summary>
        [DataMember(Name = "ranges", EmitDefaultValue = false)]
        public List<List<int>> Ranges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GridOperation {\n");
            sb.Append("  Grid: ").Append(Grid).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  Ranges: ").Append(Ranges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GridOperation);
        }

        /// <summary>
        /// Returns true if GridOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of GridOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GridOperation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Grid == input.Grid ||
                    (this.Grid != null &&
                    this.Grid.Equals(input.Grid))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    this.Coordinates != null &&
                    input.Coordinates != null &&
                    this.Coordinates.SequenceEqual(input.Coordinates)
                ) && 
                (
                    this.Ranges == input.Ranges ||
                    this.Ranges != null &&
                    input.Ranges != null &&
                    this.Ranges.SequenceEqual(input.Ranges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Grid != null)
                {
                    hashCode = (hashCode * 59) + this.Grid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.Alias != null)
                {
                    hashCode = (hashCode * 59) + this.Alias.GetHashCode();
                }
                if (this.Coordinates != null)
                {
                    hashCode = (hashCode * 59) + this.Coordinates.GetHashCode();
                }
                if (this.Ranges != null)
                {
                    hashCode = (hashCode * 59) + this.Ranges.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
