/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// JobRecordBean
    /// </summary>
    [DataContract(Name = "JobRecordBean")]
    public partial class JobRecordBean : IEquatable<JobRecordBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobRecordBean" /> class.
        /// </summary>
        /// <param name="jobID">jobID.</param>
        /// <param name="appName">appName.</param>
        /// <param name="dbName">dbName.</param>
        /// <param name="jobType">jobType.</param>
        /// <param name="jobfileName">jobfileName.</param>
        /// <param name="userName">userName.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="statusCode">statusCode.</param>
        /// <param name="statusMessage">statusMessage.</param>
        /// <param name="jobInputInfo">jobInputInfo.</param>
        /// <param name="jobOutputInfo">jobOutputInfo.</param>
        /// <param name="links">links.</param>
        public JobRecordBean(long jobID = default(long), string appName = default(string), string dbName = default(string), string jobType = default(string), string jobfileName = default(string), string userName = default(string), long startTime = default(long), long endTime = default(long), int statusCode = default(int), string statusMessage = default(string), Dictionary<string, Object> jobInputInfo = default(Dictionary<string, Object>), Dictionary<string, Object> jobOutputInfo = default(Dictionary<string, Object>), List<Link> links = default(List<Link>))
        {
            this.JobID = jobID;
            this.AppName = appName;
            this.DbName = dbName;
            this.JobType = jobType;
            this.JobfileName = jobfileName;
            this.UserName = userName;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.StatusCode = statusCode;
            this.StatusMessage = statusMessage;
            this.JobInputInfo = jobInputInfo;
            this.JobOutputInfo = jobOutputInfo;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets JobID
        /// </summary>
        [DataMember(Name = "job_ID", EmitDefaultValue = false)]
        public long JobID { get; set; }

        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [DataMember(Name = "appName", EmitDefaultValue = false)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name = "dbName", EmitDefaultValue = false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets JobType
        /// </summary>
        [DataMember(Name = "jobType", EmitDefaultValue = false)]
        public string JobType { get; set; }

        /// <summary>
        /// Gets or Sets JobfileName
        /// </summary>
        [DataMember(Name = "jobfileName", EmitDefaultValue = false)]
        public string JobfileName { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public long StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public long EndTime { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "statusCode", EmitDefaultValue = false)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets StatusMessage
        /// </summary>
        [DataMember(Name = "statusMessage", EmitDefaultValue = false)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// Gets or Sets JobInputInfo
        /// </summary>
        [DataMember(Name = "jobInputInfo", EmitDefaultValue = false)]
        public Dictionary<string, Object> JobInputInfo { get; set; }

        /// <summary>
        /// Gets or Sets JobOutputInfo
        /// </summary>
        [DataMember(Name = "jobOutputInfo", EmitDefaultValue = false)]
        public Dictionary<string, Object> JobOutputInfo { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobRecordBean {\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("  JobfileName: ").Append(JobfileName).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  JobInputInfo: ").Append(JobInputInfo).Append("\n");
            sb.Append("  JobOutputInfo: ").Append(JobOutputInfo).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobRecordBean);
        }

        /// <summary>
        /// Returns true if JobRecordBean instances are equal
        /// </summary>
        /// <param name="input">Instance of JobRecordBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobRecordBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobID == input.JobID ||
                    this.JobID.Equals(input.JobID)
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.JobType == input.JobType ||
                    (this.JobType != null &&
                    this.JobType.Equals(input.JobType))
                ) && 
                (
                    this.JobfileName == input.JobfileName ||
                    (this.JobfileName != null &&
                    this.JobfileName.Equals(input.JobfileName))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    this.StartTime.Equals(input.StartTime)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.StatusMessage == input.StatusMessage ||
                    (this.StatusMessage != null &&
                    this.StatusMessage.Equals(input.StatusMessage))
                ) && 
                (
                    this.JobInputInfo == input.JobInputInfo ||
                    this.JobInputInfo != null &&
                    input.JobInputInfo != null &&
                    this.JobInputInfo.SequenceEqual(input.JobInputInfo)
                ) && 
                (
                    this.JobOutputInfo == input.JobOutputInfo ||
                    this.JobOutputInfo != null &&
                    input.JobOutputInfo != null &&
                    this.JobOutputInfo.SequenceEqual(input.JobOutputInfo)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.JobID.GetHashCode();
                if (this.AppName != null)
                {
                    hashCode = (hashCode * 59) + this.AppName.GetHashCode();
                }
                if (this.DbName != null)
                {
                    hashCode = (hashCode * 59) + this.DbName.GetHashCode();
                }
                if (this.JobType != null)
                {
                    hashCode = (hashCode * 59) + this.JobType.GetHashCode();
                }
                if (this.JobfileName != null)
                {
                    hashCode = (hashCode * 59) + this.JobfileName.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                if (this.StatusMessage != null)
                {
                    hashCode = (hashCode * 59) + this.StatusMessage.GetHashCode();
                }
                if (this.JobInputInfo != null)
                {
                    hashCode = (hashCode * 59) + this.JobInputInfo.GetHashCode();
                }
                if (this.JobOutputInfo != null)
                {
                    hashCode = (hashCode * 59) + this.JobOutputInfo.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
