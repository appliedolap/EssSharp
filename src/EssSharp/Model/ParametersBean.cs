/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ParametersBean
    /// </summary>
    [DataContract(Name = "ParametersBean")]
    public partial class ParametersBean : IEquatable<ParametersBean>, IValidatableObject
    {
        /// <summary>
        /// Defines BuildMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BuildMethodEnum
        {
            /// <summary>
            /// Enum PARENTCHILD for value: PARENT-CHILD
            /// </summary>
            [EnumMember(Value = "PARENT-CHILD")]
            PARENTCHILD = 1,

            /// <summary>
            /// Enum GENERATION for value: GENERATION
            /// </summary>
            [EnumMember(Value = "GENERATION")]
            GENERATION = 2

        }


        /// <summary>
        /// Gets or Sets BuildMethod
        /// </summary>
        [DataMember(Name = "buildMethod", EmitDefaultValue = false)]
        public BuildMethodEnum? BuildMethod { get; set; }
        /// <summary>
        /// Defines BuildOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BuildOptionEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum RETAINALLDATA for value: RETAIN_ALL_DATA
            /// </summary>
            [EnumMember(Value = "RETAIN_ALL_DATA")]
            RETAINALLDATA = 2,

            /// <summary>
            /// Enum RETAININPUTDATA for value: RETAIN_INPUT_DATA
            /// </summary>
            [EnumMember(Value = "RETAIN_INPUT_DATA")]
            RETAININPUTDATA = 3,

            /// <summary>
            /// Enum RETAINLEAFDATA for value: RETAIN_LEAF_DATA
            /// </summary>
            [EnumMember(Value = "RETAIN_LEAF_DATA")]
            RETAINLEAFDATA = 4,

            /// <summary>
            /// Enum REMOVEALLDATA for value: REMOVE_ALL_DATA
            /// </summary>
            [EnumMember(Value = "REMOVE_ALL_DATA")]
            REMOVEALLDATA = 5

        }


        /// <summary>
        /// Gets or Sets BuildOption
        /// </summary>
        [DataMember(Name = "buildOption", EmitDefaultValue = false)]
        public BuildOptionEnum? BuildOption { get; set; }
        /// <summary>
        /// Defines DataLevel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataLevelEnum
        {
            /// <summary>
            /// Enum ALLDATA for value: ALL_DATA
            /// </summary>
            [EnumMember(Value = "ALL_DATA")]
            ALLDATA = 1,

            /// <summary>
            /// Enum UPPERLEVELBLOCKS for value: UPPER_LEVEL_BLOCKS
            /// </summary>
            [EnumMember(Value = "UPPER_LEVEL_BLOCKS")]
            UPPERLEVELBLOCKS = 2,

            /// <summary>
            /// Enum NONINPUTBLOCKS for value: NON_INPUT_BLOCKS
            /// </summary>
            [EnumMember(Value = "NON_INPUT_BLOCKS")]
            NONINPUTBLOCKS = 3,

            /// <summary>
            /// Enum LEVELZEROBLOCKS for value: LEVEL_ZERO_BLOCKS
            /// </summary>
            [EnumMember(Value = "LEVEL_ZERO_BLOCKS")]
            LEVELZEROBLOCKS = 4,

            /// <summary>
            /// Enum INPUTLEVELDATABLOCKS for value: INPUT_LEVEL_DATA_BLOCKS
            /// </summary>
            [EnumMember(Value = "INPUT_LEVEL_DATA_BLOCKS")]
            INPUTLEVELDATABLOCKS = 5

        }


        /// <summary>
        /// Gets or Sets DataLevel
        /// </summary>
        [DataMember(Name = "dataLevel", EmitDefaultValue = false)]
        public DataLevelEnum? DataLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersBean" /> class.
        /// </summary>
        /// <param name="rule">rule.</param>
        /// <param name="file">file.</param>
        /// <param name="abortOnError">abortOnError.</param>
        /// <param name="restructureOption">restructureOption.</param>
        /// <param name="forceDimBuild">forceDimBuild.</param>
        /// <param name="script">script.</param>
        /// <param name="option">option.</param>
        /// <param name="loaddata">loaddata.</param>
        /// <param name="useConnection">useConnection.</param>
        /// <param name="connection">connection.</param>
        /// <param name="user">user.</param>
        /// <param name="password">password.</param>
        /// <param name="calc">calc.</param>
        /// <param name="buildMethod">buildMethod.</param>
        /// <param name="data">data.</param>
        /// <param name="memberIds">memberIds.</param>
        /// <param name="zipFileName">zipFileName.</param>
        /// <param name="skipdata">skipdata.</param>
        /// <param name="threads">threads.</param>
        /// <param name="overwrite">overwrite.</param>
        /// <param name="lcmImportFromStorage">lcmImportFromStorage.</param>
        /// <param name="analyzeFileName">analyzeFileName.</param>
        /// <param name="analyzeSheetName">analyzeSheetName.</param>
        /// <param name="deleteExcelOnSuccess">deleteExcelOnSuccess.</param>
        /// <param name="catalogExcelPath">catalogExcelPath.</param>
        /// <param name="importExcelFileName">importExcelFileName.</param>
        /// <param name="recreateApplication">recreateApplication.</param>
        /// <param name="createFiles">createFiles.</param>
        /// <param name="executeScript">executeScript.</param>
        /// <param name="buildOption">buildOption.</param>
        /// <param name="copyToStorage">copyToStorage.</param>
        /// <param name="filesystemcopy">filesystemcopy.</param>
        /// <param name="dataLevel">dataLevel.</param>
        /// <param name="columnFormat">columnFormat.</param>
        /// <param name="targetApplicationName">targetApplicationName.</param>
        /// <param name="partialDataExpression">partialDataExpression.</param>
        /// <param name="allApp">allApp.</param>
        /// <param name="includeServerLevel">includeServerLevel.</param>
        /// <param name="enableSandboxing">enableSandboxing.</param>
        /// <param name="dbType">dbType.</param>
        /// <param name="dimDesignationMode">dimDesignationMode.</param>
        /// <param name="unstructuredAnalysis">unstructuredAnalysis.</param>
        /// <param name="ratioToStop">ratioToStop.</param>
        /// <param name="basedOnQueryData">basedOnQueryData.</param>
        /// <param name="enableAlternateRollups">enableAlternateRollups.</param>
        /// <param name="compress">compress.</param>
        /// <param name="generateArtifactList">generateArtifactList.</param>
        /// <param name="artifactList">artifactList.</param>
        /// <param name="verbose">verbose.</param>
        /// <param name="disasterRecovery">disasterRecovery.</param>
        /// <param name="force">force.</param>
        /// <param name="backupType">backupType.</param>
        /// <param name="appId">appId.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="maxParallel">maxParallel.</param>
        /// <param name="selectedDimensions">selectedDimensions.</param>
        /// <param name="rtsv">rtsv.</param>
        /// <param name="bufferId">bufferId.</param>
        /// <param name="bufferIds">bufferIds.</param>
        /// <param name="commitOption">commitOption.</param>
        /// <param name="actionType">actionType.</param>
        /// <param name="termOption">termOption.</param>
        /// <param name="discoverDimensionTables">discoverDimensionTables.</param>
        /// <param name="exportDynamicBlocks">exportDynamicBlocks.</param>
        /// <param name="shadowAppName">shadowAppName.</param>
        /// <param name="primaryAppName">primaryAppName.</param>
        /// <param name="timeoutToForceUnloadApp">timeoutToForceUnloadApp.</param>
        /// <param name="hideShadow">hideShadow.</param>
        /// <param name="waitForOngoingUpdatesInSecs">waitForOngoingUpdatesInSecs.</param>
        /// <param name="reportScriptFilename">reportScriptFilename.</param>
        /// <param name="lockForUpdate">lockForUpdate.</param>
        /// <param name="isScriptContent">isScriptContent.</param>
        /// <param name="useCatalogPath">useCatalogPath.</param>
        /// <param name="exportdata">exportdata.</param>
        /// <param name="cube">cube.</param>
        /// <param name="filetype">filetype.</param>
        /// <param name="exportpartitions">exportpartitions.</param>
        /// <param name="exportfilters">exportfilters.</param>
        /// <param name="physical">physical.</param>
        public ParametersBean(string rule = default(string), string file = default(string), string abortOnError = default(string), string restructureOption = default(string), string forceDimBuild = default(string), string script = default(string), string option = default(string), string loaddata = default(string), string useConnection = default(string), string connection = default(string), string user = default(string), string password = default(string), string calc = default(string), BuildMethodEnum? buildMethod = default(BuildMethodEnum?), string data = default(string), string memberIds = default(string), string zipFileName = default(string), string skipdata = default(string), string threads = default(string), string overwrite = default(string), string lcmImportFromStorage = default(string), string analyzeFileName = default(string), string analyzeSheetName = default(string), string deleteExcelOnSuccess = default(string), string catalogExcelPath = default(string), string importExcelFileName = default(string), string recreateApplication = default(string), string createFiles = default(string), string executeScript = default(string), BuildOptionEnum? buildOption = default(BuildOptionEnum?), string copyToStorage = default(string), string filesystemcopy = default(string), DataLevelEnum? dataLevel = default(DataLevelEnum?), string columnFormat = default(string), string targetApplicationName = default(string), string partialDataExpression = default(string), string allApp = default(string), string includeServerLevel = default(string), string enableSandboxing = default(string), string dbType = default(string), string dimDesignationMode = default(string), CompactDesignation unstructuredAnalysis = default(CompactDesignation), string ratioToStop = default(string), string basedOnQueryData = default(string), string enableAlternateRollups = default(string), string compress = default(string), string generateArtifactList = default(string), string artifactList = default(string), string verbose = default(string), string disasterRecovery = default(string), string force = default(string), string backupType = default(string), string appId = default(string), string timestamp = default(string), string maxParallel = default(string), List<string> selectedDimensions = default(List<string>), List<RTSV> rtsv = default(List<RTSV>), int bufferId = default(int), List<int> bufferIds = default(List<int>), string commitOption = default(string), string actionType = default(string), string termOption = default(string), string discoverDimensionTables = default(string), string exportDynamicBlocks = default(string), string shadowAppName = default(string), string primaryAppName = default(string), string timeoutToForceUnloadApp = default(string), string hideShadow = default(string), string waitForOngoingUpdatesInSecs = default(string), string reportScriptFilename = default(string), bool lockForUpdate = default(bool), bool isScriptContent = default(bool), bool useCatalogPath = default(bool), bool exportdata = default(bool), string cube = default(string), string filetype = default(string), bool exportpartitions = default(bool), bool exportfilters = default(bool), bool physical = default(bool))
        {
            this.Rule = rule;
            this.File = file;
            this.AbortOnError = abortOnError;
            this.RestructureOption = restructureOption;
            this.ForceDimBuild = forceDimBuild;
            this.Script = script;
            this.Option = option;
            this.Loaddata = loaddata;
            this.UseConnection = useConnection;
            this.Connection = connection;
            this.User = user;
            this.Password = password;
            this.Calc = calc;
            this.BuildMethod = buildMethod;
            this.Data = data;
            this.MemberIds = memberIds;
            this.ZipFileName = zipFileName;
            this.Skipdata = skipdata;
            this.Threads = threads;
            this.Overwrite = overwrite;
            this.LcmImportFromStorage = lcmImportFromStorage;
            this.AnalyzeFileName = analyzeFileName;
            this.AnalyzeSheetName = analyzeSheetName;
            this.DeleteExcelOnSuccess = deleteExcelOnSuccess;
            this.CatalogExcelPath = catalogExcelPath;
            this.ImportExcelFileName = importExcelFileName;
            this.RecreateApplication = recreateApplication;
            this.CreateFiles = createFiles;
            this.ExecuteScript = executeScript;
            this.BuildOption = buildOption;
            this.CopyToStorage = copyToStorage;
            this.Filesystemcopy = filesystemcopy;
            this.DataLevel = dataLevel;
            this.ColumnFormat = columnFormat;
            this.TargetApplicationName = targetApplicationName;
            this.PartialDataExpression = partialDataExpression;
            this.AllApp = allApp;
            this.IncludeServerLevel = includeServerLevel;
            this.EnableSandboxing = enableSandboxing;
            this.DbType = dbType;
            this.DimDesignationMode = dimDesignationMode;
            this.UnstructuredAnalysis = unstructuredAnalysis;
            this.RatioToStop = ratioToStop;
            this.BasedOnQueryData = basedOnQueryData;
            this.EnableAlternateRollups = enableAlternateRollups;
            this.Compress = compress;
            this.GenerateArtifactList = generateArtifactList;
            this.ArtifactList = artifactList;
            this.Verbose = verbose;
            this.DisasterRecovery = disasterRecovery;
            this.Force = force;
            this.BackupType = backupType;
            this.AppId = appId;
            this.Timestamp = timestamp;
            this.MaxParallel = maxParallel;
            this.SelectedDimensions = selectedDimensions;
            this.Rtsv = rtsv;
            this.BufferId = bufferId;
            this.BufferIds = bufferIds;
            this.CommitOption = commitOption;
            this.ActionType = actionType;
            this.TermOption = termOption;
            this.DiscoverDimensionTables = discoverDimensionTables;
            this.ExportDynamicBlocks = exportDynamicBlocks;
            this.ShadowAppName = shadowAppName;
            this.PrimaryAppName = primaryAppName;
            this.TimeoutToForceUnloadApp = timeoutToForceUnloadApp;
            this.HideShadow = hideShadow;
            this.WaitForOngoingUpdatesInSecs = waitForOngoingUpdatesInSecs;
            this.ReportScriptFilename = reportScriptFilename;
            this.LockForUpdate = lockForUpdate;
            this.IsScriptContent = isScriptContent;
            this.UseCatalogPath = useCatalogPath;
            this.Exportdata = exportdata;
            this.Cube = cube;
            this.Filetype = filetype;
            this.Exportpartitions = exportpartitions;
            this.Exportfilters = exportfilters;
            this.Physical = physical;
        }

        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [DataMember(Name = "rule", EmitDefaultValue = false)]
        public string Rule { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public string File { get; set; }

        /// <summary>
        /// Gets or Sets AbortOnError
        /// </summary>
        [DataMember(Name = "abortOnError", EmitDefaultValue = false)]
        public string AbortOnError { get; set; }

        /// <summary>
        /// Gets or Sets RestructureOption
        /// </summary>
        [DataMember(Name = "restructureOption", EmitDefaultValue = false)]
        public string RestructureOption { get; set; }

        /// <summary>
        /// Gets or Sets ForceDimBuild
        /// </summary>
        [DataMember(Name = "forceDimBuild", EmitDefaultValue = false)]
        public string ForceDimBuild { get; set; }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Option
        /// </summary>
        [DataMember(Name = "option", EmitDefaultValue = false)]
        public string Option { get; set; }

        /// <summary>
        /// Gets or Sets Loaddata
        /// </summary>
        [DataMember(Name = "loaddata", EmitDefaultValue = false)]
        public string Loaddata { get; set; }

        /// <summary>
        /// Gets or Sets UseConnection
        /// </summary>
        [DataMember(Name = "useConnection", EmitDefaultValue = false)]
        public string UseConnection { get; set; }

        /// <summary>
        /// Gets or Sets Connection
        /// </summary>
        [DataMember(Name = "connection", EmitDefaultValue = false)]
        public string Connection { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Calc
        /// </summary>
        [DataMember(Name = "calc", EmitDefaultValue = false)]
        public string Calc { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets MemberIds
        /// </summary>
        [DataMember(Name = "memberIds", EmitDefaultValue = false)]
        public string MemberIds { get; set; }

        /// <summary>
        /// Gets or Sets ZipFileName
        /// </summary>
        [DataMember(Name = "zipFileName", EmitDefaultValue = false)]
        public string ZipFileName { get; set; }

        /// <summary>
        /// Gets or Sets Skipdata
        /// </summary>
        [DataMember(Name = "skipdata", EmitDefaultValue = false)]
        public string Skipdata { get; set; }

        /// <summary>
        /// Gets or Sets Threads
        /// </summary>
        [DataMember(Name = "threads", EmitDefaultValue = false)]
        public string Threads { get; set; }

        /// <summary>
        /// Gets or Sets Overwrite
        /// </summary>
        [DataMember(Name = "overwrite", EmitDefaultValue = false)]
        public string Overwrite { get; set; }

        /// <summary>
        /// Gets or Sets LcmImportFromStorage
        /// </summary>
        [DataMember(Name = "lcmImportFromStorage", EmitDefaultValue = false)]
        public string LcmImportFromStorage { get; set; }

        /// <summary>
        /// Gets or Sets AnalyzeFileName
        /// </summary>
        [DataMember(Name = "analyzeFileName", EmitDefaultValue = false)]
        public string AnalyzeFileName { get; set; }

        /// <summary>
        /// Gets or Sets AnalyzeSheetName
        /// </summary>
        [DataMember(Name = "analyzeSheetName", EmitDefaultValue = false)]
        public string AnalyzeSheetName { get; set; }

        /// <summary>
        /// Gets or Sets DeleteExcelOnSuccess
        /// </summary>
        [DataMember(Name = "deleteExcelOnSuccess", EmitDefaultValue = false)]
        public string DeleteExcelOnSuccess { get; set; }

        /// <summary>
        /// Gets or Sets CatalogExcelPath
        /// </summary>
        [DataMember(Name = "catalogExcelPath", EmitDefaultValue = false)]
        public string CatalogExcelPath { get; set; }

        /// <summary>
        /// Gets or Sets ImportExcelFileName
        /// </summary>
        [DataMember(Name = "importExcelFileName", EmitDefaultValue = false)]
        public string ImportExcelFileName { get; set; }

        /// <summary>
        /// Gets or Sets RecreateApplication
        /// </summary>
        [DataMember(Name = "recreateApplication", EmitDefaultValue = false)]
        public string RecreateApplication { get; set; }

        /// <summary>
        /// Gets or Sets CreateFiles
        /// </summary>
        [DataMember(Name = "createFiles", EmitDefaultValue = false)]
        public string CreateFiles { get; set; }

        /// <summary>
        /// Gets or Sets ExecuteScript
        /// </summary>
        [DataMember(Name = "executeScript", EmitDefaultValue = false)]
        public string ExecuteScript { get; set; }

        /// <summary>
        /// Gets or Sets CopyToStorage
        /// </summary>
        [DataMember(Name = "copyToStorage", EmitDefaultValue = false)]
        public string CopyToStorage { get; set; }

        /// <summary>
        /// Gets or Sets Filesystemcopy
        /// </summary>
        [DataMember(Name = "filesystemcopy", EmitDefaultValue = false)]
        public string Filesystemcopy { get; set; }

        /// <summary>
        /// Gets or Sets ColumnFormat
        /// </summary>
        [DataMember(Name = "columnFormat", EmitDefaultValue = false)]
        public string ColumnFormat { get; set; }

        /// <summary>
        /// Gets or Sets TargetApplicationName
        /// </summary>
        [DataMember(Name = "targetApplicationName", EmitDefaultValue = false)]
        public string TargetApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets PartialDataExpression
        /// </summary>
        [DataMember(Name = "partialDataExpression", EmitDefaultValue = false)]
        public string PartialDataExpression { get; set; }

        /// <summary>
        /// Gets or Sets AllApp
        /// </summary>
        [DataMember(Name = "allApp", EmitDefaultValue = false)]
        public string AllApp { get; set; }

        /// <summary>
        /// Gets or Sets IncludeServerLevel
        /// </summary>
        [DataMember(Name = "includeServerLevel", EmitDefaultValue = false)]
        public string IncludeServerLevel { get; set; }

        /// <summary>
        /// Gets or Sets EnableSandboxing
        /// </summary>
        [DataMember(Name = "enableSandboxing", EmitDefaultValue = false)]
        public string EnableSandboxing { get; set; }

        /// <summary>
        /// Gets or Sets DbType
        /// </summary>
        [DataMember(Name = "dbType", EmitDefaultValue = false)]
        public string DbType { get; set; }

        /// <summary>
        /// Gets or Sets DimDesignationMode
        /// </summary>
        [DataMember(Name = "dimDesignationMode", EmitDefaultValue = false)]
        public string DimDesignationMode { get; set; }

        /// <summary>
        /// Gets or Sets UnstructuredAnalysis
        /// </summary>
        [DataMember(Name = "unstructuredAnalysis", EmitDefaultValue = false)]
        public CompactDesignation UnstructuredAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets RatioToStop
        /// </summary>
        [DataMember(Name = "ratioToStop", EmitDefaultValue = false)]
        public string RatioToStop { get; set; }

        /// <summary>
        /// Gets or Sets BasedOnQueryData
        /// </summary>
        [DataMember(Name = "basedOnQueryData", EmitDefaultValue = false)]
        public string BasedOnQueryData { get; set; }

        /// <summary>
        /// Gets or Sets EnableAlternateRollups
        /// </summary>
        [DataMember(Name = "enableAlternateRollups", EmitDefaultValue = false)]
        public string EnableAlternateRollups { get; set; }

        /// <summary>
        /// Gets or Sets Compress
        /// </summary>
        [DataMember(Name = "compress", EmitDefaultValue = false)]
        public string Compress { get; set; }

        /// <summary>
        /// Gets or Sets GenerateArtifactList
        /// </summary>
        [DataMember(Name = "generateArtifactList", EmitDefaultValue = false)]
        public string GenerateArtifactList { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactList
        /// </summary>
        [DataMember(Name = "artifactList", EmitDefaultValue = false)]
        public string ArtifactList { get; set; }

        /// <summary>
        /// Gets or Sets Verbose
        /// </summary>
        [DataMember(Name = "verbose", EmitDefaultValue = false)]
        public string Verbose { get; set; }

        /// <summary>
        /// Gets or Sets DisasterRecovery
        /// </summary>
        [DataMember(Name = "disasterRecovery", EmitDefaultValue = false)]
        public string DisasterRecovery { get; set; }

        /// <summary>
        /// Gets or Sets Force
        /// </summary>
        [DataMember(Name = "force", EmitDefaultValue = false)]
        public string Force { get; set; }

        /// <summary>
        /// Gets or Sets BackupType
        /// </summary>
        [DataMember(Name = "backupType", EmitDefaultValue = false)]
        public string BackupType { get; set; }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name = "appId", EmitDefaultValue = false)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets MaxParallel
        /// </summary>
        [DataMember(Name = "maxParallel", EmitDefaultValue = false)]
        public string MaxParallel { get; set; }

        /// <summary>
        /// Gets or Sets SelectedDimensions
        /// </summary>
        [DataMember(Name = "selectedDimensions", EmitDefaultValue = false)]
        public List<string> SelectedDimensions { get; set; }

        /// <summary>
        /// Gets or Sets Rtsv
        /// </summary>
        [DataMember(Name = "rtsv", EmitDefaultValue = false)]
        public List<RTSV> Rtsv { get; set; }

        /// <summary>
        /// Gets or Sets BufferId
        /// </summary>
        [DataMember(Name = "bufferId", EmitDefaultValue = false)]
        public int BufferId { get; set; }

        /// <summary>
        /// Gets or Sets BufferIds
        /// </summary>
        [DataMember(Name = "bufferIds", EmitDefaultValue = false)]
        public List<int> BufferIds { get; set; }

        /// <summary>
        /// Gets or Sets CommitOption
        /// </summary>
        [DataMember(Name = "commitOption", EmitDefaultValue = false)]
        public string CommitOption { get; set; }

        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name = "actionType", EmitDefaultValue = false)]
        public string ActionType { get; set; }

        /// <summary>
        /// Gets or Sets TermOption
        /// </summary>
        [DataMember(Name = "termOption", EmitDefaultValue = false)]
        public string TermOption { get; set; }

        /// <summary>
        /// Gets or Sets DiscoverDimensionTables
        /// </summary>
        [DataMember(Name = "discoverDimensionTables", EmitDefaultValue = false)]
        public string DiscoverDimensionTables { get; set; }

        /// <summary>
        /// Gets or Sets ExportDynamicBlocks
        /// </summary>
        [DataMember(Name = "exportDynamicBlocks", EmitDefaultValue = false)]
        public string ExportDynamicBlocks { get; set; }

        /// <summary>
        /// Gets or Sets ShadowAppName
        /// </summary>
        [DataMember(Name = "shadowAppName", EmitDefaultValue = false)]
        public string ShadowAppName { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryAppName
        /// </summary>
        [DataMember(Name = "primaryAppName", EmitDefaultValue = false)]
        public string PrimaryAppName { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutToForceUnloadApp
        /// </summary>
        [DataMember(Name = "timeoutToForceUnloadApp", EmitDefaultValue = false)]
        public string TimeoutToForceUnloadApp { get; set; }

        /// <summary>
        /// Gets or Sets HideShadow
        /// </summary>
        [DataMember(Name = "hideShadow", EmitDefaultValue = false)]
        public string HideShadow { get; set; }

        /// <summary>
        /// Gets or Sets WaitForOngoingUpdatesInSecs
        /// </summary>
        [DataMember(Name = "waitForOngoingUpdatesInSecs", EmitDefaultValue = false)]
        public string WaitForOngoingUpdatesInSecs { get; set; }

        /// <summary>
        /// Gets or Sets ReportScriptFilename
        /// </summary>
        [DataMember(Name = "reportScriptFilename", EmitDefaultValue = false)]
        public string ReportScriptFilename { get; set; }

        /// <summary>
        /// Gets or Sets LockForUpdate
        /// </summary>
        [DataMember(Name = "lockForUpdate", EmitDefaultValue = true)]
        public bool LockForUpdate { get; set; }

        /// <summary>
        /// Gets or Sets IsScriptContent
        /// </summary>
        [DataMember(Name = "isScriptContent", EmitDefaultValue = true)]
        public bool IsScriptContent { get; set; }

        /// <summary>
        /// Gets or Sets UseCatalogPath
        /// </summary>
        [DataMember(Name = "useCatalogPath", EmitDefaultValue = true)]
        public bool UseCatalogPath { get; set; }

        /// <summary>
        /// Gets or Sets Exportdata
        /// </summary>
        [DataMember(Name = "exportdata", EmitDefaultValue = true)]
        public bool Exportdata { get; set; }

        /// <summary>
        /// Gets or Sets Cube
        /// </summary>
        [DataMember(Name = "cube", EmitDefaultValue = false)]
        public string Cube { get; set; }

        /// <summary>
        /// Gets or Sets Filetype
        /// </summary>
        [DataMember(Name = "filetype", EmitDefaultValue = false)]
        public string Filetype { get; set; }

        /// <summary>
        /// Gets or Sets Exportpartitions
        /// </summary>
        [DataMember(Name = "exportpartitions", EmitDefaultValue = true)]
        public bool Exportpartitions { get; set; }

        /// <summary>
        /// Gets or Sets Exportfilters
        /// </summary>
        [DataMember(Name = "exportfilters", EmitDefaultValue = true)]
        public bool Exportfilters { get; set; }

        /// <summary>
        /// Gets or Sets Physical
        /// </summary>
        [DataMember(Name = "physical", EmitDefaultValue = true)]
        public bool Physical { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParametersBean {\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  AbortOnError: ").Append(AbortOnError).Append("\n");
            sb.Append("  RestructureOption: ").Append(RestructureOption).Append("\n");
            sb.Append("  ForceDimBuild: ").Append(ForceDimBuild).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Option: ").Append(Option).Append("\n");
            sb.Append("  Loaddata: ").Append(Loaddata).Append("\n");
            sb.Append("  UseConnection: ").Append(UseConnection).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Calc: ").Append(Calc).Append("\n");
            sb.Append("  BuildMethod: ").Append(BuildMethod).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  MemberIds: ").Append(MemberIds).Append("\n");
            sb.Append("  ZipFileName: ").Append(ZipFileName).Append("\n");
            sb.Append("  Skipdata: ").Append(Skipdata).Append("\n");
            sb.Append("  Threads: ").Append(Threads).Append("\n");
            sb.Append("  Overwrite: ").Append(Overwrite).Append("\n");
            sb.Append("  LcmImportFromStorage: ").Append(LcmImportFromStorage).Append("\n");
            sb.Append("  AnalyzeFileName: ").Append(AnalyzeFileName).Append("\n");
            sb.Append("  AnalyzeSheetName: ").Append(AnalyzeSheetName).Append("\n");
            sb.Append("  DeleteExcelOnSuccess: ").Append(DeleteExcelOnSuccess).Append("\n");
            sb.Append("  CatalogExcelPath: ").Append(CatalogExcelPath).Append("\n");
            sb.Append("  ImportExcelFileName: ").Append(ImportExcelFileName).Append("\n");
            sb.Append("  RecreateApplication: ").Append(RecreateApplication).Append("\n");
            sb.Append("  CreateFiles: ").Append(CreateFiles).Append("\n");
            sb.Append("  ExecuteScript: ").Append(ExecuteScript).Append("\n");
            sb.Append("  BuildOption: ").Append(BuildOption).Append("\n");
            sb.Append("  CopyToStorage: ").Append(CopyToStorage).Append("\n");
            sb.Append("  Filesystemcopy: ").Append(Filesystemcopy).Append("\n");
            sb.Append("  DataLevel: ").Append(DataLevel).Append("\n");
            sb.Append("  ColumnFormat: ").Append(ColumnFormat).Append("\n");
            sb.Append("  TargetApplicationName: ").Append(TargetApplicationName).Append("\n");
            sb.Append("  PartialDataExpression: ").Append(PartialDataExpression).Append("\n");
            sb.Append("  AllApp: ").Append(AllApp).Append("\n");
            sb.Append("  IncludeServerLevel: ").Append(IncludeServerLevel).Append("\n");
            sb.Append("  EnableSandboxing: ").Append(EnableSandboxing).Append("\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("  DimDesignationMode: ").Append(DimDesignationMode).Append("\n");
            sb.Append("  UnstructuredAnalysis: ").Append(UnstructuredAnalysis).Append("\n");
            sb.Append("  RatioToStop: ").Append(RatioToStop).Append("\n");
            sb.Append("  BasedOnQueryData: ").Append(BasedOnQueryData).Append("\n");
            sb.Append("  EnableAlternateRollups: ").Append(EnableAlternateRollups).Append("\n");
            sb.Append("  Compress: ").Append(Compress).Append("\n");
            sb.Append("  GenerateArtifactList: ").Append(GenerateArtifactList).Append("\n");
            sb.Append("  ArtifactList: ").Append(ArtifactList).Append("\n");
            sb.Append("  Verbose: ").Append(Verbose).Append("\n");
            sb.Append("  DisasterRecovery: ").Append(DisasterRecovery).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("  BackupType: ").Append(BackupType).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  MaxParallel: ").Append(MaxParallel).Append("\n");
            sb.Append("  SelectedDimensions: ").Append(SelectedDimensions).Append("\n");
            sb.Append("  Rtsv: ").Append(Rtsv).Append("\n");
            sb.Append("  BufferId: ").Append(BufferId).Append("\n");
            sb.Append("  BufferIds: ").Append(BufferIds).Append("\n");
            sb.Append("  CommitOption: ").Append(CommitOption).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  TermOption: ").Append(TermOption).Append("\n");
            sb.Append("  DiscoverDimensionTables: ").Append(DiscoverDimensionTables).Append("\n");
            sb.Append("  ExportDynamicBlocks: ").Append(ExportDynamicBlocks).Append("\n");
            sb.Append("  ShadowAppName: ").Append(ShadowAppName).Append("\n");
            sb.Append("  PrimaryAppName: ").Append(PrimaryAppName).Append("\n");
            sb.Append("  TimeoutToForceUnloadApp: ").Append(TimeoutToForceUnloadApp).Append("\n");
            sb.Append("  HideShadow: ").Append(HideShadow).Append("\n");
            sb.Append("  WaitForOngoingUpdatesInSecs: ").Append(WaitForOngoingUpdatesInSecs).Append("\n");
            sb.Append("  ReportScriptFilename: ").Append(ReportScriptFilename).Append("\n");
            sb.Append("  LockForUpdate: ").Append(LockForUpdate).Append("\n");
            sb.Append("  IsScriptContent: ").Append(IsScriptContent).Append("\n");
            sb.Append("  UseCatalogPath: ").Append(UseCatalogPath).Append("\n");
            sb.Append("  Exportdata: ").Append(Exportdata).Append("\n");
            sb.Append("  Cube: ").Append(Cube).Append("\n");
            sb.Append("  Filetype: ").Append(Filetype).Append("\n");
            sb.Append("  Exportpartitions: ").Append(Exportpartitions).Append("\n");
            sb.Append("  Exportfilters: ").Append(Exportfilters).Append("\n");
            sb.Append("  Physical: ").Append(Physical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParametersBean);
        }

        /// <summary>
        /// Returns true if ParametersBean instances are equal
        /// </summary>
        /// <param name="input">Instance of ParametersBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParametersBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Rule == input.Rule ||
                    (this.Rule != null &&
                    this.Rule.Equals(input.Rule))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.AbortOnError == input.AbortOnError ||
                    (this.AbortOnError != null &&
                    this.AbortOnError.Equals(input.AbortOnError))
                ) && 
                (
                    this.RestructureOption == input.RestructureOption ||
                    (this.RestructureOption != null &&
                    this.RestructureOption.Equals(input.RestructureOption))
                ) && 
                (
                    this.ForceDimBuild == input.ForceDimBuild ||
                    (this.ForceDimBuild != null &&
                    this.ForceDimBuild.Equals(input.ForceDimBuild))
                ) && 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                ) && 
                (
                    this.Option == input.Option ||
                    (this.Option != null &&
                    this.Option.Equals(input.Option))
                ) && 
                (
                    this.Loaddata == input.Loaddata ||
                    (this.Loaddata != null &&
                    this.Loaddata.Equals(input.Loaddata))
                ) && 
                (
                    this.UseConnection == input.UseConnection ||
                    (this.UseConnection != null &&
                    this.UseConnection.Equals(input.UseConnection))
                ) && 
                (
                    this.Connection == input.Connection ||
                    (this.Connection != null &&
                    this.Connection.Equals(input.Connection))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Calc == input.Calc ||
                    (this.Calc != null &&
                    this.Calc.Equals(input.Calc))
                ) && 
                (
                    this.BuildMethod == input.BuildMethod ||
                    this.BuildMethod.Equals(input.BuildMethod)
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.MemberIds == input.MemberIds ||
                    (this.MemberIds != null &&
                    this.MemberIds.Equals(input.MemberIds))
                ) && 
                (
                    this.ZipFileName == input.ZipFileName ||
                    (this.ZipFileName != null &&
                    this.ZipFileName.Equals(input.ZipFileName))
                ) && 
                (
                    this.Skipdata == input.Skipdata ||
                    (this.Skipdata != null &&
                    this.Skipdata.Equals(input.Skipdata))
                ) && 
                (
                    this.Threads == input.Threads ||
                    (this.Threads != null &&
                    this.Threads.Equals(input.Threads))
                ) && 
                (
                    this.Overwrite == input.Overwrite ||
                    (this.Overwrite != null &&
                    this.Overwrite.Equals(input.Overwrite))
                ) && 
                (
                    this.LcmImportFromStorage == input.LcmImportFromStorage ||
                    (this.LcmImportFromStorage != null &&
                    this.LcmImportFromStorage.Equals(input.LcmImportFromStorage))
                ) && 
                (
                    this.AnalyzeFileName == input.AnalyzeFileName ||
                    (this.AnalyzeFileName != null &&
                    this.AnalyzeFileName.Equals(input.AnalyzeFileName))
                ) && 
                (
                    this.AnalyzeSheetName == input.AnalyzeSheetName ||
                    (this.AnalyzeSheetName != null &&
                    this.AnalyzeSheetName.Equals(input.AnalyzeSheetName))
                ) && 
                (
                    this.DeleteExcelOnSuccess == input.DeleteExcelOnSuccess ||
                    (this.DeleteExcelOnSuccess != null &&
                    this.DeleteExcelOnSuccess.Equals(input.DeleteExcelOnSuccess))
                ) && 
                (
                    this.CatalogExcelPath == input.CatalogExcelPath ||
                    (this.CatalogExcelPath != null &&
                    this.CatalogExcelPath.Equals(input.CatalogExcelPath))
                ) && 
                (
                    this.ImportExcelFileName == input.ImportExcelFileName ||
                    (this.ImportExcelFileName != null &&
                    this.ImportExcelFileName.Equals(input.ImportExcelFileName))
                ) && 
                (
                    this.RecreateApplication == input.RecreateApplication ||
                    (this.RecreateApplication != null &&
                    this.RecreateApplication.Equals(input.RecreateApplication))
                ) && 
                (
                    this.CreateFiles == input.CreateFiles ||
                    (this.CreateFiles != null &&
                    this.CreateFiles.Equals(input.CreateFiles))
                ) && 
                (
                    this.ExecuteScript == input.ExecuteScript ||
                    (this.ExecuteScript != null &&
                    this.ExecuteScript.Equals(input.ExecuteScript))
                ) && 
                (
                    this.BuildOption == input.BuildOption ||
                    this.BuildOption.Equals(input.BuildOption)
                ) && 
                (
                    this.CopyToStorage == input.CopyToStorage ||
                    (this.CopyToStorage != null &&
                    this.CopyToStorage.Equals(input.CopyToStorage))
                ) && 
                (
                    this.Filesystemcopy == input.Filesystemcopy ||
                    (this.Filesystemcopy != null &&
                    this.Filesystemcopy.Equals(input.Filesystemcopy))
                ) && 
                (
                    this.DataLevel == input.DataLevel ||
                    this.DataLevel.Equals(input.DataLevel)
                ) && 
                (
                    this.ColumnFormat == input.ColumnFormat ||
                    (this.ColumnFormat != null &&
                    this.ColumnFormat.Equals(input.ColumnFormat))
                ) && 
                (
                    this.TargetApplicationName == input.TargetApplicationName ||
                    (this.TargetApplicationName != null &&
                    this.TargetApplicationName.Equals(input.TargetApplicationName))
                ) && 
                (
                    this.PartialDataExpression == input.PartialDataExpression ||
                    (this.PartialDataExpression != null &&
                    this.PartialDataExpression.Equals(input.PartialDataExpression))
                ) && 
                (
                    this.AllApp == input.AllApp ||
                    (this.AllApp != null &&
                    this.AllApp.Equals(input.AllApp))
                ) && 
                (
                    this.IncludeServerLevel == input.IncludeServerLevel ||
                    (this.IncludeServerLevel != null &&
                    this.IncludeServerLevel.Equals(input.IncludeServerLevel))
                ) && 
                (
                    this.EnableSandboxing == input.EnableSandboxing ||
                    (this.EnableSandboxing != null &&
                    this.EnableSandboxing.Equals(input.EnableSandboxing))
                ) && 
                (
                    this.DbType == input.DbType ||
                    (this.DbType != null &&
                    this.DbType.Equals(input.DbType))
                ) && 
                (
                    this.DimDesignationMode == input.DimDesignationMode ||
                    (this.DimDesignationMode != null &&
                    this.DimDesignationMode.Equals(input.DimDesignationMode))
                ) && 
                (
                    this.UnstructuredAnalysis == input.UnstructuredAnalysis ||
                    (this.UnstructuredAnalysis != null &&
                    this.UnstructuredAnalysis.Equals(input.UnstructuredAnalysis))
                ) && 
                (
                    this.RatioToStop == input.RatioToStop ||
                    (this.RatioToStop != null &&
                    this.RatioToStop.Equals(input.RatioToStop))
                ) && 
                (
                    this.BasedOnQueryData == input.BasedOnQueryData ||
                    (this.BasedOnQueryData != null &&
                    this.BasedOnQueryData.Equals(input.BasedOnQueryData))
                ) && 
                (
                    this.EnableAlternateRollups == input.EnableAlternateRollups ||
                    (this.EnableAlternateRollups != null &&
                    this.EnableAlternateRollups.Equals(input.EnableAlternateRollups))
                ) && 
                (
                    this.Compress == input.Compress ||
                    (this.Compress != null &&
                    this.Compress.Equals(input.Compress))
                ) && 
                (
                    this.GenerateArtifactList == input.GenerateArtifactList ||
                    (this.GenerateArtifactList != null &&
                    this.GenerateArtifactList.Equals(input.GenerateArtifactList))
                ) && 
                (
                    this.ArtifactList == input.ArtifactList ||
                    (this.ArtifactList != null &&
                    this.ArtifactList.Equals(input.ArtifactList))
                ) && 
                (
                    this.Verbose == input.Verbose ||
                    (this.Verbose != null &&
                    this.Verbose.Equals(input.Verbose))
                ) && 
                (
                    this.DisasterRecovery == input.DisasterRecovery ||
                    (this.DisasterRecovery != null &&
                    this.DisasterRecovery.Equals(input.DisasterRecovery))
                ) && 
                (
                    this.Force == input.Force ||
                    (this.Force != null &&
                    this.Force.Equals(input.Force))
                ) && 
                (
                    this.BackupType == input.BackupType ||
                    (this.BackupType != null &&
                    this.BackupType.Equals(input.BackupType))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.MaxParallel == input.MaxParallel ||
                    (this.MaxParallel != null &&
                    this.MaxParallel.Equals(input.MaxParallel))
                ) && 
                (
                    this.SelectedDimensions == input.SelectedDimensions ||
                    this.SelectedDimensions != null &&
                    input.SelectedDimensions != null &&
                    this.SelectedDimensions.SequenceEqual(input.SelectedDimensions)
                ) && 
                (
                    this.Rtsv == input.Rtsv ||
                    this.Rtsv != null &&
                    input.Rtsv != null &&
                    this.Rtsv.SequenceEqual(input.Rtsv)
                ) && 
                (
                    this.BufferId == input.BufferId ||
                    this.BufferId.Equals(input.BufferId)
                ) && 
                (
                    this.BufferIds == input.BufferIds ||
                    this.BufferIds != null &&
                    input.BufferIds != null &&
                    this.BufferIds.SequenceEqual(input.BufferIds)
                ) && 
                (
                    this.CommitOption == input.CommitOption ||
                    (this.CommitOption != null &&
                    this.CommitOption.Equals(input.CommitOption))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.TermOption == input.TermOption ||
                    (this.TermOption != null &&
                    this.TermOption.Equals(input.TermOption))
                ) && 
                (
                    this.DiscoverDimensionTables == input.DiscoverDimensionTables ||
                    (this.DiscoverDimensionTables != null &&
                    this.DiscoverDimensionTables.Equals(input.DiscoverDimensionTables))
                ) && 
                (
                    this.ExportDynamicBlocks == input.ExportDynamicBlocks ||
                    (this.ExportDynamicBlocks != null &&
                    this.ExportDynamicBlocks.Equals(input.ExportDynamicBlocks))
                ) && 
                (
                    this.ShadowAppName == input.ShadowAppName ||
                    (this.ShadowAppName != null &&
                    this.ShadowAppName.Equals(input.ShadowAppName))
                ) && 
                (
                    this.PrimaryAppName == input.PrimaryAppName ||
                    (this.PrimaryAppName != null &&
                    this.PrimaryAppName.Equals(input.PrimaryAppName))
                ) && 
                (
                    this.TimeoutToForceUnloadApp == input.TimeoutToForceUnloadApp ||
                    (this.TimeoutToForceUnloadApp != null &&
                    this.TimeoutToForceUnloadApp.Equals(input.TimeoutToForceUnloadApp))
                ) && 
                (
                    this.HideShadow == input.HideShadow ||
                    (this.HideShadow != null &&
                    this.HideShadow.Equals(input.HideShadow))
                ) && 
                (
                    this.WaitForOngoingUpdatesInSecs == input.WaitForOngoingUpdatesInSecs ||
                    (this.WaitForOngoingUpdatesInSecs != null &&
                    this.WaitForOngoingUpdatesInSecs.Equals(input.WaitForOngoingUpdatesInSecs))
                ) && 
                (
                    this.ReportScriptFilename == input.ReportScriptFilename ||
                    (this.ReportScriptFilename != null &&
                    this.ReportScriptFilename.Equals(input.ReportScriptFilename))
                ) && 
                (
                    this.LockForUpdate == input.LockForUpdate ||
                    this.LockForUpdate.Equals(input.LockForUpdate)
                ) && 
                (
                    this.IsScriptContent == input.IsScriptContent ||
                    this.IsScriptContent.Equals(input.IsScriptContent)
                ) && 
                (
                    this.UseCatalogPath == input.UseCatalogPath ||
                    this.UseCatalogPath.Equals(input.UseCatalogPath)
                ) && 
                (
                    this.Exportdata == input.Exportdata ||
                    this.Exportdata.Equals(input.Exportdata)
                ) && 
                (
                    this.Cube == input.Cube ||
                    (this.Cube != null &&
                    this.Cube.Equals(input.Cube))
                ) && 
                (
                    this.Filetype == input.Filetype ||
                    (this.Filetype != null &&
                    this.Filetype.Equals(input.Filetype))
                ) && 
                (
                    this.Exportpartitions == input.Exportpartitions ||
                    this.Exportpartitions.Equals(input.Exportpartitions)
                ) && 
                (
                    this.Exportfilters == input.Exportfilters ||
                    this.Exportfilters.Equals(input.Exportfilters)
                ) && 
                (
                    this.Physical == input.Physical ||
                    this.Physical.Equals(input.Physical)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rule != null)
                {
                    hashCode = (hashCode * 59) + this.Rule.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.AbortOnError != null)
                {
                    hashCode = (hashCode * 59) + this.AbortOnError.GetHashCode();
                }
                if (this.RestructureOption != null)
                {
                    hashCode = (hashCode * 59) + this.RestructureOption.GetHashCode();
                }
                if (this.ForceDimBuild != null)
                {
                    hashCode = (hashCode * 59) + this.ForceDimBuild.GetHashCode();
                }
                if (this.Script != null)
                {
                    hashCode = (hashCode * 59) + this.Script.GetHashCode();
                }
                if (this.Option != null)
                {
                    hashCode = (hashCode * 59) + this.Option.GetHashCode();
                }
                if (this.Loaddata != null)
                {
                    hashCode = (hashCode * 59) + this.Loaddata.GetHashCode();
                }
                if (this.UseConnection != null)
                {
                    hashCode = (hashCode * 59) + this.UseConnection.GetHashCode();
                }
                if (this.Connection != null)
                {
                    hashCode = (hashCode * 59) + this.Connection.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Calc != null)
                {
                    hashCode = (hashCode * 59) + this.Calc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuildMethod.GetHashCode();
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.MemberIds != null)
                {
                    hashCode = (hashCode * 59) + this.MemberIds.GetHashCode();
                }
                if (this.ZipFileName != null)
                {
                    hashCode = (hashCode * 59) + this.ZipFileName.GetHashCode();
                }
                if (this.Skipdata != null)
                {
                    hashCode = (hashCode * 59) + this.Skipdata.GetHashCode();
                }
                if (this.Threads != null)
                {
                    hashCode = (hashCode * 59) + this.Threads.GetHashCode();
                }
                if (this.Overwrite != null)
                {
                    hashCode = (hashCode * 59) + this.Overwrite.GetHashCode();
                }
                if (this.LcmImportFromStorage != null)
                {
                    hashCode = (hashCode * 59) + this.LcmImportFromStorage.GetHashCode();
                }
                if (this.AnalyzeFileName != null)
                {
                    hashCode = (hashCode * 59) + this.AnalyzeFileName.GetHashCode();
                }
                if (this.AnalyzeSheetName != null)
                {
                    hashCode = (hashCode * 59) + this.AnalyzeSheetName.GetHashCode();
                }
                if (this.DeleteExcelOnSuccess != null)
                {
                    hashCode = (hashCode * 59) + this.DeleteExcelOnSuccess.GetHashCode();
                }
                if (this.CatalogExcelPath != null)
                {
                    hashCode = (hashCode * 59) + this.CatalogExcelPath.GetHashCode();
                }
                if (this.ImportExcelFileName != null)
                {
                    hashCode = (hashCode * 59) + this.ImportExcelFileName.GetHashCode();
                }
                if (this.RecreateApplication != null)
                {
                    hashCode = (hashCode * 59) + this.RecreateApplication.GetHashCode();
                }
                if (this.CreateFiles != null)
                {
                    hashCode = (hashCode * 59) + this.CreateFiles.GetHashCode();
                }
                if (this.ExecuteScript != null)
                {
                    hashCode = (hashCode * 59) + this.ExecuteScript.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuildOption.GetHashCode();
                if (this.CopyToStorage != null)
                {
                    hashCode = (hashCode * 59) + this.CopyToStorage.GetHashCode();
                }
                if (this.Filesystemcopy != null)
                {
                    hashCode = (hashCode * 59) + this.Filesystemcopy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataLevel.GetHashCode();
                if (this.ColumnFormat != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnFormat.GetHashCode();
                }
                if (this.TargetApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.TargetApplicationName.GetHashCode();
                }
                if (this.PartialDataExpression != null)
                {
                    hashCode = (hashCode * 59) + this.PartialDataExpression.GetHashCode();
                }
                if (this.AllApp != null)
                {
                    hashCode = (hashCode * 59) + this.AllApp.GetHashCode();
                }
                if (this.IncludeServerLevel != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeServerLevel.GetHashCode();
                }
                if (this.EnableSandboxing != null)
                {
                    hashCode = (hashCode * 59) + this.EnableSandboxing.GetHashCode();
                }
                if (this.DbType != null)
                {
                    hashCode = (hashCode * 59) + this.DbType.GetHashCode();
                }
                if (this.DimDesignationMode != null)
                {
                    hashCode = (hashCode * 59) + this.DimDesignationMode.GetHashCode();
                }
                if (this.UnstructuredAnalysis != null)
                {
                    hashCode = (hashCode * 59) + this.UnstructuredAnalysis.GetHashCode();
                }
                if (this.RatioToStop != null)
                {
                    hashCode = (hashCode * 59) + this.RatioToStop.GetHashCode();
                }
                if (this.BasedOnQueryData != null)
                {
                    hashCode = (hashCode * 59) + this.BasedOnQueryData.GetHashCode();
                }
                if (this.EnableAlternateRollups != null)
                {
                    hashCode = (hashCode * 59) + this.EnableAlternateRollups.GetHashCode();
                }
                if (this.Compress != null)
                {
                    hashCode = (hashCode * 59) + this.Compress.GetHashCode();
                }
                if (this.GenerateArtifactList != null)
                {
                    hashCode = (hashCode * 59) + this.GenerateArtifactList.GetHashCode();
                }
                if (this.ArtifactList != null)
                {
                    hashCode = (hashCode * 59) + this.ArtifactList.GetHashCode();
                }
                if (this.Verbose != null)
                {
                    hashCode = (hashCode * 59) + this.Verbose.GetHashCode();
                }
                if (this.DisasterRecovery != null)
                {
                    hashCode = (hashCode * 59) + this.DisasterRecovery.GetHashCode();
                }
                if (this.Force != null)
                {
                    hashCode = (hashCode * 59) + this.Force.GetHashCode();
                }
                if (this.BackupType != null)
                {
                    hashCode = (hashCode * 59) + this.BackupType.GetHashCode();
                }
                if (this.AppId != null)
                {
                    hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.MaxParallel != null)
                {
                    hashCode = (hashCode * 59) + this.MaxParallel.GetHashCode();
                }
                if (this.SelectedDimensions != null)
                {
                    hashCode = (hashCode * 59) + this.SelectedDimensions.GetHashCode();
                }
                if (this.Rtsv != null)
                {
                    hashCode = (hashCode * 59) + this.Rtsv.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BufferId.GetHashCode();
                if (this.BufferIds != null)
                {
                    hashCode = (hashCode * 59) + this.BufferIds.GetHashCode();
                }
                if (this.CommitOption != null)
                {
                    hashCode = (hashCode * 59) + this.CommitOption.GetHashCode();
                }
                if (this.ActionType != null)
                {
                    hashCode = (hashCode * 59) + this.ActionType.GetHashCode();
                }
                if (this.TermOption != null)
                {
                    hashCode = (hashCode * 59) + this.TermOption.GetHashCode();
                }
                if (this.DiscoverDimensionTables != null)
                {
                    hashCode = (hashCode * 59) + this.DiscoverDimensionTables.GetHashCode();
                }
                if (this.ExportDynamicBlocks != null)
                {
                    hashCode = (hashCode * 59) + this.ExportDynamicBlocks.GetHashCode();
                }
                if (this.ShadowAppName != null)
                {
                    hashCode = (hashCode * 59) + this.ShadowAppName.GetHashCode();
                }
                if (this.PrimaryAppName != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryAppName.GetHashCode();
                }
                if (this.TimeoutToForceUnloadApp != null)
                {
                    hashCode = (hashCode * 59) + this.TimeoutToForceUnloadApp.GetHashCode();
                }
                if (this.HideShadow != null)
                {
                    hashCode = (hashCode * 59) + this.HideShadow.GetHashCode();
                }
                if (this.WaitForOngoingUpdatesInSecs != null)
                {
                    hashCode = (hashCode * 59) + this.WaitForOngoingUpdatesInSecs.GetHashCode();
                }
                if (this.ReportScriptFilename != null)
                {
                    hashCode = (hashCode * 59) + this.ReportScriptFilename.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LockForUpdate.GetHashCode();
                hashCode = (hashCode * 59) + this.IsScriptContent.GetHashCode();
                hashCode = (hashCode * 59) + this.UseCatalogPath.GetHashCode();
                hashCode = (hashCode * 59) + this.Exportdata.GetHashCode();
                if (this.Cube != null)
                {
                    hashCode = (hashCode * 59) + this.Cube.GetHashCode();
                }
                if (this.Filetype != null)
                {
                    hashCode = (hashCode * 59) + this.Filetype.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Exportpartitions.GetHashCode();
                hashCode = (hashCode * 59) + this.Exportfilters.GetHashCode();
                hashCode = (hashCode * 59) + this.Physical.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
