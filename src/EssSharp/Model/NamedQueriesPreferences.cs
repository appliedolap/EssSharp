/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// NamedQueriesPreferences
    /// </summary>
    [DataContract(Name = "NamedQueriesPreferences")]
    public partial class NamedQueriesPreferences : IEquatable<NamedQueriesPreferences>, IValidatableObject
    {
        /// <summary>
        /// Defines MemberIdentifierType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MemberIdentifierTypeEnum
        {
            /// <summary>
            /// Enum NAME for value: NAME
            /// </summary>
            [EnumMember(Value = "NAME")]
            NAME = 1,

            /// <summary>
            /// Enum ALIAS for value: ALIAS
            /// </summary>
            [EnumMember(Value = "ALIAS")]
            ALIAS = 2,

            /// <summary>
            /// Enum UNIQUENAME for value: UNIQUE_NAME
            /// </summary>
            [EnumMember(Value = "UNIQUE_NAME")]
            UNIQUENAME = 3

        }


        /// <summary>
        /// Gets or Sets MemberIdentifierType
        /// </summary>
        [DataMember(Name = "memberIdentifierType", EmitDefaultValue = false)]
        public MemberIdentifierTypeEnum? MemberIdentifierType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamedQueriesPreferences" /> class.
        /// </summary>
        /// <param name="dataless">dataless.</param>
        /// <param name="hideRestrictedData">hideRestrictedData.</param>
        /// <param name="cellAttributes">cellAttributes.</param>
        /// <param name="formatString">formatString.</param>
        /// <param name="formatValues">formatValues.</param>
        /// <param name="meaninglessCells">meaninglessCells.</param>
        /// <param name="textList">textList.</param>
        /// <param name="urlDrillThrough">urlDrillThrough.</param>
        /// <param name="memberIdentifierType">memberIdentifierType.</param>
        public NamedQueriesPreferences(bool dataless = default(bool), bool hideRestrictedData = default(bool), bool cellAttributes = default(bool), bool formatString = default(bool), bool formatValues = default(bool), bool meaninglessCells = default(bool), bool textList = default(bool), bool urlDrillThrough = default(bool), MemberIdentifierTypeEnum? memberIdentifierType = default(MemberIdentifierTypeEnum?))
        {
            this.Dataless = dataless;
            this.HideRestrictedData = hideRestrictedData;
            this.CellAttributes = cellAttributes;
            this.FormatString = formatString;
            this.FormatValues = formatValues;
            this.MeaninglessCells = meaninglessCells;
            this.TextList = textList;
            this.UrlDrillThrough = urlDrillThrough;
            this.MemberIdentifierType = memberIdentifierType;
        }

        /// <summary>
        /// Gets or Sets Dataless
        /// </summary>
        [DataMember(Name = "dataless", EmitDefaultValue = true)]
        public bool Dataless { get; set; }

        /// <summary>
        /// Gets or Sets HideRestrictedData
        /// </summary>
        [DataMember(Name = "hideRestrictedData", EmitDefaultValue = true)]
        public bool HideRestrictedData { get; set; }

        /// <summary>
        /// Gets or Sets CellAttributes
        /// </summary>
        [DataMember(Name = "cellAttributes", EmitDefaultValue = true)]
        public bool CellAttributes { get; set; }

        /// <summary>
        /// Gets or Sets FormatString
        /// </summary>
        [DataMember(Name = "formatString", EmitDefaultValue = true)]
        public bool FormatString { get; set; }

        /// <summary>
        /// Gets or Sets FormatValues
        /// </summary>
        [DataMember(Name = "formatValues", EmitDefaultValue = true)]
        public bool FormatValues { get; set; }

        /// <summary>
        /// Gets or Sets MeaninglessCells
        /// </summary>
        [DataMember(Name = "meaninglessCells", EmitDefaultValue = true)]
        public bool MeaninglessCells { get; set; }

        /// <summary>
        /// Gets or Sets TextList
        /// </summary>
        [DataMember(Name = "textList", EmitDefaultValue = true)]
        public bool TextList { get; set; }

        /// <summary>
        /// Gets or Sets UrlDrillThrough
        /// </summary>
        [DataMember(Name = "urlDrillThrough", EmitDefaultValue = true)]
        public bool UrlDrillThrough { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NamedQueriesPreferences {\n");
            sb.Append("  Dataless: ").Append(Dataless).Append("\n");
            sb.Append("  HideRestrictedData: ").Append(HideRestrictedData).Append("\n");
            sb.Append("  CellAttributes: ").Append(CellAttributes).Append("\n");
            sb.Append("  FormatString: ").Append(FormatString).Append("\n");
            sb.Append("  FormatValues: ").Append(FormatValues).Append("\n");
            sb.Append("  MeaninglessCells: ").Append(MeaninglessCells).Append("\n");
            sb.Append("  TextList: ").Append(TextList).Append("\n");
            sb.Append("  UrlDrillThrough: ").Append(UrlDrillThrough).Append("\n");
            sb.Append("  MemberIdentifierType: ").Append(MemberIdentifierType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NamedQueriesPreferences);
        }

        /// <summary>
        /// Returns true if NamedQueriesPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of NamedQueriesPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NamedQueriesPreferences input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataless == input.Dataless ||
                    this.Dataless.Equals(input.Dataless)
                ) && 
                (
                    this.HideRestrictedData == input.HideRestrictedData ||
                    this.HideRestrictedData.Equals(input.HideRestrictedData)
                ) && 
                (
                    this.CellAttributes == input.CellAttributes ||
                    this.CellAttributes.Equals(input.CellAttributes)
                ) && 
                (
                    this.FormatString == input.FormatString ||
                    this.FormatString.Equals(input.FormatString)
                ) && 
                (
                    this.FormatValues == input.FormatValues ||
                    this.FormatValues.Equals(input.FormatValues)
                ) && 
                (
                    this.MeaninglessCells == input.MeaninglessCells ||
                    this.MeaninglessCells.Equals(input.MeaninglessCells)
                ) && 
                (
                    this.TextList == input.TextList ||
                    this.TextList.Equals(input.TextList)
                ) && 
                (
                    this.UrlDrillThrough == input.UrlDrillThrough ||
                    this.UrlDrillThrough.Equals(input.UrlDrillThrough)
                ) && 
                (
                    this.MemberIdentifierType == input.MemberIdentifierType ||
                    this.MemberIdentifierType.Equals(input.MemberIdentifierType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Dataless.GetHashCode();
                hashCode = (hashCode * 59) + this.HideRestrictedData.GetHashCode();
                hashCode = (hashCode * 59) + this.CellAttributes.GetHashCode();
                hashCode = (hashCode * 59) + this.FormatString.GetHashCode();
                hashCode = (hashCode * 59) + this.FormatValues.GetHashCode();
                hashCode = (hashCode * 59) + this.MeaninglessCells.GetHashCode();
                hashCode = (hashCode * 59) + this.TextList.GetHashCode();
                hashCode = (hashCode * 59) + this.UrlDrillThrough.GetHashCode();
                hashCode = (hashCode * 59) + this.MemberIdentifierType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
