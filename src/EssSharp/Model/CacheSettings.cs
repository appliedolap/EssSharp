/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// CacheSettings
    /// </summary>
    [DataContract(Name = "CacheSettings")]
    public partial class CacheSettings : IEquatable<CacheSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CacheSettings" /> class.
        /// </summary>
        /// <param name="cacheMemoryLocking">cacheMemoryLocking.</param>
        /// <param name="indexCacheSetting">indexCacheSetting.</param>
        /// <param name="indexCacheCurrentValue">indexCacheCurrentValue.</param>
        /// <param name="dataFileCacheSetting">dataFileCacheSetting.</param>
        /// <param name="dataFileCacheCurrentValue">dataFileCacheCurrentValue.</param>
        /// <param name="dataCacheSetting">dataCacheSetting.</param>
        /// <param name="dataCacheCurrentValue">dataCacheCurrentValue.</param>
        /// <param name="indexPageSetting">indexPageSetting.</param>
        /// <param name="indexPageCurrentValue">indexPageCurrentValue.</param>
        public CacheSettings(bool cacheMemoryLocking = default(bool), long indexCacheSetting = default(long), long indexCacheCurrentValue = default(long), long dataFileCacheSetting = default(long), long dataFileCacheCurrentValue = default(long), long dataCacheSetting = default(long), long dataCacheCurrentValue = default(long), int indexPageSetting = default(int), int indexPageCurrentValue = default(int))
        {
            this.CacheMemoryLocking = cacheMemoryLocking;
            this.IndexCacheSetting = indexCacheSetting;
            this.IndexCacheCurrentValue = indexCacheCurrentValue;
            this.DataFileCacheSetting = dataFileCacheSetting;
            this.DataFileCacheCurrentValue = dataFileCacheCurrentValue;
            this.DataCacheSetting = dataCacheSetting;
            this.DataCacheCurrentValue = dataCacheCurrentValue;
            this.IndexPageSetting = indexPageSetting;
            this.IndexPageCurrentValue = indexPageCurrentValue;
        }

        /// <summary>
        /// Gets or Sets CacheMemoryLocking
        /// </summary>
        [DataMember(Name = "cacheMemoryLocking", EmitDefaultValue = true)]
        public bool CacheMemoryLocking { get; set; }

        /// <summary>
        /// Gets or Sets IndexCacheSetting
        /// </summary>
        [DataMember(Name = "indexCacheSetting", EmitDefaultValue = false)]
        public long IndexCacheSetting { get; set; }

        /// <summary>
        /// Gets or Sets IndexCacheCurrentValue
        /// </summary>
        [DataMember(Name = "indexCacheCurrentValue", EmitDefaultValue = false)]
        public long IndexCacheCurrentValue { get; set; }

        /// <summary>
        /// Gets or Sets DataFileCacheSetting
        /// </summary>
        [DataMember(Name = "dataFileCacheSetting", EmitDefaultValue = false)]
        public long DataFileCacheSetting { get; set; }

        /// <summary>
        /// Gets or Sets DataFileCacheCurrentValue
        /// </summary>
        [DataMember(Name = "dataFileCacheCurrentValue", EmitDefaultValue = false)]
        public long DataFileCacheCurrentValue { get; set; }

        /// <summary>
        /// Gets or Sets DataCacheSetting
        /// </summary>
        [DataMember(Name = "dataCacheSetting", EmitDefaultValue = false)]
        public long DataCacheSetting { get; set; }

        /// <summary>
        /// Gets or Sets DataCacheCurrentValue
        /// </summary>
        [DataMember(Name = "dataCacheCurrentValue", EmitDefaultValue = false)]
        public long DataCacheCurrentValue { get; set; }

        /// <summary>
        /// Gets or Sets IndexPageSetting
        /// </summary>
        [DataMember(Name = "indexPageSetting", EmitDefaultValue = false)]
        public int IndexPageSetting { get; set; }

        /// <summary>
        /// Gets or Sets IndexPageCurrentValue
        /// </summary>
        [DataMember(Name = "indexPageCurrentValue", EmitDefaultValue = false)]
        public int IndexPageCurrentValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CacheSettings {\n");
            sb.Append("  CacheMemoryLocking: ").Append(CacheMemoryLocking).Append("\n");
            sb.Append("  IndexCacheSetting: ").Append(IndexCacheSetting).Append("\n");
            sb.Append("  IndexCacheCurrentValue: ").Append(IndexCacheCurrentValue).Append("\n");
            sb.Append("  DataFileCacheSetting: ").Append(DataFileCacheSetting).Append("\n");
            sb.Append("  DataFileCacheCurrentValue: ").Append(DataFileCacheCurrentValue).Append("\n");
            sb.Append("  DataCacheSetting: ").Append(DataCacheSetting).Append("\n");
            sb.Append("  DataCacheCurrentValue: ").Append(DataCacheCurrentValue).Append("\n");
            sb.Append("  IndexPageSetting: ").Append(IndexPageSetting).Append("\n");
            sb.Append("  IndexPageCurrentValue: ").Append(IndexPageCurrentValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CacheSettings);
        }

        /// <summary>
        /// Returns true if CacheSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CacheSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CacheSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CacheMemoryLocking == input.CacheMemoryLocking ||
                    this.CacheMemoryLocking.Equals(input.CacheMemoryLocking)
                ) && 
                (
                    this.IndexCacheSetting == input.IndexCacheSetting ||
                    this.IndexCacheSetting.Equals(input.IndexCacheSetting)
                ) && 
                (
                    this.IndexCacheCurrentValue == input.IndexCacheCurrentValue ||
                    this.IndexCacheCurrentValue.Equals(input.IndexCacheCurrentValue)
                ) && 
                (
                    this.DataFileCacheSetting == input.DataFileCacheSetting ||
                    this.DataFileCacheSetting.Equals(input.DataFileCacheSetting)
                ) && 
                (
                    this.DataFileCacheCurrentValue == input.DataFileCacheCurrentValue ||
                    this.DataFileCacheCurrentValue.Equals(input.DataFileCacheCurrentValue)
                ) && 
                (
                    this.DataCacheSetting == input.DataCacheSetting ||
                    this.DataCacheSetting.Equals(input.DataCacheSetting)
                ) && 
                (
                    this.DataCacheCurrentValue == input.DataCacheCurrentValue ||
                    this.DataCacheCurrentValue.Equals(input.DataCacheCurrentValue)
                ) && 
                (
                    this.IndexPageSetting == input.IndexPageSetting ||
                    this.IndexPageSetting.Equals(input.IndexPageSetting)
                ) && 
                (
                    this.IndexPageCurrentValue == input.IndexPageCurrentValue ||
                    this.IndexPageCurrentValue.Equals(input.IndexPageCurrentValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CacheMemoryLocking.GetHashCode();
                hashCode = (hashCode * 59) + this.IndexCacheSetting.GetHashCode();
                hashCode = (hashCode * 59) + this.IndexCacheCurrentValue.GetHashCode();
                hashCode = (hashCode * 59) + this.DataFileCacheSetting.GetHashCode();
                hashCode = (hashCode * 59) + this.DataFileCacheCurrentValue.GetHashCode();
                hashCode = (hashCode * 59) + this.DataCacheSetting.GetHashCode();
                hashCode = (hashCode * 59) + this.DataCacheCurrentValue.GetHashCode();
                hashCode = (hashCode * 59) + this.IndexPageSetting.GetHashCode();
                hashCode = (hashCode * 59) + this.IndexPageCurrentValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
