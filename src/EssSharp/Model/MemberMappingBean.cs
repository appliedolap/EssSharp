/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// MemberMappingBean
    /// </summary>
    [DataContract(Name = "MemberMappingBean")]
    public partial class MemberMappingBean : IEquatable<MemberMappingBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberMappingBean" /> class.
        /// </summary>
        /// <param name="sourceMember">sourceMember.</param>
        /// <param name="targetMember">targetMember.</param>
        public MemberMappingBean(string sourceMember = default(string), string targetMember = default(string))
        {
            this.SourceMember = sourceMember;
            this.TargetMember = targetMember;
        }

        /// <summary>
        /// Gets or Sets SourceMember
        /// </summary>
        [DataMember(Name = "sourceMember", EmitDefaultValue = false)]
        public string SourceMember { get; set; }

        /// <summary>
        /// Gets or Sets TargetMember
        /// </summary>
        [DataMember(Name = "targetMember", EmitDefaultValue = false)]
        public string TargetMember { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemberMappingBean {\n");
            sb.Append("  SourceMember: ").Append(SourceMember).Append("\n");
            sb.Append("  TargetMember: ").Append(TargetMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberMappingBean);
        }

        /// <summary>
        /// Returns true if MemberMappingBean instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberMappingBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberMappingBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceMember == input.SourceMember ||
                    (this.SourceMember != null &&
                    this.SourceMember.Equals(input.SourceMember))
                ) && 
                (
                    this.TargetMember == input.TargetMember ||
                    (this.TargetMember != null &&
                    this.TargetMember.Equals(input.TargetMember))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceMember != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMember.GetHashCode();
                }
                if (this.TargetMember != null)
                {
                    hashCode = (hashCode * 59) + this.TargetMember.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
