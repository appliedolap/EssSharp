/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ColumnMappingInfo
    /// </summary>
    [DataContract(Name = "ColumnMappingInfo")]
    public partial class ColumnMappingInfo : IEquatable<ColumnMappingInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DIMENSION for value: DIMENSION
            /// </summary>
            [EnumMember(Value = "DIMENSION")]
            DIMENSION = 1,

            /// <summary>
            /// Enum GENERATION for value: GENERATION
            /// </summary>
            [EnumMember(Value = "GENERATION")]
            GENERATION = 2,

            /// <summary>
            /// Enum LEVEL0 for value: LEVEL0
            /// </summary>
            [EnumMember(Value = "LEVEL0")]
            LEVEL0 = 3,

            /// <summary>
            /// Enum PARENTCHILD for value: PARENT_CHILD
            /// </summary>
            [EnumMember(Value = "PARENT_CHILD")]
            PARENTCHILD = 4

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnMappingInfo" /> class.
        /// </summary>
        /// <param name="dimension">dimension.</param>
        /// <param name="generation">generation.</param>
        /// <param name="level">level.</param>
        /// <param name="type">type.</param>
        /// <param name="generationNumber">generationNumber.</param>
        public ColumnMappingInfo(string dimension = default(string), string generation = default(string), string level = default(string), TypeEnum? type = default(TypeEnum?), int generationNumber = default(int))
        {
            this.Dimension = dimension;
            this.Generation = generation;
            this.Level = level;
            this.Type = type;
            this.GenerationNumber = generationNumber;
        }

        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name = "dimension", EmitDefaultValue = false)]
        public string Dimension { get; set; }

        /// <summary>
        /// Gets or Sets Generation
        /// </summary>
        [DataMember(Name = "generation", EmitDefaultValue = false)]
        public string Generation { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets GenerationNumber
        /// </summary>
        [DataMember(Name = "generationNumber", EmitDefaultValue = false)]
        public int GenerationNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColumnMappingInfo {\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  GenerationNumber: ").Append(GenerationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ColumnMappingInfo);
        }

        /// <summary>
        /// Returns true if ColumnMappingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ColumnMappingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ColumnMappingInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dimension == input.Dimension ||
                    (this.Dimension != null &&
                    this.Dimension.Equals(input.Dimension))
                ) && 
                (
                    this.Generation == input.Generation ||
                    (this.Generation != null &&
                    this.Generation.Equals(input.Generation))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.GenerationNumber == input.GenerationNumber ||
                    this.GenerationNumber.Equals(input.GenerationNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dimension != null)
                {
                    hashCode = (hashCode * 59) + this.Dimension.GetHashCode();
                }
                if (this.Generation != null)
                {
                    hashCode = (hashCode * 59) + this.Generation.GetHashCode();
                }
                if (this.Level != null)
                {
                    hashCode = (hashCode * 59) + this.Level.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.GenerationNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
