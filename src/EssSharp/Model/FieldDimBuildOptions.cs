/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// FieldDimBuildOptions
    /// </summary>
    [DataContract(Name = "FieldDimBuildOptions")]
    public partial class FieldDimBuildOptions : IEquatable<FieldDimBuildOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines GenerationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenerationTypeEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum PARENT for value: PARENT
            /// </summary>
            [EnumMember(Value = "PARENT")]
            PARENT = 2,

            /// <summary>
            /// Enum CHILD for value: CHILD
            /// </summary>
            [EnumMember(Value = "CHILD")]
            CHILD = 3,

            /// <summary>
            /// Enum GENERATION for value: GENERATION
            /// </summary>
            [EnumMember(Value = "GENERATION")]
            GENERATION = 4,

            /// <summary>
            /// Enum LEVEL for value: LEVEL
            /// </summary>
            [EnumMember(Value = "LEVEL")]
            LEVEL = 5,

            /// <summary>
            /// Enum ATTRIBUTEMEMBER for value: ATTRIBUTE_MEMBER
            /// </summary>
            [EnumMember(Value = "ATTRIBUTE_MEMBER")]
            ATTRIBUTEMEMBER = 6,

            /// <summary>
            /// Enum ALIAS for value: ALIAS
            /// </summary>
            [EnumMember(Value = "ALIAS")]
            ALIAS = 7,

            /// <summary>
            /// Enum PROPERTY for value: PROPERTY
            /// </summary>
            [EnumMember(Value = "PROPERTY")]
            PROPERTY = 8,

            /// <summary>
            /// Enum FORMULA for value: FORMULA
            /// </summary>
            [EnumMember(Value = "FORMULA")]
            FORMULA = 9,

            /// <summary>
            /// Enum MEMBERID for value: MEMBER_ID
            /// </summary>
            [EnumMember(Value = "MEMBER_ID")]
            MEMBERID = 10,

            /// <summary>
            /// Enum SOLVEORDER for value: SOLVE_ORDER
            /// </summary>
            [EnumMember(Value = "SOLVE_ORDER")]
            SOLVEORDER = 11,

            /// <summary>
            /// Enum UDA for value: UDA
            /// </summary>
            [EnumMember(Value = "UDA")]
            UDA = 12,

            /// <summary>
            /// Enum DUPGEN for value: DUPGEN
            /// </summary>
            [EnumMember(Value = "DUPGEN")]
            DUPGEN = 13,

            /// <summary>
            /// Enum DUPLEVEL for value: DUPLEVEL
            /// </summary>
            [EnumMember(Value = "DUPLEVEL")]
            DUPLEVEL = 14,

            /// <summary>
            /// Enum DUPGENALIAS for value: DUPGEN_ALIAS
            /// </summary>
            [EnumMember(Value = "DUPGEN_ALIAS")]
            DUPGENALIAS = 15,

            /// <summary>
            /// Enum DUPLEVELALIAS for value: DUPLEVEL_ALIAS
            /// </summary>
            [EnumMember(Value = "DUPLEVEL_ALIAS")]
            DUPLEVELALIAS = 16,

            /// <summary>
            /// Enum CURRENCYNAME for value: CURRENCY_NAME
            /// </summary>
            [EnumMember(Value = "CURRENCY_NAME")]
            CURRENCYNAME = 17,

            /// <summary>
            /// Enum CURRENCYCATEGORY for value: CURRENCY_CATEGORY
            /// </summary>
            [EnumMember(Value = "CURRENCY_CATEGORY")]
            CURRENCYCATEGORY = 18,

            /// <summary>
            /// Enum NUMTYPES for value: NUMTYPES
            /// </summary>
            [EnumMember(Value = "NUMTYPES")]
            NUMTYPES = 19,

            /// <summary>
            /// Enum ATTRIBUTEDIMLABEL for value: ATTRIBUTE_DIM_LABEL
            /// </summary>
            [EnumMember(Value = "ATTRIBUTE_DIM_LABEL")]
            ATTRIBUTEDIMLABEL = 20,

            /// <summary>
            /// Enum ATTRIBUTEPARENT for value: ATTRIBUTE_PARENT
            /// </summary>
            [EnumMember(Value = "ATTRIBUTE_PARENT")]
            ATTRIBUTEPARENT = 21,

            /// <summary>
            /// Enum DUPGENCAPTION for value: DUPGEN_CAPTION
            /// </summary>
            [EnumMember(Value = "DUPGEN_CAPTION")]
            DUPGENCAPTION = 22,

            /// <summary>
            /// Enum DUPLEVELCAPTION for value: DUPLEVEL_CAPTION
            /// </summary>
            [EnumMember(Value = "DUPLEVEL_CAPTION")]
            DUPLEVELCAPTION = 23,

            /// <summary>
            /// Enum AGGLEVELUSAGE for value: AGGLEVELUSAGE
            /// </summary>
            [EnumMember(Value = "AGGLEVELUSAGE")]
            AGGLEVELUSAGE = 24,

            /// <summary>
            /// Enum ATTRASSOCIATE for value: ATTR_ASSOCIATE
            /// </summary>
            [EnumMember(Value = "ATTR_ASSOCIATE")]
            ATTRASSOCIATE = 25,

            /// <summary>
            /// Enum REFMEMBER for value: REFMEMBER
            /// </summary>
            [EnumMember(Value = "REFMEMBER")]
            REFMEMBER = 26,

            /// <summary>
            /// Enum GENRIGHTJOIN for value: GEN_RIGHTJOIN
            /// </summary>
            [EnumMember(Value = "GEN_RIGHTJOIN")]
            GENRIGHTJOIN = 27,

            /// <summary>
            /// Enum COMMENT for value: COMMENT
            /// </summary>
            [EnumMember(Value = "COMMENT")]
            COMMENT = 28,

            /// <summary>
            /// Enum SHAREDGEN for value: SHARED_GEN
            /// </summary>
            [EnumMember(Value = "SHARED_GEN")]
            SHAREDGEN = 29,

            /// <summary>
            /// Enum GENNATUREJOIN for value: GEN_NATUREJOIN
            /// </summary>
            [EnumMember(Value = "GEN_NATUREJOIN")]
            GENNATUREJOIN = 30,

            /// <summary>
            /// Enum GENLEFTJOIN for value: GEN_LEFTJOIN
            /// </summary>
            [EnumMember(Value = "GEN_LEFTJOIN")]
            GENLEFTJOIN = 31,

            /// <summary>
            /// Enum GENOTLMBR for value: GEN_OTLMBR
            /// </summary>
            [EnumMember(Value = "GEN_OTLMBR")]
            GENOTLMBR = 32,

            /// <summary>
            /// Enum COMMENTEX for value: COMMENT_EX
            /// </summary>
            [EnumMember(Value = "COMMENT_EX")]
            COMMENTEX = 33,

            /// <summary>
            /// Enum REFMEMBERID for value: REFMEMBERID
            /// </summary>
            [EnumMember(Value = "REFMEMBERID")]
            REFMEMBERID = 34,

            /// <summary>
            /// Enum SMARTLISTID for value: SMARTLISTID
            /// </summary>
            [EnumMember(Value = "SMARTLISTID")]
            SMARTLISTID = 35,

            /// <summary>
            /// Enum SMARTLISTTEXT for value: SMARTLISTTEXT
            /// </summary>
            [EnumMember(Value = "SMARTLISTTEXT")]
            SMARTLISTTEXT = 36,

            /// <summary>
            /// Enum FORMATSTRING for value: FORMATSTRING
            /// </summary>
            [EnumMember(Value = "FORMATSTRING")]
            FORMATSTRING = 37,

            /// <summary>
            /// Enum PROTOTYPE for value: PROTOTYPE
            /// </summary>
            [EnumMember(Value = "PROTOTYPE")]
            PROTOTYPE = 38

        }


        /// <summary>
        /// Gets or Sets GenerationType
        /// </summary>
        [DataMember(Name = "generationType", EmitDefaultValue = false)]
        public GenerationTypeEnum? GenerationType { get; set; }
        /// <summary>
        /// Defines GenerationProperty
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenerationPropertyEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum CONSOLIDATIONTYPE for value: CONSOLIDATIONTYPE
            /// </summary>
            [EnumMember(Value = "CONSOLIDATIONTYPE")]
            CONSOLIDATIONTYPE = 2,

            /// <summary>
            /// Enum STORAGETYPE for value: STORAGETYPE
            /// </summary>
            [EnumMember(Value = "STORAGETYPE")]
            STORAGETYPE = 3,

            /// <summary>
            /// Enum TIMEBALANCE for value: TIMEBALANCE
            /// </summary>
            [EnumMember(Value = "TIMEBALANCE")]
            TIMEBALANCE = 4,

            /// <summary>
            /// Enum SKIP for value: SKIP
            /// </summary>
            [EnumMember(Value = "SKIP")]
            SKIP = 5,

            /// <summary>
            /// Enum VARIANCEREPORT for value: VARIANCEREPORT
            /// </summary>
            [EnumMember(Value = "VARIANCEREPORT")]
            VARIANCEREPORT = 6,

            /// <summary>
            /// Enum TWOPASSCALC for value: TWOPASSCALC
            /// </summary>
            [EnumMember(Value = "TWOPASSCALC")]
            TWOPASSCALC = 7,

            /// <summary>
            /// Enum HIERARCHYTYPE for value: HIERARCHYTYPE
            /// </summary>
            [EnumMember(Value = "HIERARCHYTYPE")]
            HIERARCHYTYPE = 8

        }


        /// <summary>
        /// Gets or Sets GenerationProperty
        /// </summary>
        [DataMember(Name = "generationProperty", EmitDefaultValue = false)]
        public GenerationPropertyEnum? GenerationProperty { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldDimBuildOptions" /> class.
        /// </summary>
        /// <param name="parent">parent.</param>
        /// <param name="generationType">generationType.</param>
        /// <param name="refer">refer.</param>
        /// <param name="referIndex">referIndex.</param>
        /// <param name="shared">shared.</param>
        /// <param name="attributeBuildProperties">attributeBuildProperties.</param>
        /// <param name="dimension">dimension.</param>
        /// <param name="attributeDimension">attributeDimension.</param>
        /// <param name="alias">alias.</param>
        /// <param name="endIndepColumns">endIndepColumns.</param>
        /// <param name="startIndepColumns">startIndepColumns.</param>
        /// <param name="generationProperty">generationProperty.</param>
        /// <param name="generation">generation.</param>
        /// <param name="ignore">ignore.</param>
        /// <param name="staticField">staticField.</param>
        public FieldDimBuildOptions(int parent = default(int), GenerationTypeEnum? generationType = default(GenerationTypeEnum?), int refer = default(int), int referIndex = default(int), int shared = default(int), AttributeBuildProperties attributeBuildProperties = default(AttributeBuildProperties), string dimension = default(string), string attributeDimension = default(string), string alias = default(string), List<int> endIndepColumns = default(List<int>), List<int> startIndepColumns = default(List<int>), GenerationPropertyEnum? generationProperty = default(GenerationPropertyEnum?), int generation = default(int), bool ignore = default(bool), bool staticField = default(bool))
        {
            this.Parent = parent;
            this.GenerationType = generationType;
            this.Refer = refer;
            this.ReferIndex = referIndex;
            this.Shared = shared;
            this.AttributeBuildProperties = attributeBuildProperties;
            this.Dimension = dimension;
            this.AttributeDimension = attributeDimension;
            this.Alias = alias;
            this.EndIndepColumns = endIndepColumns;
            this.StartIndepColumns = startIndepColumns;
            this.GenerationProperty = generationProperty;
            this.Generation = generation;
            this.Ignore = ignore;
            this.StaticField = staticField;
        }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public int Parent { get; set; }

        /// <summary>
        /// Gets or Sets Refer
        /// </summary>
        [DataMember(Name = "refer", EmitDefaultValue = false)]
        public int Refer { get; set; }

        /// <summary>
        /// Gets or Sets ReferIndex
        /// </summary>
        [DataMember(Name = "referIndex", EmitDefaultValue = false)]
        public int ReferIndex { get; set; }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", EmitDefaultValue = false)]
        public int Shared { get; set; }

        /// <summary>
        /// Gets or Sets AttributeBuildProperties
        /// </summary>
        [DataMember(Name = "attributeBuildProperties", EmitDefaultValue = false)]
        public AttributeBuildProperties AttributeBuildProperties { get; set; }

        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name = "dimension", EmitDefaultValue = false)]
        public string Dimension { get; set; }

        /// <summary>
        /// Gets or Sets AttributeDimension
        /// </summary>
        [DataMember(Name = "attributeDimension", EmitDefaultValue = false)]
        public string AttributeDimension { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets EndIndepColumns
        /// </summary>
        [DataMember(Name = "endIndepColumns", EmitDefaultValue = false)]
        public List<int> EndIndepColumns { get; set; }

        /// <summary>
        /// Gets or Sets StartIndepColumns
        /// </summary>
        [DataMember(Name = "startIndepColumns", EmitDefaultValue = false)]
        public List<int> StartIndepColumns { get; set; }

        /// <summary>
        /// Gets or Sets Generation
        /// </summary>
        [DataMember(Name = "generation", EmitDefaultValue = false)]
        public int Generation { get; set; }

        /// <summary>
        /// Gets or Sets Ignore
        /// </summary>
        [DataMember(Name = "ignore", EmitDefaultValue = true)]
        public bool Ignore { get; set; }

        /// <summary>
        /// Gets or Sets StaticField
        /// </summary>
        [DataMember(Name = "staticField", EmitDefaultValue = true)]
        public bool StaticField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldDimBuildOptions {\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  GenerationType: ").Append(GenerationType).Append("\n");
            sb.Append("  Refer: ").Append(Refer).Append("\n");
            sb.Append("  ReferIndex: ").Append(ReferIndex).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  AttributeBuildProperties: ").Append(AttributeBuildProperties).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  AttributeDimension: ").Append(AttributeDimension).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  EndIndepColumns: ").Append(EndIndepColumns).Append("\n");
            sb.Append("  StartIndepColumns: ").Append(StartIndepColumns).Append("\n");
            sb.Append("  GenerationProperty: ").Append(GenerationProperty).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  Ignore: ").Append(Ignore).Append("\n");
            sb.Append("  StaticField: ").Append(StaticField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldDimBuildOptions);
        }

        /// <summary>
        /// Returns true if FieldDimBuildOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldDimBuildOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldDimBuildOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Parent == input.Parent ||
                    this.Parent.Equals(input.Parent)
                ) && 
                (
                    this.GenerationType == input.GenerationType ||
                    this.GenerationType.Equals(input.GenerationType)
                ) && 
                (
                    this.Refer == input.Refer ||
                    this.Refer.Equals(input.Refer)
                ) && 
                (
                    this.ReferIndex == input.ReferIndex ||
                    this.ReferIndex.Equals(input.ReferIndex)
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared.Equals(input.Shared)
                ) && 
                (
                    this.AttributeBuildProperties == input.AttributeBuildProperties ||
                    (this.AttributeBuildProperties != null &&
                    this.AttributeBuildProperties.Equals(input.AttributeBuildProperties))
                ) && 
                (
                    this.Dimension == input.Dimension ||
                    (this.Dimension != null &&
                    this.Dimension.Equals(input.Dimension))
                ) && 
                (
                    this.AttributeDimension == input.AttributeDimension ||
                    (this.AttributeDimension != null &&
                    this.AttributeDimension.Equals(input.AttributeDimension))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.EndIndepColumns == input.EndIndepColumns ||
                    this.EndIndepColumns != null &&
                    input.EndIndepColumns != null &&
                    this.EndIndepColumns.SequenceEqual(input.EndIndepColumns)
                ) && 
                (
                    this.StartIndepColumns == input.StartIndepColumns ||
                    this.StartIndepColumns != null &&
                    input.StartIndepColumns != null &&
                    this.StartIndepColumns.SequenceEqual(input.StartIndepColumns)
                ) && 
                (
                    this.GenerationProperty == input.GenerationProperty ||
                    this.GenerationProperty.Equals(input.GenerationProperty)
                ) && 
                (
                    this.Generation == input.Generation ||
                    this.Generation.Equals(input.Generation)
                ) && 
                (
                    this.Ignore == input.Ignore ||
                    this.Ignore.Equals(input.Ignore)
                ) && 
                (
                    this.StaticField == input.StaticField ||
                    this.StaticField.Equals(input.StaticField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                hashCode = (hashCode * 59) + this.GenerationType.GetHashCode();
                hashCode = (hashCode * 59) + this.Refer.GetHashCode();
                hashCode = (hashCode * 59) + this.ReferIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                if (this.AttributeBuildProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeBuildProperties.GetHashCode();
                }
                if (this.Dimension != null)
                {
                    hashCode = (hashCode * 59) + this.Dimension.GetHashCode();
                }
                if (this.AttributeDimension != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeDimension.GetHashCode();
                }
                if (this.Alias != null)
                {
                    hashCode = (hashCode * 59) + this.Alias.GetHashCode();
                }
                if (this.EndIndepColumns != null)
                {
                    hashCode = (hashCode * 59) + this.EndIndepColumns.GetHashCode();
                }
                if (this.StartIndepColumns != null)
                {
                    hashCode = (hashCode * 59) + this.StartIndepColumns.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GenerationProperty.GetHashCode();
                hashCode = (hashCode * 59) + this.Generation.GetHashCode();
                hashCode = (hashCode * 59) + this.Ignore.GetHashCode();
                hashCode = (hashCode * 59) + this.StaticField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
