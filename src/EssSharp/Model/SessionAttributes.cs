/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// SessionAttributes
    /// </summary>
    [DataContract(Name = "SessionAttributes")]
    public partial class SessionAttributes : IEquatable<SessionAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionAttributes" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="loginTimeInSeconds">loginTimeInSeconds.</param>
        /// <param name="application">application.</param>
        /// <param name="database">database.</param>
        /// <param name="dbConnectTimeInSeconds">dbConnectTimeInSeconds.</param>
        /// <param name="request">request.</param>
        /// <param name="requestTimeInSeconds">requestTimeInSeconds.</param>
        /// <param name="connectionSource">connectionSource.</param>
        /// <param name="requestState">requestState.</param>
        public SessionAttributes(string userId = default(string), string sessionId = default(string), string loginTimeInSeconds = default(string), string application = default(string), string database = default(string), string dbConnectTimeInSeconds = default(string), string request = default(string), string requestTimeInSeconds = default(string), string connectionSource = default(string), string requestState = default(string))
        {
            this.UserId = userId;
            this.SessionId = sessionId;
            this.LoginTimeInSeconds = loginTimeInSeconds;
            this.Application = application;
            this.Database = database;
            this.DbConnectTimeInSeconds = dbConnectTimeInSeconds;
            this.Request = request;
            this.RequestTimeInSeconds = requestTimeInSeconds;
            this.ConnectionSource = connectionSource;
            this.RequestState = requestState;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "sessionId", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets LoginTimeInSeconds
        /// </summary>
        [DataMember(Name = "loginTimeInSeconds", EmitDefaultValue = false)]
        public string LoginTimeInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Database
        /// </summary>
        [DataMember(Name = "database", EmitDefaultValue = false)]
        public string Database { get; set; }

        /// <summary>
        /// Gets or Sets DbConnectTimeInSeconds
        /// </summary>
        [DataMember(Name = "dbConnectTimeInSeconds", EmitDefaultValue = false)]
        public string DbConnectTimeInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name = "request", EmitDefaultValue = false)]
        public string Request { get; set; }

        /// <summary>
        /// Gets or Sets RequestTimeInSeconds
        /// </summary>
        [DataMember(Name = "requestTimeInSeconds", EmitDefaultValue = false)]
        public string RequestTimeInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionSource
        /// </summary>
        [DataMember(Name = "connectionSource", EmitDefaultValue = false)]
        public string ConnectionSource { get; set; }

        /// <summary>
        /// Gets or Sets RequestState
        /// </summary>
        [DataMember(Name = "requestState", EmitDefaultValue = false)]
        public string RequestState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionAttributes {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  LoginTimeInSeconds: ").Append(LoginTimeInSeconds).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  DbConnectTimeInSeconds: ").Append(DbConnectTimeInSeconds).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  RequestTimeInSeconds: ").Append(RequestTimeInSeconds).Append("\n");
            sb.Append("  ConnectionSource: ").Append(ConnectionSource).Append("\n");
            sb.Append("  RequestState: ").Append(RequestState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionAttributes);
        }

        /// <summary>
        /// Returns true if SessionAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.LoginTimeInSeconds == input.LoginTimeInSeconds ||
                    (this.LoginTimeInSeconds != null &&
                    this.LoginTimeInSeconds.Equals(input.LoginTimeInSeconds))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Database == input.Database ||
                    (this.Database != null &&
                    this.Database.Equals(input.Database))
                ) && 
                (
                    this.DbConnectTimeInSeconds == input.DbConnectTimeInSeconds ||
                    (this.DbConnectTimeInSeconds != null &&
                    this.DbConnectTimeInSeconds.Equals(input.DbConnectTimeInSeconds))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.RequestTimeInSeconds == input.RequestTimeInSeconds ||
                    (this.RequestTimeInSeconds != null &&
                    this.RequestTimeInSeconds.Equals(input.RequestTimeInSeconds))
                ) && 
                (
                    this.ConnectionSource == input.ConnectionSource ||
                    (this.ConnectionSource != null &&
                    this.ConnectionSource.Equals(input.ConnectionSource))
                ) && 
                (
                    this.RequestState == input.RequestState ||
                    (this.RequestState != null &&
                    this.RequestState.Equals(input.RequestState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                if (this.LoginTimeInSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.LoginTimeInSeconds.GetHashCode();
                }
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Database != null)
                {
                    hashCode = (hashCode * 59) + this.Database.GetHashCode();
                }
                if (this.DbConnectTimeInSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.DbConnectTimeInSeconds.GetHashCode();
                }
                if (this.Request != null)
                {
                    hashCode = (hashCode * 59) + this.Request.GetHashCode();
                }
                if (this.RequestTimeInSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.RequestTimeInSeconds.GetHashCode();
                }
                if (this.ConnectionSource != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionSource.GetHashCode();
                }
                if (this.RequestState != null)
                {
                    hashCode = (hashCode * 59) + this.RequestState.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
