/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Dimension
    /// </summary>
    [DataContract(Name = "Dimension")]
    public partial class Dimension : IEquatable<Dimension>, IValidatableObject
    {
        /// <summary>
        /// Defines AddMemberOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddMemberOptionEnum
        {
            /// <summary>
            /// Enum GENERATION for value: GENERATION
            /// </summary>
            [EnumMember(Value = "GENERATION")]
            GENERATION = 1,

            /// <summary>
            /// Enum SIBLINGLOWESTLEVEL for value: SIBLING_LOWEST_LEVEL
            /// </summary>
            [EnumMember(Value = "SIBLING_LOWEST_LEVEL")]
            SIBLINGLOWESTLEVEL = 2,

            /// <summary>
            /// Enum CHILD for value: CHILD
            /// </summary>
            [EnumMember(Value = "CHILD")]
            CHILD = 3,

            /// <summary>
            /// Enum SIBLINGMATCHINGSTRING for value: SIBLING_MATCHING_STRING
            /// </summary>
            [EnumMember(Value = "SIBLING_MATCHING_STRING")]
            SIBLINGMATCHINGSTRING = 4,

            /// <summary>
            /// Enum LEVEL for value: LEVEL
            /// </summary>
            [EnumMember(Value = "LEVEL")]
            LEVEL = 5,

            /// <summary>
            /// Enum PARENTCHILD for value: PARENT_CHILD
            /// </summary>
            [EnumMember(Value = "PARENT_CHILD")]
            PARENTCHILD = 6,

            /// <summary>
            /// Enum GENNULLS for value: GEN_NULLS
            /// </summary>
            [EnumMember(Value = "GEN_NULLS")]
            GENNULLS = 7,

            /// <summary>
            /// Enum LEVELNULLS for value: LEVEL_NULLS
            /// </summary>
            [EnumMember(Value = "LEVEL_NULLS")]
            LEVELNULLS = 8

        }


        /// <summary>
        /// Gets or Sets AddMemberOption
        /// </summary>
        [DataMember(Name = "addMemberOption", EmitDefaultValue = false)]
        public AddMemberOptionEnum? AddMemberOption { get; set; }
        /// <summary>
        /// Defines ConfigOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfigOptionEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum DENSE for value: DENSE
            /// </summary>
            [EnumMember(Value = "DENSE")]
            DENSE = 2,

            /// <summary>
            /// Enum SPARSE for value: SPARSE
            /// </summary>
            [EnumMember(Value = "SPARSE")]
            SPARSE = 3

        }


        /// <summary>
        /// Gets or Sets ConfigOption
        /// </summary>
        [DataMember(Name = "configOption", EmitDefaultValue = false)]
        public ConfigOptionEnum? ConfigOption { get; set; }
        /// <summary>
        /// Defines Unique
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UniqueEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum UNIQUE for value: UNIQUE
            /// </summary>
            [EnumMember(Value = "UNIQUE")]
            UNIQUE = 2,

            /// <summary>
            /// Enum DUPLICATE for value: DUPLICATE
            /// </summary>
            [EnumMember(Value = "DUPLICATE")]
            DUPLICATE = 3,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 4

        }


        /// <summary>
        /// Gets or Sets Unique
        /// </summary>
        [DataMember(Name = "unique", EmitDefaultValue = false)]
        public UniqueEnum? Unique { get; set; }
        /// <summary>
        /// Defines HierarchyType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HierarchyTypeEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum MULTIPLE for value: MULTIPLE
            /// </summary>
            [EnumMember(Value = "MULTIPLE")]
            MULTIPLE = 2,

            /// <summary>
            /// Enum STORED for value: STORED
            /// </summary>
            [EnumMember(Value = "STORED")]
            STORED = 3,

            /// <summary>
            /// Enum DYNAMIC for value: DYNAMIC
            /// </summary>
            [EnumMember(Value = "DYNAMIC")]
            DYNAMIC = 4

        }


        /// <summary>
        /// Gets or Sets HierarchyType
        /// </summary>
        [DataMember(Name = "hierarchyType", EmitDefaultValue = false)]
        public HierarchyTypeEnum? HierarchyType { get; set; }
        /// <summary>
        /// Defines SortOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortOptionEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum ASCENDING for value: ASCENDING
            /// </summary>
            [EnumMember(Value = "ASCENDING")]
            ASCENDING = 2,

            /// <summary>
            /// Enum DESCENDING for value: DESCENDING
            /// </summary>
            [EnumMember(Value = "DESCENDING")]
            DESCENDING = 3

        }


        /// <summary>
        /// Gets or Sets SortOption
        /// </summary>
        [DataMember(Name = "sortOption", EmitDefaultValue = false)]
        public SortOptionEnum? SortOption { get; set; }
        /// <summary>
        /// Defines StorageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageTypeEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum STORE for value: STORE
            /// </summary>
            [EnumMember(Value = "STORE")]
            STORE = 2,

            /// <summary>
            /// Enum NEVERSHARE for value: NEVER_SHARE
            /// </summary>
            [EnumMember(Value = "NEVER_SHARE")]
            NEVERSHARE = 3,

            /// <summary>
            /// Enum LABELONLY for value: LABEL_ONLY
            /// </summary>
            [EnumMember(Value = "LABEL_ONLY")]
            LABELONLY = 4,

            /// <summary>
            /// Enum DYNAMICCALCSTORE for value: DYNAMIC_CALC_STORE
            /// </summary>
            [EnumMember(Value = "DYNAMIC_CALC_STORE")]
            DYNAMICCALCSTORE = 5,

            /// <summary>
            /// Enum DYNAMICCALC for value: DYNAMIC_CALC
            /// </summary>
            [EnumMember(Value = "DYNAMIC_CALC")]
            DYNAMICCALC = 6

        }


        /// <summary>
        /// Gets or Sets StorageType
        /// </summary>
        [DataMember(Name = "storageType", EmitDefaultValue = false)]
        public StorageTypeEnum? StorageType { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 2,

            /// <summary>
            /// Enum ACCOUNTS for value: ACCOUNTS
            /// </summary>
            [EnumMember(Value = "ACCOUNTS")]
            ACCOUNTS = 3,

            /// <summary>
            /// Enum TIME for value: TIME
            /// </summary>
            [EnumMember(Value = "TIME")]
            TIME = 4,

            /// <summary>
            /// Enum COUNTRY for value: COUNTRY
            /// </summary>
            [EnumMember(Value = "COUNTRY")]
            COUNTRY = 5,

            /// <summary>
            /// Enum ATTRIBUTES for value: ATTRIBUTES
            /// </summary>
            [EnumMember(Value = "ATTRIBUTES")]
            ATTRIBUTES = 6

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines UpdateOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpdateOptionEnum
        {
            /// <summary>
            /// Enum MERGE for value: MERGE
            /// </summary>
            [EnumMember(Value = "MERGE")]
            MERGE = 1,

            /// <summary>
            /// Enum REMOVEUNSPECIFIED for value: REMOVE_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "REMOVE_UNSPECIFIED")]
            REMOVEUNSPECIFIED = 2,

            /// <summary>
            /// Enum RESETDIMENSION for value: RESET_DIMENSION
            /// </summary>
            [EnumMember(Value = "RESET_DIMENSION")]
            RESETDIMENSION = 3

        }


        /// <summary>
        /// Gets or Sets UpdateOption
        /// </summary>
        [DataMember(Name = "updateOption", EmitDefaultValue = false)]
        public UpdateOptionEnum? UpdateOption { get; set; }
        /// <summary>
        /// Defines AllowMoves
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowMovesEnum
        {
            /// <summary>
            /// Enum NOTOK for value: NOTOK
            /// </summary>
            [EnumMember(Value = "NOTOK")]
            NOTOK = 1,

            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 2,

            /// <summary>
            /// Enum IGNORE for value: IGNORE
            /// </summary>
            [EnumMember(Value = "IGNORE")]
            IGNORE = 3,

            /// <summary>
            /// Enum GEN2 for value: GEN2
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2 = 4,

            /// <summary>
            /// Enum NOTGEN2 for value: NOTGEN2
            /// </summary>
            [EnumMember(Value = "NOTGEN2")]
            NOTGEN2 = 5

        }


        /// <summary>
        /// Gets or Sets AllowMoves
        /// </summary>
        [DataMember(Name = "allowMoves", EmitDefaultValue = false)]
        public AllowMovesEnum? AllowMoves { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimension" /> class.
        /// </summary>
        /// <param name="generations">generations.</param>
        /// <param name="levels">levels.</param>
        /// <param name="allowassociationChanges">allowassociationChanges.</param>
        /// <param name="allowFormulaChanges">allowFormulaChanges.</param>
        /// <param name="allowPropertyChanges">allowPropertyChanges.</param>
        /// <param name="allowUDAChanges">allowUDAChanges.</param>
        /// <param name="measureOptions">measureOptions.</param>
        /// <param name="aggregateLevelUsage">aggregateLevelUsage.</param>
        /// <param name="addMemberOption">addMemberOption.</param>
        /// <param name="attributeOptions">attributeOptions.</param>
        /// <param name="configOption">configOption.</param>
        /// <param name="unique">unique.</param>
        /// <param name="hierarchyType">hierarchyType.</param>
        /// <param name="sortOption">sortOption.</param>
        /// <param name="storageType">storageType.</param>
        /// <param name="type">type.</param>
        /// <param name="updateOption">updateOption.</param>
        /// <param name="allowMoves">allowMoves.</param>
        /// <param name="solveOrder">solveOrder.</param>
        /// <param name="createAttributeMembers">createAttributeMembers.</param>
        /// <param name="share">share.</param>
        /// <param name="incrementalSort">incrementalSort.</param>
        /// <param name="autoFixSharedMember">autoFixSharedMember.</param>
        /// <param name="flexible">flexible.</param>
        /// <param name="memberName">memberName.</param>
        /// <param name="name">name.</param>
        /// <param name="dimensionSolveOrder">dimensionSolveOrder.</param>
        /// <param name="added">added.</param>
        public Dimension(List<Level> generations = default(List<Level>), List<Level> levels = default(List<Level>), bool allowassociationChanges = default(bool), bool allowFormulaChanges = default(bool), bool allowPropertyChanges = default(bool), bool allowUDAChanges = default(bool), MeasureOptions measureOptions = default(MeasureOptions), int aggregateLevelUsage = default(int), AddMemberOptionEnum? addMemberOption = default(AddMemberOptionEnum?), AttributeOptions attributeOptions = default(AttributeOptions), ConfigOptionEnum? configOption = default(ConfigOptionEnum?), UniqueEnum? unique = default(UniqueEnum?), HierarchyTypeEnum? hierarchyType = default(HierarchyTypeEnum?), SortOptionEnum? sortOption = default(SortOptionEnum?), StorageTypeEnum? storageType = default(StorageTypeEnum?), TypeEnum? type = default(TypeEnum?), UpdateOptionEnum? updateOption = default(UpdateOptionEnum?), AllowMovesEnum? allowMoves = default(AllowMovesEnum?), int solveOrder = default(int), bool createAttributeMembers = default(bool), bool share = default(bool), bool incrementalSort = default(bool), bool autoFixSharedMember = default(bool), bool flexible = default(bool), string memberName = default(string), string name = default(string), int dimensionSolveOrder = default(int), bool added = default(bool))
        {
            this.Generations = generations;
            this.Levels = levels;
            this.AllowassociationChanges = allowassociationChanges;
            this.AllowFormulaChanges = allowFormulaChanges;
            this.AllowPropertyChanges = allowPropertyChanges;
            this.AllowUDAChanges = allowUDAChanges;
            this.MeasureOptions = measureOptions;
            this.AggregateLevelUsage = aggregateLevelUsage;
            this.AddMemberOption = addMemberOption;
            this.AttributeOptions = attributeOptions;
            this.ConfigOption = configOption;
            this.Unique = unique;
            this.HierarchyType = hierarchyType;
            this.SortOption = sortOption;
            this.StorageType = storageType;
            this.Type = type;
            this.UpdateOption = updateOption;
            this.AllowMoves = allowMoves;
            this.SolveOrder = solveOrder;
            this.CreateAttributeMembers = createAttributeMembers;
            this.Share = share;
            this.IncrementalSort = incrementalSort;
            this.AutoFixSharedMember = autoFixSharedMember;
            this.Flexible = flexible;
            this.MemberName = memberName;
            this.Name = name;
            this.DimensionSolveOrder = dimensionSolveOrder;
            this.Added = added;
        }

        /// <summary>
        /// Gets or Sets Generations
        /// </summary>
        [DataMember(Name = "generations", EmitDefaultValue = false)]
        public List<Level> Generations { get; set; }

        /// <summary>
        /// Gets or Sets Levels
        /// </summary>
        [DataMember(Name = "levels", EmitDefaultValue = false)]
        public List<Level> Levels { get; set; }

        /// <summary>
        /// Gets or Sets AllowassociationChanges
        /// </summary>
        [DataMember(Name = "allowassociationChanges", EmitDefaultValue = true)]
        public bool AllowassociationChanges { get; set; }

        /// <summary>
        /// Gets or Sets AllowFormulaChanges
        /// </summary>
        [DataMember(Name = "allowFormulaChanges", EmitDefaultValue = true)]
        public bool AllowFormulaChanges { get; set; }

        /// <summary>
        /// Gets or Sets AllowPropertyChanges
        /// </summary>
        [DataMember(Name = "allowPropertyChanges", EmitDefaultValue = true)]
        public bool AllowPropertyChanges { get; set; }

        /// <summary>
        /// Gets or Sets AllowUDAChanges
        /// </summary>
        [DataMember(Name = "allowUDAChanges", EmitDefaultValue = true)]
        public bool AllowUDAChanges { get; set; }

        /// <summary>
        /// Gets or Sets MeasureOptions
        /// </summary>
        [DataMember(Name = "measureOptions", EmitDefaultValue = false)]
        public MeasureOptions MeasureOptions { get; set; }

        /// <summary>
        /// Gets or Sets AggregateLevelUsage
        /// </summary>
        [DataMember(Name = "aggregateLevelUsage", EmitDefaultValue = false)]
        public int AggregateLevelUsage { get; set; }

        /// <summary>
        /// Gets or Sets AttributeOptions
        /// </summary>
        [DataMember(Name = "attributeOptions", EmitDefaultValue = false)]
        public AttributeOptions AttributeOptions { get; set; }

        /// <summary>
        /// Gets or Sets SolveOrder
        /// </summary>
        [DataMember(Name = "solveOrder", EmitDefaultValue = false)]
        public int SolveOrder { get; set; }

        /// <summary>
        /// Gets or Sets CreateAttributeMembers
        /// </summary>
        [DataMember(Name = "createAttributeMembers", EmitDefaultValue = true)]
        public bool CreateAttributeMembers { get; set; }

        /// <summary>
        /// Gets or Sets Share
        /// </summary>
        [DataMember(Name = "share", EmitDefaultValue = true)]
        public bool Share { get; set; }

        /// <summary>
        /// Gets or Sets IncrementalSort
        /// </summary>
        [DataMember(Name = "incrementalSort", EmitDefaultValue = true)]
        public bool IncrementalSort { get; set; }

        /// <summary>
        /// Gets or Sets AutoFixSharedMember
        /// </summary>
        [DataMember(Name = "autoFixSharedMember", EmitDefaultValue = true)]
        public bool AutoFixSharedMember { get; set; }

        /// <summary>
        /// Gets or Sets Flexible
        /// </summary>
        [DataMember(Name = "flexible", EmitDefaultValue = true)]
        public bool Flexible { get; set; }

        /// <summary>
        /// Gets or Sets MemberName
        /// </summary>
        [DataMember(Name = "memberName", EmitDefaultValue = false)]
        public string MemberName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DimensionSolveOrder
        /// </summary>
        [DataMember(Name = "dimensionSolveOrder", EmitDefaultValue = false)]
        public int DimensionSolveOrder { get; set; }

        /// <summary>
        /// Gets or Sets Added
        /// </summary>
        [DataMember(Name = "added", EmitDefaultValue = true)]
        public bool Added { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dimension {\n");
            sb.Append("  Generations: ").Append(Generations).Append("\n");
            sb.Append("  Levels: ").Append(Levels).Append("\n");
            sb.Append("  AllowassociationChanges: ").Append(AllowassociationChanges).Append("\n");
            sb.Append("  AllowFormulaChanges: ").Append(AllowFormulaChanges).Append("\n");
            sb.Append("  AllowPropertyChanges: ").Append(AllowPropertyChanges).Append("\n");
            sb.Append("  AllowUDAChanges: ").Append(AllowUDAChanges).Append("\n");
            sb.Append("  MeasureOptions: ").Append(MeasureOptions).Append("\n");
            sb.Append("  AggregateLevelUsage: ").Append(AggregateLevelUsage).Append("\n");
            sb.Append("  AddMemberOption: ").Append(AddMemberOption).Append("\n");
            sb.Append("  AttributeOptions: ").Append(AttributeOptions).Append("\n");
            sb.Append("  ConfigOption: ").Append(ConfigOption).Append("\n");
            sb.Append("  Unique: ").Append(Unique).Append("\n");
            sb.Append("  HierarchyType: ").Append(HierarchyType).Append("\n");
            sb.Append("  SortOption: ").Append(SortOption).Append("\n");
            sb.Append("  StorageType: ").Append(StorageType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdateOption: ").Append(UpdateOption).Append("\n");
            sb.Append("  AllowMoves: ").Append(AllowMoves).Append("\n");
            sb.Append("  SolveOrder: ").Append(SolveOrder).Append("\n");
            sb.Append("  CreateAttributeMembers: ").Append(CreateAttributeMembers).Append("\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  IncrementalSort: ").Append(IncrementalSort).Append("\n");
            sb.Append("  AutoFixSharedMember: ").Append(AutoFixSharedMember).Append("\n");
            sb.Append("  Flexible: ").Append(Flexible).Append("\n");
            sb.Append("  MemberName: ").Append(MemberName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DimensionSolveOrder: ").Append(DimensionSolveOrder).Append("\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dimension);
        }

        /// <summary>
        /// Returns true if Dimension instances are equal
        /// </summary>
        /// <param name="input">Instance of Dimension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dimension input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Generations == input.Generations ||
                    this.Generations != null &&
                    input.Generations != null &&
                    this.Generations.SequenceEqual(input.Generations)
                ) && 
                (
                    this.Levels == input.Levels ||
                    this.Levels != null &&
                    input.Levels != null &&
                    this.Levels.SequenceEqual(input.Levels)
                ) && 
                (
                    this.AllowassociationChanges == input.AllowassociationChanges ||
                    this.AllowassociationChanges.Equals(input.AllowassociationChanges)
                ) && 
                (
                    this.AllowFormulaChanges == input.AllowFormulaChanges ||
                    this.AllowFormulaChanges.Equals(input.AllowFormulaChanges)
                ) && 
                (
                    this.AllowPropertyChanges == input.AllowPropertyChanges ||
                    this.AllowPropertyChanges.Equals(input.AllowPropertyChanges)
                ) && 
                (
                    this.AllowUDAChanges == input.AllowUDAChanges ||
                    this.AllowUDAChanges.Equals(input.AllowUDAChanges)
                ) && 
                (
                    this.MeasureOptions == input.MeasureOptions ||
                    (this.MeasureOptions != null &&
                    this.MeasureOptions.Equals(input.MeasureOptions))
                ) && 
                (
                    this.AggregateLevelUsage == input.AggregateLevelUsage ||
                    this.AggregateLevelUsage.Equals(input.AggregateLevelUsage)
                ) && 
                (
                    this.AddMemberOption == input.AddMemberOption ||
                    this.AddMemberOption.Equals(input.AddMemberOption)
                ) && 
                (
                    this.AttributeOptions == input.AttributeOptions ||
                    (this.AttributeOptions != null &&
                    this.AttributeOptions.Equals(input.AttributeOptions))
                ) && 
                (
                    this.ConfigOption == input.ConfigOption ||
                    this.ConfigOption.Equals(input.ConfigOption)
                ) && 
                (
                    this.Unique == input.Unique ||
                    this.Unique.Equals(input.Unique)
                ) && 
                (
                    this.HierarchyType == input.HierarchyType ||
                    this.HierarchyType.Equals(input.HierarchyType)
                ) && 
                (
                    this.SortOption == input.SortOption ||
                    this.SortOption.Equals(input.SortOption)
                ) && 
                (
                    this.StorageType == input.StorageType ||
                    this.StorageType.Equals(input.StorageType)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.UpdateOption == input.UpdateOption ||
                    this.UpdateOption.Equals(input.UpdateOption)
                ) && 
                (
                    this.AllowMoves == input.AllowMoves ||
                    this.AllowMoves.Equals(input.AllowMoves)
                ) && 
                (
                    this.SolveOrder == input.SolveOrder ||
                    this.SolveOrder.Equals(input.SolveOrder)
                ) && 
                (
                    this.CreateAttributeMembers == input.CreateAttributeMembers ||
                    this.CreateAttributeMembers.Equals(input.CreateAttributeMembers)
                ) && 
                (
                    this.Share == input.Share ||
                    this.Share.Equals(input.Share)
                ) && 
                (
                    this.IncrementalSort == input.IncrementalSort ||
                    this.IncrementalSort.Equals(input.IncrementalSort)
                ) && 
                (
                    this.AutoFixSharedMember == input.AutoFixSharedMember ||
                    this.AutoFixSharedMember.Equals(input.AutoFixSharedMember)
                ) && 
                (
                    this.Flexible == input.Flexible ||
                    this.Flexible.Equals(input.Flexible)
                ) && 
                (
                    this.MemberName == input.MemberName ||
                    (this.MemberName != null &&
                    this.MemberName.Equals(input.MemberName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DimensionSolveOrder == input.DimensionSolveOrder ||
                    this.DimensionSolveOrder.Equals(input.DimensionSolveOrder)
                ) && 
                (
                    this.Added == input.Added ||
                    this.Added.Equals(input.Added)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Generations != null)
                {
                    hashCode = (hashCode * 59) + this.Generations.GetHashCode();
                }
                if (this.Levels != null)
                {
                    hashCode = (hashCode * 59) + this.Levels.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowassociationChanges.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowFormulaChanges.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPropertyChanges.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowUDAChanges.GetHashCode();
                if (this.MeasureOptions != null)
                {
                    hashCode = (hashCode * 59) + this.MeasureOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AggregateLevelUsage.GetHashCode();
                hashCode = (hashCode * 59) + this.AddMemberOption.GetHashCode();
                if (this.AttributeOptions != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConfigOption.GetHashCode();
                hashCode = (hashCode * 59) + this.Unique.GetHashCode();
                hashCode = (hashCode * 59) + this.HierarchyType.GetHashCode();
                hashCode = (hashCode * 59) + this.SortOption.GetHashCode();
                hashCode = (hashCode * 59) + this.StorageType.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateOption.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowMoves.GetHashCode();
                hashCode = (hashCode * 59) + this.SolveOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateAttributeMembers.GetHashCode();
                hashCode = (hashCode * 59) + this.Share.GetHashCode();
                hashCode = (hashCode * 59) + this.IncrementalSort.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoFixSharedMember.GetHashCode();
                hashCode = (hashCode * 59) + this.Flexible.GetHashCode();
                if (this.MemberName != null)
                {
                    hashCode = (hashCode * 59) + this.MemberName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DimensionSolveOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.Added.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
