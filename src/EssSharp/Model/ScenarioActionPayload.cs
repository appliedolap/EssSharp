/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ScenarioActionPayload
    /// </summary>
    [DataContract(Name = "ScenarioActionPayload")]
    public partial class ScenarioActionPayload : IEquatable<ScenarioActionPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioActionPayload" /> class.
        /// </summary>
        /// <param name="comment">comment.</param>
        /// <param name="to">to.</param>
        /// <param name="copyOptions">copyOptions.</param>
        public ScenarioActionPayload(string comment = default(string), string to = default(string), CopyOptions copyOptions = default(CopyOptions))
        {
            this.Comment = comment;
            this.To = to;
            this.CopyOptions = copyOptions;
        }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets CopyOptions
        /// </summary>
        [DataMember(Name = "copyOptions", EmitDefaultValue = false)]
        public CopyOptions CopyOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScenarioActionPayload {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CopyOptions: ").Append(CopyOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioActionPayload);
        }

        /// <summary>
        /// Returns true if ScenarioActionPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioActionPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioActionPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.CopyOptions == input.CopyOptions ||
                    (this.CopyOptions != null &&
                    this.CopyOptions.Equals(input.CopyOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.CopyOptions != null)
                {
                    hashCode = (hashCode * 59) + this.CopyOptions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
