/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Transform
    /// </summary>
    [DataContract(Name = "Transform")]
    public partial class Transform : IEquatable<Transform>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum COLUMN for value: COLUMN
            /// </summary>
            [EnumMember(Value = "COLUMN")]
            COLUMN = 1,

            /// <summary>
            /// Enum SUBSTR for value: SUBSTR
            /// </summary>
            [EnumMember(Value = "SUBSTR")]
            SUBSTR = 2,

            /// <summary>
            /// Enum CONCAT for value: CONCAT
            /// </summary>
            [EnumMember(Value = "CONCAT")]
            CONCAT = 3,

            /// <summary>
            /// Enum STATICSTR for value: STATICSTR
            /// </summary>
            [EnumMember(Value = "STATICSTR")]
            STATICSTR = 4,

            /// <summary>
            /// Enum IGNORE for value: IGNORE
            /// </summary>
            [EnumMember(Value = "IGNORE")]
            IGNORE = 5

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transform" /> class.
        /// </summary>
        /// <param name="nodes">nodes.</param>
        /// <param name="type">type.</param>
        public Transform(List<Transform> nodes = default(List<Transform>), TypeEnum? type = default(TypeEnum?))
        {
            this.Nodes = nodes;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [DataMember(Name = "nodes", EmitDefaultValue = false)]
        public List<Transform> Nodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transform {\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transform);
        }

        /// <summary>
        /// Returns true if Transform instances are equal
        /// </summary>
        /// <param name="input">Instance of Transform to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transform input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nodes != null)
                {
                    hashCode = (hashCode * 59) + this.Nodes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
