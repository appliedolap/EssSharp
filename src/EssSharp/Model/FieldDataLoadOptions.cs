/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// FieldDataLoadOptions
    /// </summary>
    [DataContract(Name = "FieldDataLoadOptions")]
    public partial class FieldDataLoadOptions : IEquatable<FieldDataLoadOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines StoreType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StoreTypeEnum
        {
            /// <summary>
            /// Enum MIN for value: MIN
            /// </summary>
            [EnumMember(Value = "MIN")]
            MIN = 1,

            /// <summary>
            /// Enum MAX for value: MAX
            /// </summary>
            [EnumMember(Value = "MAX")]
            MAX = 2,

            /// <summary>
            /// Enum AVG for value: AVG
            /// </summary>
            [EnumMember(Value = "AVG")]
            AVG = 3,

            /// <summary>
            /// Enum SUM for value: SUM
            /// </summary>
            [EnumMember(Value = "SUM")]
            SUM = 4,

            /// <summary>
            /// Enum COUNT for value: COUNT
            /// </summary>
            [EnumMember(Value = "COUNT")]
            COUNT = 5

        }


        /// <summary>
        /// Gets or Sets StoreType
        /// </summary>
        [DataMember(Name = "storeType", EmitDefaultValue = false)]
        public StoreTypeEnum? StoreType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldDataLoadOptions" /> class.
        /// </summary>
        /// <param name="referDimension">referDimension.</param>
        /// <param name="referNumber">referNumber.</param>
        /// <param name="referOption">referOption.</param>
        /// <param name="ignore">ignore.</param>
        /// <param name="scale">scale.</param>
        /// <param name="useReference">useReference.</param>
        /// <param name="data">data.</param>
        /// <param name="scalingfactor">scalingfactor.</param>
        /// <param name="storeType">storeType.</param>
        /// <param name="storeTypeCountMissing">storeTypeCountMissing.</param>
        public FieldDataLoadOptions(string referDimension = default(string), int referNumber = default(int), int referOption = default(int), bool ignore = default(bool), bool scale = default(bool), bool useReference = default(bool), bool data = default(bool), double scalingfactor = default(double), StoreTypeEnum? storeType = default(StoreTypeEnum?), bool storeTypeCountMissing = default(bool))
        {
            this.ReferDimension = referDimension;
            this.ReferNumber = referNumber;
            this.ReferOption = referOption;
            this.Ignore = ignore;
            this.Scale = scale;
            this.UseReference = useReference;
            this.Data = data;
            this.Scalingfactor = scalingfactor;
            this.StoreType = storeType;
            this.StoreTypeCountMissing = storeTypeCountMissing;
        }

        /// <summary>
        /// Gets or Sets ReferDimension
        /// </summary>
        [DataMember(Name = "referDimension", EmitDefaultValue = false)]
        public string ReferDimension { get; set; }

        /// <summary>
        /// Gets or Sets ReferNumber
        /// </summary>
        [DataMember(Name = "referNumber", EmitDefaultValue = false)]
        public int ReferNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReferOption
        /// </summary>
        [DataMember(Name = "referOption", EmitDefaultValue = false)]
        public int ReferOption { get; set; }

        /// <summary>
        /// Gets or Sets Ignore
        /// </summary>
        [DataMember(Name = "ignore", EmitDefaultValue = true)]
        public bool Ignore { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name = "scale", EmitDefaultValue = true)]
        public bool Scale { get; set; }

        /// <summary>
        /// Gets or Sets UseReference
        /// </summary>
        [DataMember(Name = "useReference", EmitDefaultValue = true)]
        public bool UseReference { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public bool Data { get; set; }

        /// <summary>
        /// Gets or Sets Scalingfactor
        /// </summary>
        [DataMember(Name = "scalingfactor", EmitDefaultValue = false)]
        public double Scalingfactor { get; set; }

        /// <summary>
        /// Gets or Sets StoreTypeCountMissing
        /// </summary>
        [DataMember(Name = "storeTypeCountMissing", EmitDefaultValue = true)]
        public bool StoreTypeCountMissing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldDataLoadOptions {\n");
            sb.Append("  ReferDimension: ").Append(ReferDimension).Append("\n");
            sb.Append("  ReferNumber: ").Append(ReferNumber).Append("\n");
            sb.Append("  ReferOption: ").Append(ReferOption).Append("\n");
            sb.Append("  Ignore: ").Append(Ignore).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  UseReference: ").Append(UseReference).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Scalingfactor: ").Append(Scalingfactor).Append("\n");
            sb.Append("  StoreType: ").Append(StoreType).Append("\n");
            sb.Append("  StoreTypeCountMissing: ").Append(StoreTypeCountMissing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldDataLoadOptions);
        }

        /// <summary>
        /// Returns true if FieldDataLoadOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldDataLoadOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldDataLoadOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferDimension == input.ReferDimension ||
                    (this.ReferDimension != null &&
                    this.ReferDimension.Equals(input.ReferDimension))
                ) && 
                (
                    this.ReferNumber == input.ReferNumber ||
                    this.ReferNumber.Equals(input.ReferNumber)
                ) && 
                (
                    this.ReferOption == input.ReferOption ||
                    this.ReferOption.Equals(input.ReferOption)
                ) && 
                (
                    this.Ignore == input.Ignore ||
                    this.Ignore.Equals(input.Ignore)
                ) && 
                (
                    this.Scale == input.Scale ||
                    this.Scale.Equals(input.Scale)
                ) && 
                (
                    this.UseReference == input.UseReference ||
                    this.UseReference.Equals(input.UseReference)
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data.Equals(input.Data)
                ) && 
                (
                    this.Scalingfactor == input.Scalingfactor ||
                    this.Scalingfactor.Equals(input.Scalingfactor)
                ) && 
                (
                    this.StoreType == input.StoreType ||
                    this.StoreType.Equals(input.StoreType)
                ) && 
                (
                    this.StoreTypeCountMissing == input.StoreTypeCountMissing ||
                    this.StoreTypeCountMissing.Equals(input.StoreTypeCountMissing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferDimension != null)
                {
                    hashCode = (hashCode * 59) + this.ReferDimension.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReferNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ReferOption.GetHashCode();
                hashCode = (hashCode * 59) + this.Ignore.GetHashCode();
                hashCode = (hashCode * 59) + this.Scale.GetHashCode();
                hashCode = (hashCode * 59) + this.UseReference.GetHashCode();
                hashCode = (hashCode * 59) + this.Data.GetHashCode();
                hashCode = (hashCode * 59) + this.Scalingfactor.GetHashCode();
                hashCode = (hashCode * 59) + this.StoreType.GetHashCode();
                hashCode = (hashCode * 59) + this.StoreTypeCountMissing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
