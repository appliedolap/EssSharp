/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// LayoutPreferences
    /// </summary>
    [DataContract(Name = "LayoutPreferences")]
    public partial class LayoutPreferences : IEquatable<LayoutPreferences>, IValidatableObject
    {
        /// <summary>
        /// Defines Indentation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndentationEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum SUBITEMS for value: SUBITEMS
            /// </summary>
            [EnumMember(Value = "SUBITEMS")]
            SUBITEMS = 2,

            /// <summary>
            /// Enum TOTALS for value: TOTALS
            /// </summary>
            [EnumMember(Value = "TOTALS")]
            TOTALS = 3

        }


        /// <summary>
        /// Gets or Sets Indentation
        /// </summary>
        [DataMember(Name = "indentation", EmitDefaultValue = false)]
        public IndentationEnum? Indentation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutPreferences" /> class.
        /// </summary>
        /// <param name="indentation">indentation.</param>
        /// <param name="rowSuppression">rowSuppression.</param>
        /// <param name="columnSuppression">columnSuppression.</param>
        /// <param name="cellText">cellText.</param>
        /// <param name="zoomIn">zoomIn.</param>
        /// <param name="navigate">navigate.</param>
        /// <param name="includeSelection">includeSelection.</param>
        /// <param name="repeatMemberLabels">repeatMemberLabels.</param>
        /// <param name="withinSelectedGroup">withinSelectedGroup.</param>
        /// <param name="removeUnSelectedGroup">removeUnSelectedGroup.</param>
        /// <param name="includeDescriptionLabel">includeDescriptionLabel.</param>
        /// <param name="missingText">missingText.</param>
        /// <param name="noAccessText">noAccessText.</param>
        /// <param name="maxRows">maxRows.</param>
        /// <param name="formulaRetention">formulaRetention.</param>
        public LayoutPreferences(IndentationEnum? indentation = default(IndentationEnum?), Suppression rowSuppression = default(Suppression), Suppression columnSuppression = default(Suppression), bool cellText = default(bool), ZoomIn zoomIn = default(ZoomIn), bool navigate = default(bool), bool includeSelection = default(bool), bool repeatMemberLabels = default(bool), bool withinSelectedGroup = default(bool), bool removeUnSelectedGroup = default(bool), bool includeDescriptionLabel = default(bool), string missingText = default(string), string noAccessText = default(string), int maxRows = default(int), FormulaRetention formulaRetention = default(FormulaRetention))
        {
            this.Indentation = indentation;
            this.RowSuppression = rowSuppression;
            this.ColumnSuppression = columnSuppression;
            this.CellText = cellText;
            this.ZoomIn = zoomIn;
            this.Navigate = navigate;
            this.IncludeSelection = includeSelection;
            this.RepeatMemberLabels = repeatMemberLabels;
            this.WithinSelectedGroup = withinSelectedGroup;
            this.RemoveUnSelectedGroup = removeUnSelectedGroup;
            this.IncludeDescriptionLabel = includeDescriptionLabel;
            this.MissingText = missingText;
            this.NoAccessText = noAccessText;
            this.MaxRows = maxRows;
            this.FormulaRetention = formulaRetention;
        }

        /// <summary>
        /// Gets or Sets RowSuppression
        /// </summary>
        [DataMember(Name = "rowSuppression", EmitDefaultValue = false)]
        public Suppression RowSuppression { get; set; }

        /// <summary>
        /// Gets or Sets ColumnSuppression
        /// </summary>
        [DataMember(Name = "columnSuppression", EmitDefaultValue = false)]
        public Suppression ColumnSuppression { get; set; }

        /// <summary>
        /// Gets or Sets CellText
        /// </summary>
        [DataMember(Name = "cellText", EmitDefaultValue = true)]
        public bool CellText { get; set; }

        /// <summary>
        /// Gets or Sets ZoomIn
        /// </summary>
        [DataMember(Name = "zoomIn", EmitDefaultValue = false)]
        public ZoomIn ZoomIn { get; set; }

        /// <summary>
        /// Gets or Sets Navigate
        /// </summary>
        [DataMember(Name = "navigate", EmitDefaultValue = true)]
        public bool Navigate { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSelection
        /// </summary>
        [DataMember(Name = "includeSelection", EmitDefaultValue = true)]
        public bool IncludeSelection { get; set; }

        /// <summary>
        /// Gets or Sets RepeatMemberLabels
        /// </summary>
        [DataMember(Name = "repeatMemberLabels", EmitDefaultValue = true)]
        public bool RepeatMemberLabels { get; set; }

        /// <summary>
        /// Gets or Sets WithinSelectedGroup
        /// </summary>
        [DataMember(Name = "withinSelectedGroup", EmitDefaultValue = true)]
        public bool WithinSelectedGroup { get; set; }

        /// <summary>
        /// Gets or Sets RemoveUnSelectedGroup
        /// </summary>
        [DataMember(Name = "removeUnSelectedGroup", EmitDefaultValue = true)]
        public bool RemoveUnSelectedGroup { get; set; }

        /// <summary>
        /// Gets or Sets IncludeDescriptionLabel
        /// </summary>
        [DataMember(Name = "includeDescriptionLabel", EmitDefaultValue = true)]
        public bool IncludeDescriptionLabel { get; set; }

        /// <summary>
        /// Gets or Sets MissingText
        /// </summary>
        [DataMember(Name = "missingText", EmitDefaultValue = false)]
        public string MissingText { get; set; }

        /// <summary>
        /// Gets or Sets NoAccessText
        /// </summary>
        [DataMember(Name = "noAccessText", EmitDefaultValue = false)]
        public string NoAccessText { get; set; }

        /// <summary>
        /// Gets or Sets MaxRows
        /// </summary>
        [DataMember(Name = "maxRows", EmitDefaultValue = false)]
        public int MaxRows { get; set; }

        /// <summary>
        /// Gets or Sets FormulaRetention
        /// </summary>
        [DataMember(Name = "formulaRetention", EmitDefaultValue = false)]
        public FormulaRetention FormulaRetention { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LayoutPreferences {\n");
            sb.Append("  Indentation: ").Append(Indentation).Append("\n");
            sb.Append("  RowSuppression: ").Append(RowSuppression).Append("\n");
            sb.Append("  ColumnSuppression: ").Append(ColumnSuppression).Append("\n");
            sb.Append("  CellText: ").Append(CellText).Append("\n");
            sb.Append("  ZoomIn: ").Append(ZoomIn).Append("\n");
            sb.Append("  Navigate: ").Append(Navigate).Append("\n");
            sb.Append("  IncludeSelection: ").Append(IncludeSelection).Append("\n");
            sb.Append("  RepeatMemberLabels: ").Append(RepeatMemberLabels).Append("\n");
            sb.Append("  WithinSelectedGroup: ").Append(WithinSelectedGroup).Append("\n");
            sb.Append("  RemoveUnSelectedGroup: ").Append(RemoveUnSelectedGroup).Append("\n");
            sb.Append("  IncludeDescriptionLabel: ").Append(IncludeDescriptionLabel).Append("\n");
            sb.Append("  MissingText: ").Append(MissingText).Append("\n");
            sb.Append("  NoAccessText: ").Append(NoAccessText).Append("\n");
            sb.Append("  MaxRows: ").Append(MaxRows).Append("\n");
            sb.Append("  FormulaRetention: ").Append(FormulaRetention).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LayoutPreferences);
        }

        /// <summary>
        /// Returns true if LayoutPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of LayoutPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutPreferences input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Indentation == input.Indentation ||
                    this.Indentation.Equals(input.Indentation)
                ) && 
                (
                    this.RowSuppression == input.RowSuppression ||
                    (this.RowSuppression != null &&
                    this.RowSuppression.Equals(input.RowSuppression))
                ) && 
                (
                    this.ColumnSuppression == input.ColumnSuppression ||
                    (this.ColumnSuppression != null &&
                    this.ColumnSuppression.Equals(input.ColumnSuppression))
                ) && 
                (
                    this.CellText == input.CellText ||
                    this.CellText.Equals(input.CellText)
                ) && 
                (
                    this.ZoomIn == input.ZoomIn ||
                    (this.ZoomIn != null &&
                    this.ZoomIn.Equals(input.ZoomIn))
                ) && 
                (
                    this.Navigate == input.Navigate ||
                    this.Navigate.Equals(input.Navigate)
                ) && 
                (
                    this.IncludeSelection == input.IncludeSelection ||
                    this.IncludeSelection.Equals(input.IncludeSelection)
                ) && 
                (
                    this.RepeatMemberLabels == input.RepeatMemberLabels ||
                    this.RepeatMemberLabels.Equals(input.RepeatMemberLabels)
                ) && 
                (
                    this.WithinSelectedGroup == input.WithinSelectedGroup ||
                    this.WithinSelectedGroup.Equals(input.WithinSelectedGroup)
                ) && 
                (
                    this.RemoveUnSelectedGroup == input.RemoveUnSelectedGroup ||
                    this.RemoveUnSelectedGroup.Equals(input.RemoveUnSelectedGroup)
                ) && 
                (
                    this.IncludeDescriptionLabel == input.IncludeDescriptionLabel ||
                    this.IncludeDescriptionLabel.Equals(input.IncludeDescriptionLabel)
                ) && 
                (
                    this.MissingText == input.MissingText ||
                    (this.MissingText != null &&
                    this.MissingText.Equals(input.MissingText))
                ) && 
                (
                    this.NoAccessText == input.NoAccessText ||
                    (this.NoAccessText != null &&
                    this.NoAccessText.Equals(input.NoAccessText))
                ) && 
                (
                    this.MaxRows == input.MaxRows ||
                    this.MaxRows.Equals(input.MaxRows)
                ) && 
                (
                    this.FormulaRetention == input.FormulaRetention ||
                    (this.FormulaRetention != null &&
                    this.FormulaRetention.Equals(input.FormulaRetention))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Indentation.GetHashCode();
                if (this.RowSuppression != null)
                {
                    hashCode = (hashCode * 59) + this.RowSuppression.GetHashCode();
                }
                if (this.ColumnSuppression != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnSuppression.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CellText.GetHashCode();
                if (this.ZoomIn != null)
                {
                    hashCode = (hashCode * 59) + this.ZoomIn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Navigate.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeSelection.GetHashCode();
                hashCode = (hashCode * 59) + this.RepeatMemberLabels.GetHashCode();
                hashCode = (hashCode * 59) + this.WithinSelectedGroup.GetHashCode();
                hashCode = (hashCode * 59) + this.RemoveUnSelectedGroup.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeDescriptionLabel.GetHashCode();
                if (this.MissingText != null)
                {
                    hashCode = (hashCode * 59) + this.MissingText.GetHashCode();
                }
                if (this.NoAccessText != null)
                {
                    hashCode = (hashCode * 59) + this.NoAccessText.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxRows.GetHashCode();
                if (this.FormulaRetention != null)
                {
                    hashCode = (hashCode * 59) + this.FormulaRetention.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
