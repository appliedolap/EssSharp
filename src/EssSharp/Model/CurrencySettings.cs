/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// CurrencySettings
    /// </summary>
    [DataContract(Name = "CurrencySettings")]
    public partial class CurrencySettings : IEquatable<CurrencySettings>, IValidatableObject
    {
        /// <summary>
        /// Defines ConversionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConversionTypeEnum
        {
            /// <summary>
            /// Enum Division for value: division
            /// </summary>
            [EnumMember(Value = "division")]
            Division = 1,

            /// <summary>
            /// Enum Multiplication for value: multiplication
            /// </summary>
            [EnumMember(Value = "multiplication")]
            Multiplication = 2

        }


        /// <summary>
        /// Gets or Sets ConversionType
        /// </summary>
        [DataMember(Name = "conversionType", EmitDefaultValue = false)]
        public ConversionTypeEnum? ConversionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencySettings" /> class.
        /// </summary>
        /// <param name="currencyDatabase">currencyDatabase.</param>
        /// <param name="conversionType">conversionType.</param>
        /// <param name="conversionTypeMemberName">conversionTypeMemberName.</param>
        /// <param name="countryMemberName">countryMemberName.</param>
        /// <param name="timeMemberName">timeMemberName.</param>
        /// <param name="categoryMemberName">categoryMemberName.</param>
        /// <param name="partitionMemberName">partitionMemberName.</param>
        public CurrencySettings(string currencyDatabase = default(string), ConversionTypeEnum? conversionType = default(ConversionTypeEnum?), string conversionTypeMemberName = default(string), string countryMemberName = default(string), string timeMemberName = default(string), string categoryMemberName = default(string), string partitionMemberName = default(string))
        {
            this.CurrencyDatabase = currencyDatabase;
            this.ConversionType = conversionType;
            this.ConversionTypeMemberName = conversionTypeMemberName;
            this.CountryMemberName = countryMemberName;
            this.TimeMemberName = timeMemberName;
            this.CategoryMemberName = categoryMemberName;
            this.PartitionMemberName = partitionMemberName;
        }

        /// <summary>
        /// Gets or Sets CurrencyDatabase
        /// </summary>
        [DataMember(Name = "currencyDatabase", EmitDefaultValue = false)]
        public string CurrencyDatabase { get; set; }

        /// <summary>
        /// Gets or Sets ConversionTypeMemberName
        /// </summary>
        [DataMember(Name = "conversionTypeMemberName", EmitDefaultValue = false)]
        public string ConversionTypeMemberName { get; set; }

        /// <summary>
        /// Gets or Sets CountryMemberName
        /// </summary>
        [DataMember(Name = "countryMemberName", EmitDefaultValue = false)]
        public string CountryMemberName { get; set; }

        /// <summary>
        /// Gets or Sets TimeMemberName
        /// </summary>
        [DataMember(Name = "timeMemberName", EmitDefaultValue = false)]
        public string TimeMemberName { get; set; }

        /// <summary>
        /// Gets or Sets CategoryMemberName
        /// </summary>
        [DataMember(Name = "categoryMemberName", EmitDefaultValue = false)]
        public string CategoryMemberName { get; set; }

        /// <summary>
        /// Gets or Sets PartitionMemberName
        /// </summary>
        [DataMember(Name = "partitionMemberName", EmitDefaultValue = false)]
        public string PartitionMemberName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencySettings {\n");
            sb.Append("  CurrencyDatabase: ").Append(CurrencyDatabase).Append("\n");
            sb.Append("  ConversionType: ").Append(ConversionType).Append("\n");
            sb.Append("  ConversionTypeMemberName: ").Append(ConversionTypeMemberName).Append("\n");
            sb.Append("  CountryMemberName: ").Append(CountryMemberName).Append("\n");
            sb.Append("  TimeMemberName: ").Append(TimeMemberName).Append("\n");
            sb.Append("  CategoryMemberName: ").Append(CategoryMemberName).Append("\n");
            sb.Append("  PartitionMemberName: ").Append(PartitionMemberName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencySettings);
        }

        /// <summary>
        /// Returns true if CurrencySettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencySettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencyDatabase == input.CurrencyDatabase ||
                    (this.CurrencyDatabase != null &&
                    this.CurrencyDatabase.Equals(input.CurrencyDatabase))
                ) && 
                (
                    this.ConversionType == input.ConversionType ||
                    this.ConversionType.Equals(input.ConversionType)
                ) && 
                (
                    this.ConversionTypeMemberName == input.ConversionTypeMemberName ||
                    (this.ConversionTypeMemberName != null &&
                    this.ConversionTypeMemberName.Equals(input.ConversionTypeMemberName))
                ) && 
                (
                    this.CountryMemberName == input.CountryMemberName ||
                    (this.CountryMemberName != null &&
                    this.CountryMemberName.Equals(input.CountryMemberName))
                ) && 
                (
                    this.TimeMemberName == input.TimeMemberName ||
                    (this.TimeMemberName != null &&
                    this.TimeMemberName.Equals(input.TimeMemberName))
                ) && 
                (
                    this.CategoryMemberName == input.CategoryMemberName ||
                    (this.CategoryMemberName != null &&
                    this.CategoryMemberName.Equals(input.CategoryMemberName))
                ) && 
                (
                    this.PartitionMemberName == input.PartitionMemberName ||
                    (this.PartitionMemberName != null &&
                    this.PartitionMemberName.Equals(input.PartitionMemberName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyDatabase != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyDatabase.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConversionType.GetHashCode();
                if (this.ConversionTypeMemberName != null)
                {
                    hashCode = (hashCode * 59) + this.ConversionTypeMemberName.GetHashCode();
                }
                if (this.CountryMemberName != null)
                {
                    hashCode = (hashCode * 59) + this.CountryMemberName.GetHashCode();
                }
                if (this.TimeMemberName != null)
                {
                    hashCode = (hashCode * 59) + this.TimeMemberName.GetHashCode();
                }
                if (this.CategoryMemberName != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryMemberName.GetHashCode();
                }
                if (this.PartitionMemberName != null)
                {
                    hashCode = (hashCode * 59) + this.PartitionMemberName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
