/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// TransactionSettings
    /// </summary>
    [DataContract(Name = "TransactionSettings")]
    public partial class TransactionSettings : IEquatable<TransactionSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSettings" /> class.
        /// </summary>
        /// <param name="committedAccess">committedAccess.</param>
        /// <param name="concurrencyWaitSeconds">concurrencyWaitSeconds.</param>
        /// <param name="concurrencyPreImageAccess">concurrencyPreImageAccess.</param>
        /// <param name="commitBlocks">commitBlocks.</param>
        /// <param name="commitRows">commitRows.</param>
        public TransactionSettings(bool committedAccess = default(bool), int concurrencyWaitSeconds = default(int), bool concurrencyPreImageAccess = default(bool), long commitBlocks = default(long), long commitRows = default(long))
        {
            this.CommittedAccess = committedAccess;
            this.ConcurrencyWaitSeconds = concurrencyWaitSeconds;
            this.ConcurrencyPreImageAccess = concurrencyPreImageAccess;
            this.CommitBlocks = commitBlocks;
            this.CommitRows = commitRows;
        }

        /// <summary>
        /// Gets or Sets CommittedAccess
        /// </summary>
        [DataMember(Name = "committedAccess", EmitDefaultValue = true)]
        public bool CommittedAccess { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyWaitSeconds
        /// </summary>
        [DataMember(Name = "concurrencyWaitSeconds", EmitDefaultValue = false)]
        public int ConcurrencyWaitSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyPreImageAccess
        /// </summary>
        [DataMember(Name = "concurrencyPreImageAccess", EmitDefaultValue = true)]
        public bool ConcurrencyPreImageAccess { get; set; }

        /// <summary>
        /// Gets or Sets CommitBlocks
        /// </summary>
        [DataMember(Name = "commitBlocks", EmitDefaultValue = false)]
        public long CommitBlocks { get; set; }

        /// <summary>
        /// Gets or Sets CommitRows
        /// </summary>
        [DataMember(Name = "commitRows", EmitDefaultValue = false)]
        public long CommitRows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSettings {\n");
            sb.Append("  CommittedAccess: ").Append(CommittedAccess).Append("\n");
            sb.Append("  ConcurrencyWaitSeconds: ").Append(ConcurrencyWaitSeconds).Append("\n");
            sb.Append("  ConcurrencyPreImageAccess: ").Append(ConcurrencyPreImageAccess).Append("\n");
            sb.Append("  CommitBlocks: ").Append(CommitBlocks).Append("\n");
            sb.Append("  CommitRows: ").Append(CommitRows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSettings);
        }

        /// <summary>
        /// Returns true if TransactionSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CommittedAccess == input.CommittedAccess ||
                    this.CommittedAccess.Equals(input.CommittedAccess)
                ) && 
                (
                    this.ConcurrencyWaitSeconds == input.ConcurrencyWaitSeconds ||
                    this.ConcurrencyWaitSeconds.Equals(input.ConcurrencyWaitSeconds)
                ) && 
                (
                    this.ConcurrencyPreImageAccess == input.ConcurrencyPreImageAccess ||
                    this.ConcurrencyPreImageAccess.Equals(input.ConcurrencyPreImageAccess)
                ) && 
                (
                    this.CommitBlocks == input.CommitBlocks ||
                    this.CommitBlocks.Equals(input.CommitBlocks)
                ) && 
                (
                    this.CommitRows == input.CommitRows ||
                    this.CommitRows.Equals(input.CommitRows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CommittedAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.ConcurrencyWaitSeconds.GetHashCode();
                hashCode = (hashCode * 59) + this.ConcurrencyPreImageAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.CommitBlocks.GetHashCode();
                hashCode = (hashCode * 59) + this.CommitRows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
