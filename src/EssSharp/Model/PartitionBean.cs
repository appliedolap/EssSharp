/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// PartitionBean
    /// </summary>
    [DataContract(Name = "PartitionBean")]
    public partial class PartitionBean : IEquatable<PartitionBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartitionBean" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="updatable">updatable.</param>
        /// <param name="isNew">isNew.</param>
        /// <param name="locked">locked.</param>
        /// <param name="federatedTypeCR">federatedTypeCR.</param>
        /// <param name="federatedTypeAV">federatedTypeAV.</param>
        /// <param name="sourceInfo">sourceInfo.</param>
        /// <param name="targetInfo">targetInfo.</param>
        /// <param name="areas">areas.</param>
        /// <param name="mappings">mappings.</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="links">links.</param>
        public PartitionBean(string id = default(string), string type = default(string), bool updatable = default(bool), bool isNew = default(bool), bool locked = default(bool), bool federatedTypeCR = default(bool), bool federatedTypeAV = default(bool), ConnectionInfoBean sourceInfo = default(ConnectionInfoBean), ConnectionInfoBean targetInfo = default(ConnectionInfoBean), List<AreaBean> areas = default(List<AreaBean>), List<MemberMappingBean> mappings = default(List<MemberMappingBean>), string errorMessage = default(string), List<Link> links = default(List<Link>))
        {
            this.Id = id;
            this.Type = type;
            this.Updatable = updatable;
            this.IsNew = isNew;
            this.Locked = locked;
            this.FederatedTypeCR = federatedTypeCR;
            this.FederatedTypeAV = federatedTypeAV;
            this.SourceInfo = sourceInfo;
            this.TargetInfo = targetInfo;
            this.Areas = areas;
            this.Mappings = mappings;
            this.ErrorMessage = errorMessage;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Updatable
        /// </summary>
        [DataMember(Name = "updatable", EmitDefaultValue = true)]
        public bool Updatable { get; set; }

        /// <summary>
        /// Gets or Sets IsNew
        /// </summary>
        [DataMember(Name = "isNew", EmitDefaultValue = true)]
        public bool IsNew { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Gets or Sets FederatedTypeCR
        /// </summary>
        [DataMember(Name = "federatedTypeCR", EmitDefaultValue = true)]
        public bool FederatedTypeCR { get; set; }

        /// <summary>
        /// Gets or Sets FederatedTypeAV
        /// </summary>
        [DataMember(Name = "federatedTypeAV", EmitDefaultValue = true)]
        public bool FederatedTypeAV { get; set; }

        /// <summary>
        /// Gets or Sets SourceInfo
        /// </summary>
        [DataMember(Name = "sourceInfo", EmitDefaultValue = false)]
        public ConnectionInfoBean SourceInfo { get; set; }

        /// <summary>
        /// Gets or Sets TargetInfo
        /// </summary>
        [DataMember(Name = "targetInfo", EmitDefaultValue = false)]
        public ConnectionInfoBean TargetInfo { get; set; }

        /// <summary>
        /// Gets or Sets Areas
        /// </summary>
        [DataMember(Name = "areas", EmitDefaultValue = false)]
        public List<AreaBean> Areas { get; set; }

        /// <summary>
        /// Gets or Sets Mappings
        /// </summary>
        [DataMember(Name = "mappings", EmitDefaultValue = false)]
        public List<MemberMappingBean> Mappings { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartitionBean {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Updatable: ").Append(Updatable).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  FederatedTypeCR: ").Append(FederatedTypeCR).Append("\n");
            sb.Append("  FederatedTypeAV: ").Append(FederatedTypeAV).Append("\n");
            sb.Append("  SourceInfo: ").Append(SourceInfo).Append("\n");
            sb.Append("  TargetInfo: ").Append(TargetInfo).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartitionBean);
        }

        /// <summary>
        /// Returns true if PartitionBean instances are equal
        /// </summary>
        /// <param name="input">Instance of PartitionBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartitionBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Updatable == input.Updatable ||
                    this.Updatable.Equals(input.Updatable)
                ) && 
                (
                    this.IsNew == input.IsNew ||
                    this.IsNew.Equals(input.IsNew)
                ) && 
                (
                    this.Locked == input.Locked ||
                    this.Locked.Equals(input.Locked)
                ) && 
                (
                    this.FederatedTypeCR == input.FederatedTypeCR ||
                    this.FederatedTypeCR.Equals(input.FederatedTypeCR)
                ) && 
                (
                    this.FederatedTypeAV == input.FederatedTypeAV ||
                    this.FederatedTypeAV.Equals(input.FederatedTypeAV)
                ) && 
                (
                    this.SourceInfo == input.SourceInfo ||
                    (this.SourceInfo != null &&
                    this.SourceInfo.Equals(input.SourceInfo))
                ) && 
                (
                    this.TargetInfo == input.TargetInfo ||
                    (this.TargetInfo != null &&
                    this.TargetInfo.Equals(input.TargetInfo))
                ) && 
                (
                    this.Areas == input.Areas ||
                    this.Areas != null &&
                    input.Areas != null &&
                    this.Areas.SequenceEqual(input.Areas)
                ) && 
                (
                    this.Mappings == input.Mappings ||
                    this.Mappings != null &&
                    input.Mappings != null &&
                    this.Mappings.SequenceEqual(input.Mappings)
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Updatable.GetHashCode();
                hashCode = (hashCode * 59) + this.IsNew.GetHashCode();
                hashCode = (hashCode * 59) + this.Locked.GetHashCode();
                hashCode = (hashCode * 59) + this.FederatedTypeCR.GetHashCode();
                hashCode = (hashCode * 59) + this.FederatedTypeAV.GetHashCode();
                if (this.SourceInfo != null)
                {
                    hashCode = (hashCode * 59) + this.SourceInfo.GetHashCode();
                }
                if (this.TargetInfo != null)
                {
                    hashCode = (hashCode * 59) + this.TargetInfo.GetHashCode();
                }
                if (this.Areas != null)
                {
                    hashCode = (hashCode * 59) + this.Areas.GetHashCode();
                }
                if (this.Mappings != null)
                {
                    hashCode = (hashCode * 59) + this.Mappings.GetHashCode();
                }
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
