/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// AppSettingsList
    /// </summary>
    [DataContract(Name = "AppSettingsList")]
    public partial class AppSettingsList : IEquatable<AppSettingsList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppSettingsList" /> class.
        /// </summary>
        /// <param name="general">general.</param>
        /// <param name="startup">startup.</param>
        /// <param name="security">security.</param>
        /// <param name="links">links.</param>
        public AppSettingsList(AppGeneralSettings general = default(AppGeneralSettings), AppStartupSettings startup = default(AppStartupSettings), AppSecuritySettings security = default(AppSecuritySettings), List<Link> links = default(List<Link>))
        {
            this.General = general;
            this.Startup = startup;
            this.Security = security;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets General
        /// </summary>
        [DataMember(Name = "general", EmitDefaultValue = false)]
        public AppGeneralSettings General { get; set; }

        /// <summary>
        /// Gets or Sets Startup
        /// </summary>
        [DataMember(Name = "startup", EmitDefaultValue = false)]
        public AppStartupSettings Startup { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name = "security", EmitDefaultValue = false)]
        public AppSecuritySettings Security { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppSettingsList {\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  Startup: ").Append(Startup).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppSettingsList);
        }

        /// <summary>
        /// Returns true if AppSettingsList instances are equal
        /// </summary>
        /// <param name="input">Instance of AppSettingsList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppSettingsList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.General == input.General ||
                    (this.General != null &&
                    this.General.Equals(input.General))
                ) && 
                (
                    this.Startup == input.Startup ||
                    (this.Startup != null &&
                    this.Startup.Equals(input.Startup))
                ) && 
                (
                    this.Security == input.Security ||
                    (this.Security != null &&
                    this.Security.Equals(input.Security))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.General != null)
                {
                    hashCode = (hashCode * 59) + this.General.GetHashCode();
                }
                if (this.Startup != null)
                {
                    hashCode = (hashCode * 59) + this.Startup.GetHashCode();
                }
                if (this.Security != null)
                {
                    hashCode = (hashCode * 59) + this.Security.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
