/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// GeneralStatistics
    /// </summary>
    [DataContract(Name = "GeneralStatistics")]
    public partial class GeneralStatistics : IEquatable<GeneralStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralStatistics" /> class.
        /// </summary>
        /// <param name="databaseStartTime">databaseStartTime.</param>
        /// <param name="databaseElapsedTime">databaseElapsedTime.</param>
        /// <param name="numberOfConnections">numberOfConnections.</param>
        /// <param name="numberOfDimensions">numberOfDimensions.</param>
        /// <param name="loadStatus">loadStatus.</param>
        public GeneralStatistics(long databaseStartTime = default(long), string databaseElapsedTime = default(string), int numberOfConnections = default(int), int numberOfDimensions = default(int), string loadStatus = default(string))
        {
            this.DatabaseStartTime = databaseStartTime;
            this.DatabaseElapsedTime = databaseElapsedTime;
            this.NumberOfConnections = numberOfConnections;
            this.NumberOfDimensions = numberOfDimensions;
            this.LoadStatus = loadStatus;
        }

        /// <summary>
        /// Gets or Sets DatabaseStartTime
        /// </summary>
        [DataMember(Name = "databaseStartTime", EmitDefaultValue = false)]
        public long DatabaseStartTime { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseElapsedTime
        /// </summary>
        [DataMember(Name = "databaseElapsedTime", EmitDefaultValue = false)]
        public string DatabaseElapsedTime { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfConnections
        /// </summary>
        [DataMember(Name = "numberOfConnections", EmitDefaultValue = false)]
        public int NumberOfConnections { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDimensions
        /// </summary>
        [DataMember(Name = "numberOfDimensions", EmitDefaultValue = false)]
        public int NumberOfDimensions { get; set; }

        /// <summary>
        /// Gets or Sets LoadStatus
        /// </summary>
        [DataMember(Name = "loadStatus", EmitDefaultValue = false)]
        public string LoadStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneralStatistics {\n");
            sb.Append("  DatabaseStartTime: ").Append(DatabaseStartTime).Append("\n");
            sb.Append("  DatabaseElapsedTime: ").Append(DatabaseElapsedTime).Append("\n");
            sb.Append("  NumberOfConnections: ").Append(NumberOfConnections).Append("\n");
            sb.Append("  NumberOfDimensions: ").Append(NumberOfDimensions).Append("\n");
            sb.Append("  LoadStatus: ").Append(LoadStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralStatistics);
        }

        /// <summary>
        /// Returns true if GeneralStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralStatistics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DatabaseStartTime == input.DatabaseStartTime ||
                    this.DatabaseStartTime.Equals(input.DatabaseStartTime)
                ) && 
                (
                    this.DatabaseElapsedTime == input.DatabaseElapsedTime ||
                    (this.DatabaseElapsedTime != null &&
                    this.DatabaseElapsedTime.Equals(input.DatabaseElapsedTime))
                ) && 
                (
                    this.NumberOfConnections == input.NumberOfConnections ||
                    this.NumberOfConnections.Equals(input.NumberOfConnections)
                ) && 
                (
                    this.NumberOfDimensions == input.NumberOfDimensions ||
                    this.NumberOfDimensions.Equals(input.NumberOfDimensions)
                ) && 
                (
                    this.LoadStatus == input.LoadStatus ||
                    (this.LoadStatus != null &&
                    this.LoadStatus.Equals(input.LoadStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DatabaseStartTime.GetHashCode();
                if (this.DatabaseElapsedTime != null)
                {
                    hashCode = (hashCode * 59) + this.DatabaseElapsedTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfConnections.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfDimensions.GetHashCode();
                if (this.LoadStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LoadStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
