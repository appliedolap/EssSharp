/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// CreateApplication
    /// </summary>
    [DataContract(Name = "CreateApplication")]
    public partial class CreateApplication : IEquatable<CreateApplication>, IValidatableObject
    {
        /// <summary>
        /// Defines AppType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AppTypeEnum
        {
            /// <summary>
            /// Enum NATIVE for value: NATIVE
            /// </summary>
            [EnumMember(Value = "NATIVE")]
            NATIVE = 1,

            /// <summary>
            /// Enum UTF8 for value: UTF8
            /// </summary>
            [EnumMember(Value = "UTF8")]
            UTF8 = 2

        }


        /// <summary>
        /// Gets or Sets AppType
        /// </summary>
        [DataMember(Name = "appType", EmitDefaultValue = false)]
        public AppTypeEnum? AppType { get; set; }
        /// <summary>
        /// Defines DbType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DbTypeEnum
        {
            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 1,

            /// <summary>
            /// Enum CURRENCY for value: CURRENCY
            /// </summary>
            [EnumMember(Value = "CURRENCY")]
            CURRENCY = 2,

            /// <summary>
            /// Enum ASO for value: ASO
            /// </summary>
            [EnumMember(Value = "ASO")]
            ASO = 3

        }


        /// <summary>
        /// Gets or Sets DbType
        /// </summary>
        [DataMember(Name = "dbType", EmitDefaultValue = false)]
        public DbTypeEnum? DbType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApplication" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName.</param>
        /// <param name="databaseName">databaseName.</param>
        /// <param name="allowDuplicates">allowDuplicates.</param>
        /// <param name="enableScenario">enableScenario.</param>
        /// <param name="memberCount">memberCount.</param>
        /// <param name="databaseType">databaseType.</param>
        /// <param name="appType">appType.</param>
        /// <param name="memberPrefix">memberPrefix.</param>
        /// <param name="dbType">dbType.</param>
        public CreateApplication(string applicationName = default(string), string databaseName = default(string), bool allowDuplicates = default(bool), bool enableScenario = default(bool), int memberCount = default(int), string databaseType = default(string), AppTypeEnum? appType = default(AppTypeEnum?), string memberPrefix = default(string), DbTypeEnum? dbType = default(DbTypeEnum?))
        {
            this.ApplicationName = applicationName;
            this.DatabaseName = databaseName;
            this.AllowDuplicates = allowDuplicates;
            this.EnableScenario = enableScenario;
            this.MemberCount = memberCount;
            this.DatabaseType = databaseType;
            this.AppType = appType;
            this.MemberPrefix = memberPrefix;
            this.DbType = dbType;
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name = "applicationName", EmitDefaultValue = false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseName
        /// </summary>
        [DataMember(Name = "databaseName", EmitDefaultValue = false)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or Sets AllowDuplicates
        /// </summary>
        [DataMember(Name = "allowDuplicates", EmitDefaultValue = true)]
        public bool AllowDuplicates { get; set; }

        /// <summary>
        /// Gets or Sets EnableScenario
        /// </summary>
        [DataMember(Name = "enableScenario", EmitDefaultValue = true)]
        public bool EnableScenario { get; set; }

        /// <summary>
        /// Gets or Sets MemberCount
        /// </summary>
        [DataMember(Name = "memberCount", EmitDefaultValue = false)]
        public int MemberCount { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseType
        /// </summary>
        [DataMember(Name = "databaseType", EmitDefaultValue = false)]
        public string DatabaseType { get; set; }

        /// <summary>
        /// Gets or Sets MemberPrefix
        /// </summary>
        [DataMember(Name = "memberPrefix", EmitDefaultValue = false)]
        public string MemberPrefix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateApplication {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  AllowDuplicates: ").Append(AllowDuplicates).Append("\n");
            sb.Append("  EnableScenario: ").Append(EnableScenario).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  DatabaseType: ").Append(DatabaseType).Append("\n");
            sb.Append("  AppType: ").Append(AppType).Append("\n");
            sb.Append("  MemberPrefix: ").Append(MemberPrefix).Append("\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateApplication);
        }

        /// <summary>
        /// Returns true if CreateApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.DatabaseName == input.DatabaseName ||
                    (this.DatabaseName != null &&
                    this.DatabaseName.Equals(input.DatabaseName))
                ) && 
                (
                    this.AllowDuplicates == input.AllowDuplicates ||
                    this.AllowDuplicates.Equals(input.AllowDuplicates)
                ) && 
                (
                    this.EnableScenario == input.EnableScenario ||
                    this.EnableScenario.Equals(input.EnableScenario)
                ) && 
                (
                    this.MemberCount == input.MemberCount ||
                    this.MemberCount.Equals(input.MemberCount)
                ) && 
                (
                    this.DatabaseType == input.DatabaseType ||
                    (this.DatabaseType != null &&
                    this.DatabaseType.Equals(input.DatabaseType))
                ) && 
                (
                    this.AppType == input.AppType ||
                    this.AppType.Equals(input.AppType)
                ) && 
                (
                    this.MemberPrefix == input.MemberPrefix ||
                    (this.MemberPrefix != null &&
                    this.MemberPrefix.Equals(input.MemberPrefix))
                ) && 
                (
                    this.DbType == input.DbType ||
                    this.DbType.Equals(input.DbType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationName.GetHashCode();
                }
                if (this.DatabaseName != null)
                {
                    hashCode = (hashCode * 59) + this.DatabaseName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowDuplicates.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableScenario.GetHashCode();
                hashCode = (hashCode * 59) + this.MemberCount.GetHashCode();
                if (this.DatabaseType != null)
                {
                    hashCode = (hashCode * 59) + this.DatabaseType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AppType.GetHashCode();
                if (this.MemberPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.MemberPrefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DbType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
