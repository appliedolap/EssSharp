/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ZoomIn
    /// </summary>
    [DataContract(Name = "ZoomIn")]
    public partial class ZoomIn : IEquatable<ZoomIn>, IValidatableObject
    {
        /// <summary>
        /// Defines Ancestor
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AncestorEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,

            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 2

        }


        /// <summary>
        /// Gets or Sets Ancestor
        /// </summary>
        [DataMember(Name = "ancestor", EmitDefaultValue = false)]
        public AncestorEnum? Ancestor { get; set; }
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Children for value: children
            /// </summary>
            [EnumMember(Value = "children")]
            Children = 1,

            /// <summary>
            /// Enum Descendents for value: descendents
            /// </summary>
            [EnumMember(Value = "descendents")]
            Descendents = 2,

            /// <summary>
            /// Enum Base for value: base
            /// </summary>
            [EnumMember(Value = "base")]
            Base = 3

        }


        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoomIn" /> class.
        /// </summary>
        /// <param name="ancestor">ancestor.</param>
        /// <param name="mode">mode.</param>
        public ZoomIn(AncestorEnum? ancestor = default(AncestorEnum?), ModeEnum? mode = default(ModeEnum?))
        {
            this.Ancestor = ancestor;
            this.Mode = mode;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZoomIn {\n");
            sb.Append("  Ancestor: ").Append(Ancestor).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZoomIn);
        }

        /// <summary>
        /// Returns true if ZoomIn instances are equal
        /// </summary>
        /// <param name="input">Instance of ZoomIn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoomIn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ancestor == input.Ancestor ||
                    this.Ancestor.Equals(input.Ancestor)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Ancestor.GetHashCode();
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
