/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// AttributeOutlineSettings
    /// </summary>
    [DataContract(Name = "AttributeOutlineSettings")]
    public partial class AttributeOutlineSettings : IEquatable<AttributeOutlineSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeOutlineSettings" /> class.
        /// </summary>
        /// <param name="prefixSuffixValue">prefixSuffixValue.</param>
        /// <param name="prefixSuffixSeparator">prefixSuffixSeparator.</param>
        /// <param name="prefixSuffixFormat">prefixSuffixFormat.</param>
        /// <param name="trueMemberName">trueMemberName.</param>
        /// <param name="falseMemberName">falseMemberName.</param>
        /// <param name="dateMemberNames">dateMemberNames.</param>
        /// <param name="numericRangesRepresent">numericRangesRepresent.</param>
        /// <param name="calcDimensionName">calcDimensionName.</param>
        /// <param name="calcSumMember">calcSumMember.</param>
        /// <param name="calcCountMember">calcCountMember.</param>
        /// <param name="calcMinimumMember">calcMinimumMember.</param>
        /// <param name="calcMaximumMember">calcMaximumMember.</param>
        /// <param name="calcAverageMember">calcAverageMember.</param>
        public AttributeOutlineSettings(string prefixSuffixValue = default(string), string prefixSuffixSeparator = default(string), string prefixSuffixFormat = default(string), string trueMemberName = default(string), string falseMemberName = default(string), string dateMemberNames = default(string), string numericRangesRepresent = default(string), string calcDimensionName = default(string), string calcSumMember = default(string), string calcCountMember = default(string), string calcMinimumMember = default(string), string calcMaximumMember = default(string), string calcAverageMember = default(string))
        {
            this.PrefixSuffixValue = prefixSuffixValue;
            this.PrefixSuffixSeparator = prefixSuffixSeparator;
            this.PrefixSuffixFormat = prefixSuffixFormat;
            this.TrueMemberName = trueMemberName;
            this.FalseMemberName = falseMemberName;
            this.DateMemberNames = dateMemberNames;
            this.NumericRangesRepresent = numericRangesRepresent;
            this.CalcDimensionName = calcDimensionName;
            this.CalcSumMember = calcSumMember;
            this.CalcCountMember = calcCountMember;
            this.CalcMinimumMember = calcMinimumMember;
            this.CalcMaximumMember = calcMaximumMember;
            this.CalcAverageMember = calcAverageMember;
        }

        /// <summary>
        /// Gets or Sets PrefixSuffixValue
        /// </summary>
        [DataMember(Name = "prefixSuffixValue", EmitDefaultValue = false)]
        public string PrefixSuffixValue { get; set; }

        /// <summary>
        /// Gets or Sets PrefixSuffixSeparator
        /// </summary>
        [DataMember(Name = "prefixSuffixSeparator", EmitDefaultValue = false)]
        public string PrefixSuffixSeparator { get; set; }

        /// <summary>
        /// Gets or Sets PrefixSuffixFormat
        /// </summary>
        [DataMember(Name = "prefixSuffixFormat", EmitDefaultValue = false)]
        public string PrefixSuffixFormat { get; set; }

        /// <summary>
        /// Gets or Sets TrueMemberName
        /// </summary>
        [DataMember(Name = "trueMemberName", EmitDefaultValue = false)]
        public string TrueMemberName { get; set; }

        /// <summary>
        /// Gets or Sets FalseMemberName
        /// </summary>
        [DataMember(Name = "falseMemberName", EmitDefaultValue = false)]
        public string FalseMemberName { get; set; }

        /// <summary>
        /// Gets or Sets DateMemberNames
        /// </summary>
        [DataMember(Name = "dateMemberNames", EmitDefaultValue = false)]
        public string DateMemberNames { get; set; }

        /// <summary>
        /// Gets or Sets NumericRangesRepresent
        /// </summary>
        [DataMember(Name = "numericRangesRepresent", EmitDefaultValue = false)]
        public string NumericRangesRepresent { get; set; }

        /// <summary>
        /// Gets or Sets CalcDimensionName
        /// </summary>
        [DataMember(Name = "calcDimensionName", EmitDefaultValue = false)]
        public string CalcDimensionName { get; set; }

        /// <summary>
        /// Gets or Sets CalcSumMember
        /// </summary>
        [DataMember(Name = "calcSumMember", EmitDefaultValue = false)]
        public string CalcSumMember { get; set; }

        /// <summary>
        /// Gets or Sets CalcCountMember
        /// </summary>
        [DataMember(Name = "calcCountMember", EmitDefaultValue = false)]
        public string CalcCountMember { get; set; }

        /// <summary>
        /// Gets or Sets CalcMinimumMember
        /// </summary>
        [DataMember(Name = "calcMinimumMember", EmitDefaultValue = false)]
        public string CalcMinimumMember { get; set; }

        /// <summary>
        /// Gets or Sets CalcMaximumMember
        /// </summary>
        [DataMember(Name = "calcMaximumMember", EmitDefaultValue = false)]
        public string CalcMaximumMember { get; set; }

        /// <summary>
        /// Gets or Sets CalcAverageMember
        /// </summary>
        [DataMember(Name = "calcAverageMember", EmitDefaultValue = false)]
        public string CalcAverageMember { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttributeOutlineSettings {\n");
            sb.Append("  PrefixSuffixValue: ").Append(PrefixSuffixValue).Append("\n");
            sb.Append("  PrefixSuffixSeparator: ").Append(PrefixSuffixSeparator).Append("\n");
            sb.Append("  PrefixSuffixFormat: ").Append(PrefixSuffixFormat).Append("\n");
            sb.Append("  TrueMemberName: ").Append(TrueMemberName).Append("\n");
            sb.Append("  FalseMemberName: ").Append(FalseMemberName).Append("\n");
            sb.Append("  DateMemberNames: ").Append(DateMemberNames).Append("\n");
            sb.Append("  NumericRangesRepresent: ").Append(NumericRangesRepresent).Append("\n");
            sb.Append("  CalcDimensionName: ").Append(CalcDimensionName).Append("\n");
            sb.Append("  CalcSumMember: ").Append(CalcSumMember).Append("\n");
            sb.Append("  CalcCountMember: ").Append(CalcCountMember).Append("\n");
            sb.Append("  CalcMinimumMember: ").Append(CalcMinimumMember).Append("\n");
            sb.Append("  CalcMaximumMember: ").Append(CalcMaximumMember).Append("\n");
            sb.Append("  CalcAverageMember: ").Append(CalcAverageMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributeOutlineSettings);
        }

        /// <summary>
        /// Returns true if AttributeOutlineSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeOutlineSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeOutlineSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrefixSuffixValue == input.PrefixSuffixValue ||
                    (this.PrefixSuffixValue != null &&
                    this.PrefixSuffixValue.Equals(input.PrefixSuffixValue))
                ) && 
                (
                    this.PrefixSuffixSeparator == input.PrefixSuffixSeparator ||
                    (this.PrefixSuffixSeparator != null &&
                    this.PrefixSuffixSeparator.Equals(input.PrefixSuffixSeparator))
                ) && 
                (
                    this.PrefixSuffixFormat == input.PrefixSuffixFormat ||
                    (this.PrefixSuffixFormat != null &&
                    this.PrefixSuffixFormat.Equals(input.PrefixSuffixFormat))
                ) && 
                (
                    this.TrueMemberName == input.TrueMemberName ||
                    (this.TrueMemberName != null &&
                    this.TrueMemberName.Equals(input.TrueMemberName))
                ) && 
                (
                    this.FalseMemberName == input.FalseMemberName ||
                    (this.FalseMemberName != null &&
                    this.FalseMemberName.Equals(input.FalseMemberName))
                ) && 
                (
                    this.DateMemberNames == input.DateMemberNames ||
                    (this.DateMemberNames != null &&
                    this.DateMemberNames.Equals(input.DateMemberNames))
                ) && 
                (
                    this.NumericRangesRepresent == input.NumericRangesRepresent ||
                    (this.NumericRangesRepresent != null &&
                    this.NumericRangesRepresent.Equals(input.NumericRangesRepresent))
                ) && 
                (
                    this.CalcDimensionName == input.CalcDimensionName ||
                    (this.CalcDimensionName != null &&
                    this.CalcDimensionName.Equals(input.CalcDimensionName))
                ) && 
                (
                    this.CalcSumMember == input.CalcSumMember ||
                    (this.CalcSumMember != null &&
                    this.CalcSumMember.Equals(input.CalcSumMember))
                ) && 
                (
                    this.CalcCountMember == input.CalcCountMember ||
                    (this.CalcCountMember != null &&
                    this.CalcCountMember.Equals(input.CalcCountMember))
                ) && 
                (
                    this.CalcMinimumMember == input.CalcMinimumMember ||
                    (this.CalcMinimumMember != null &&
                    this.CalcMinimumMember.Equals(input.CalcMinimumMember))
                ) && 
                (
                    this.CalcMaximumMember == input.CalcMaximumMember ||
                    (this.CalcMaximumMember != null &&
                    this.CalcMaximumMember.Equals(input.CalcMaximumMember))
                ) && 
                (
                    this.CalcAverageMember == input.CalcAverageMember ||
                    (this.CalcAverageMember != null &&
                    this.CalcAverageMember.Equals(input.CalcAverageMember))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrefixSuffixValue != null)
                {
                    hashCode = (hashCode * 59) + this.PrefixSuffixValue.GetHashCode();
                }
                if (this.PrefixSuffixSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.PrefixSuffixSeparator.GetHashCode();
                }
                if (this.PrefixSuffixFormat != null)
                {
                    hashCode = (hashCode * 59) + this.PrefixSuffixFormat.GetHashCode();
                }
                if (this.TrueMemberName != null)
                {
                    hashCode = (hashCode * 59) + this.TrueMemberName.GetHashCode();
                }
                if (this.FalseMemberName != null)
                {
                    hashCode = (hashCode * 59) + this.FalseMemberName.GetHashCode();
                }
                if (this.DateMemberNames != null)
                {
                    hashCode = (hashCode * 59) + this.DateMemberNames.GetHashCode();
                }
                if (this.NumericRangesRepresent != null)
                {
                    hashCode = (hashCode * 59) + this.NumericRangesRepresent.GetHashCode();
                }
                if (this.CalcDimensionName != null)
                {
                    hashCode = (hashCode * 59) + this.CalcDimensionName.GetHashCode();
                }
                if (this.CalcSumMember != null)
                {
                    hashCode = (hashCode * 59) + this.CalcSumMember.GetHashCode();
                }
                if (this.CalcCountMember != null)
                {
                    hashCode = (hashCode * 59) + this.CalcCountMember.GetHashCode();
                }
                if (this.CalcMinimumMember != null)
                {
                    hashCode = (hashCode * 59) + this.CalcMinimumMember.GetHashCode();
                }
                if (this.CalcMaximumMember != null)
                {
                    hashCode = (hashCode * 59) + this.CalcMaximumMember.GetHashCode();
                }
                if (this.CalcAverageMember != null)
                {
                    hashCode = (hashCode * 59) + this.CalcAverageMember.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
