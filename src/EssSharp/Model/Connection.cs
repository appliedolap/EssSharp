/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Connection
    /// </summary>
    [DataContract(Name = "Connection")]
    public partial class Connection : IEquatable<Connection>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FILE for value: FILE
            /// </summary>
            [EnumMember(Value = "FILE")]
            FILE = 1,

            /// <summary>
            /// Enum DB for value: DB
            /// </summary>
            [EnumMember(Value = "DB")]
            DB = 2,

            /// <summary>
            /// Enum ESSBASE for value: ESSBASE
            /// </summary>
            [EnumMember(Value = "ESSBASE")]
            ESSBASE = 3,

            /// <summary>
            /// Enum BI for value: BI
            /// </summary>
            [EnumMember(Value = "BI")]
            BI = 4

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines Subtype
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubtypeEnum
        {
            /// <summary>
            /// Enum TEMPLATE for value: TEMPLATE
            /// </summary>
            [EnumMember(Value = "TEMPLATE")]
            TEMPLATE = 1,

            /// <summary>
            /// Enum EXCELFILE for value: EXCELFILE
            /// </summary>
            [EnumMember(Value = "EXCELFILE")]
            EXCELFILE = 2,

            /// <summary>
            /// Enum DB for value: DB
            /// </summary>
            [EnumMember(Value = "DB")]
            DB = 3,

            /// <summary>
            /// Enum DELIMITEDFILE for value: DELIMITEDFILE
            /// </summary>
            [EnumMember(Value = "DELIMITEDFILE")]
            DELIMITEDFILE = 4,

            /// <summary>
            /// Enum FIXEDWIDTHFILE for value: FIXEDWIDTHFILE
            /// </summary>
            [EnumMember(Value = "FIXEDWIDTHFILE")]
            FIXEDWIDTHFILE = 5,

            /// <summary>
            /// Enum BI for value: BI
            /// </summary>
            [EnumMember(Value = "BI")]
            BI = 6,

            /// <summary>
            /// Enum ESSBASE for value: ESSBASE
            /// </summary>
            [EnumMember(Value = "ESSBASE")]
            ESSBASE = 7,

            /// <summary>
            /// Enum JDBC for value: JDBC
            /// </summary>
            [EnumMember(Value = "JDBC")]
            JDBC = 8,

            /// <summary>
            /// Enum SPARK for value: SPARK
            /// </summary>
            [EnumMember(Value = "SPARK")]
            SPARK = 9,

            /// <summary>
            /// Enum MSSQL for value: MS_SQL
            /// </summary>
            [EnumMember(Value = "MS_SQL")]
            MSSQL = 10,

            /// <summary>
            /// Enum MYSQL for value: MYSQL
            /// </summary>
            [EnumMember(Value = "MYSQL")]
            MYSQL = 11,

            /// <summary>
            /// Enum DB2 for value: DB2
            /// </summary>
            [EnumMember(Value = "DB2")]
            DB2 = 12,

            /// <summary>
            /// Enum ORACLE for value: ORACLE
            /// </summary>
            [EnumMember(Value = "ORACLE")]
            ORACLE = 13,

            /// <summary>
            /// Enum FILE for value: FILE
            /// </summary>
            [EnumMember(Value = "FILE")]
            FILE = 14

        }


        /// <summary>
        /// Gets or Sets Subtype
        /// </summary>
        [DataMember(Name = "subtype", EmitDefaultValue = false)]
        public SubtypeEnum? Subtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Connection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Connection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Connection" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="path">path.</param>
        /// <param name="catalog">catalog.</param>
        /// <param name="host">host.</param>
        /// <param name="port">port.</param>
        /// <param name="user">user.</param>
        /// <param name="password">password.</param>
        /// <param name="encrypted">encrypted.</param>
        /// <param name="token">token.</param>
        /// <param name="sid">sid.</param>
        /// <param name="service">service.</param>
        /// <param name="schema">schema.</param>
        /// <param name="dbURL">dbURL.</param>
        /// <param name="dbDriver">dbDriver.</param>
        /// <param name="datasource">datasource.</param>
        /// <param name="subtype">subtype.</param>
        /// <param name="walletPath">walletPath.</param>
        /// <param name="repoWallet">repoWallet.</param>
        /// <param name="minPoolSize">minPoolSize.</param>
        /// <param name="maxPoolSize">maxPoolSize.</param>
        /// <param name="links">links.</param>
        public Connection(string description = default(string), string name = default(string), TypeEnum type = default(TypeEnum), string path = default(string), bool catalog = default(bool), string host = default(string), int port = default(int), string user = default(string), string password = default(string), bool encrypted = default(bool), string token = default(string), string sid = default(string), string service = default(string), string schema = default(string), string dbURL = default(string), string dbDriver = default(string), string datasource = default(string), SubtypeEnum? subtype = default(SubtypeEnum?), string walletPath = default(string), bool repoWallet = default(bool), int minPoolSize = default(int), int maxPoolSize = default(int), List<Link> links = default(List<Link>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Connection and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.Description = description;
            this.Path = path;
            this.Catalog = catalog;
            this.Host = host;
            this.Port = port;
            this.User = user;
            this.Password = password;
            this.Encrypted = encrypted;
            this.Token = token;
            this.Sid = sid;
            this.Service = service;
            this.Schema = schema;
            this.DbURL = dbURL;
            this.DbDriver = dbDriver;
            this.Datasource = datasource;
            this.Subtype = subtype;
            this.WalletPath = walletPath;
            this.RepoWallet = repoWallet;
            this.MinPoolSize = minPoolSize;
            this.MaxPoolSize = maxPoolSize;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Catalog
        /// </summary>
        [DataMember(Name = "catalog", EmitDefaultValue = true)]
        public bool Catalog { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Encrypted
        /// </summary>
        [DataMember(Name = "encrypted", EmitDefaultValue = true)]
        public bool Encrypted { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [DataMember(Name = "sid", EmitDefaultValue = false)]
        public string Sid { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", EmitDefaultValue = false)]
        public string Service { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or Sets DbURL
        /// </summary>
        [DataMember(Name = "dbURL", EmitDefaultValue = false)]
        public string DbURL { get; set; }

        /// <summary>
        /// Gets or Sets DbDriver
        /// </summary>
        [DataMember(Name = "dbDriver", EmitDefaultValue = false)]
        public string DbDriver { get; set; }

        /// <summary>
        /// Gets or Sets Datasource
        /// </summary>
        [DataMember(Name = "datasource", EmitDefaultValue = false)]
        public string Datasource { get; set; }

        /// <summary>
        /// Gets or Sets WalletPath
        /// </summary>
        [DataMember(Name = "walletPath", EmitDefaultValue = false)]
        public string WalletPath { get; set; }

        /// <summary>
        /// Gets or Sets RepoWallet
        /// </summary>
        [DataMember(Name = "repoWallet", EmitDefaultValue = true)]
        public bool RepoWallet { get; set; }

        /// <summary>
        /// Gets or Sets MinPoolSize
        /// </summary>
        [DataMember(Name = "minPoolSize", EmitDefaultValue = false)]
        public int MinPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxPoolSize
        /// </summary>
        [DataMember(Name = "maxPoolSize", EmitDefaultValue = false)]
        public int MaxPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Connection {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Catalog: ").Append(Catalog).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  DbURL: ").Append(DbURL).Append("\n");
            sb.Append("  DbDriver: ").Append(DbDriver).Append("\n");
            sb.Append("  Datasource: ").Append(Datasource).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  WalletPath: ").Append(WalletPath).Append("\n");
            sb.Append("  RepoWallet: ").Append(RepoWallet).Append("\n");
            sb.Append("  MinPoolSize: ").Append(MinPoolSize).Append("\n");
            sb.Append("  MaxPoolSize: ").Append(MaxPoolSize).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Connection);
        }

        /// <summary>
        /// Returns true if Connection instances are equal
        /// </summary>
        /// <param name="input">Instance of Connection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Connection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Catalog == input.Catalog ||
                    this.Catalog.Equals(input.Catalog)
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Encrypted == input.Encrypted ||
                    this.Encrypted.Equals(input.Encrypted)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.DbURL == input.DbURL ||
                    (this.DbURL != null &&
                    this.DbURL.Equals(input.DbURL))
                ) && 
                (
                    this.DbDriver == input.DbDriver ||
                    (this.DbDriver != null &&
                    this.DbDriver.Equals(input.DbDriver))
                ) && 
                (
                    this.Datasource == input.Datasource ||
                    (this.Datasource != null &&
                    this.Datasource.Equals(input.Datasource))
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    this.Subtype.Equals(input.Subtype)
                ) && 
                (
                    this.WalletPath == input.WalletPath ||
                    (this.WalletPath != null &&
                    this.WalletPath.Equals(input.WalletPath))
                ) && 
                (
                    this.RepoWallet == input.RepoWallet ||
                    this.RepoWallet.Equals(input.RepoWallet)
                ) && 
                (
                    this.MinPoolSize == input.MinPoolSize ||
                    this.MinPoolSize.Equals(input.MinPoolSize)
                ) && 
                (
                    this.MaxPoolSize == input.MaxPoolSize ||
                    this.MaxPoolSize.Equals(input.MaxPoolSize)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Catalog.GetHashCode();
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Encrypted.GetHashCode();
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.Sid != null)
                {
                    hashCode = (hashCode * 59) + this.Sid.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.Schema != null)
                {
                    hashCode = (hashCode * 59) + this.Schema.GetHashCode();
                }
                if (this.DbURL != null)
                {
                    hashCode = (hashCode * 59) + this.DbURL.GetHashCode();
                }
                if (this.DbDriver != null)
                {
                    hashCode = (hashCode * 59) + this.DbDriver.GetHashCode();
                }
                if (this.Datasource != null)
                {
                    hashCode = (hashCode * 59) + this.Datasource.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Subtype.GetHashCode();
                if (this.WalletPath != null)
                {
                    hashCode = (hashCode * 59) + this.WalletPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RepoWallet.GetHashCode();
                hashCode = (hashCode * 59) + this.MinPoolSize.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPoolSize.GetHashCode();
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
