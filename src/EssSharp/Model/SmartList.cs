/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// SmartList
    /// </summary>
    [DataContract(Name = "SmartList")]
    public partial class SmartList : IEquatable<SmartList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartList" /> class.
        /// </summary>
        /// <param name="incrementalNumber">incrementalNumber.</param>
        /// <param name="startNumber">startNumber.</param>
        /// <param name="missingName">missingName.</param>
        /// <param name="name">name.</param>
        /// <param name="outOfRangeName">outOfRangeName.</param>
        /// <param name="removeUnspecified">removeUnspecified.</param>
        public SmartList(int incrementalNumber = default(int), int startNumber = default(int), string missingName = default(string), string name = default(string), string outOfRangeName = default(string), int removeUnspecified = default(int))
        {
            this.IncrementalNumber = incrementalNumber;
            this.StartNumber = startNumber;
            this.MissingName = missingName;
            this.Name = name;
            this.OutOfRangeName = outOfRangeName;
            this.RemoveUnspecified = removeUnspecified;
        }

        /// <summary>
        /// Gets or Sets IncrementalNumber
        /// </summary>
        [DataMember(Name = "incrementalNumber", EmitDefaultValue = false)]
        public int IncrementalNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartNumber
        /// </summary>
        [DataMember(Name = "startNumber", EmitDefaultValue = false)]
        public int StartNumber { get; set; }

        /// <summary>
        /// Gets or Sets MissingName
        /// </summary>
        [DataMember(Name = "missingName", EmitDefaultValue = false)]
        public string MissingName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OutOfRangeName
        /// </summary>
        [DataMember(Name = "outOfRangeName", EmitDefaultValue = false)]
        public string OutOfRangeName { get; set; }

        /// <summary>
        /// Gets or Sets RemoveUnspecified
        /// </summary>
        [DataMember(Name = "removeUnspecified", EmitDefaultValue = false)]
        public int RemoveUnspecified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmartList {\n");
            sb.Append("  IncrementalNumber: ").Append(IncrementalNumber).Append("\n");
            sb.Append("  StartNumber: ").Append(StartNumber).Append("\n");
            sb.Append("  MissingName: ").Append(MissingName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OutOfRangeName: ").Append(OutOfRangeName).Append("\n");
            sb.Append("  RemoveUnspecified: ").Append(RemoveUnspecified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmartList);
        }

        /// <summary>
        /// Returns true if SmartList instances are equal
        /// </summary>
        /// <param name="input">Instance of SmartList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmartList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncrementalNumber == input.IncrementalNumber ||
                    this.IncrementalNumber.Equals(input.IncrementalNumber)
                ) && 
                (
                    this.StartNumber == input.StartNumber ||
                    this.StartNumber.Equals(input.StartNumber)
                ) && 
                (
                    this.MissingName == input.MissingName ||
                    (this.MissingName != null &&
                    this.MissingName.Equals(input.MissingName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OutOfRangeName == input.OutOfRangeName ||
                    (this.OutOfRangeName != null &&
                    this.OutOfRangeName.Equals(input.OutOfRangeName))
                ) && 
                (
                    this.RemoveUnspecified == input.RemoveUnspecified ||
                    this.RemoveUnspecified.Equals(input.RemoveUnspecified)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IncrementalNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.StartNumber.GetHashCode();
                if (this.MissingName != null)
                {
                    hashCode = (hashCode * 59) + this.MissingName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OutOfRangeName != null)
                {
                    hashCode = (hashCode * 59) + this.OutOfRangeName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RemoveUnspecified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
