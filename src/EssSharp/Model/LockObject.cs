/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// LockObject
    /// </summary>
    [DataContract(Name = "LockObject")]
    public partial class LockObject : IEquatable<LockObject>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum OUTLINE for value: OUTLINE
            /// </summary>
            [EnumMember(Value = "OUTLINE")]
            OUTLINE = 1,

            /// <summary>
            /// Enum CALCSCRIPT for value: CALCSCRIPT
            /// </summary>
            [EnumMember(Value = "CALCSCRIPT")]
            CALCSCRIPT = 2,

            /// <summary>
            /// Enum REPORT for value: REPORT
            /// </summary>
            [EnumMember(Value = "REPORT")]
            REPORT = 3,

            /// <summary>
            /// Enum RULES for value: RULES
            /// </summary>
            [EnumMember(Value = "RULES")]
            RULES = 4,

            /// <summary>
            /// Enum ALIAS for value: ALIAS
            /// </summary>
            [EnumMember(Value = "ALIAS")]
            ALIAS = 5,

            /// <summary>
            /// Enum STRUCTURE for value: STRUCTURE
            /// </summary>
            [EnumMember(Value = "STRUCTURE")]
            STRUCTURE = 6,

            /// <summary>
            /// Enum ASCBACKUP for value: ASCBACKUP
            /// </summary>
            [EnumMember(Value = "ASCBACKUP")]
            ASCBACKUP = 7,

            /// <summary>
            /// Enum BINBACKUP for value: BINBACKUP
            /// </summary>
            [EnumMember(Value = "BINBACKUP")]
            BINBACKUP = 8,

            /// <summary>
            /// Enum EXCEL for value: EXCEL
            /// </summary>
            [EnumMember(Value = "EXCEL")]
            EXCEL = 9,

            /// <summary>
            /// Enum XLSX for value: XLSX
            /// </summary>
            [EnumMember(Value = "XLSX")]
            XLSX = 10,

            /// <summary>
            /// Enum XLSM for value: XLSM
            /// </summary>
            [EnumMember(Value = "XLSM")]
            XLSM = 11,

            /// <summary>
            /// Enum MAXL for value: MAXL
            /// </summary>
            [EnumMember(Value = "MAXL")]
            MAXL = 12,

            /// <summary>
            /// Enum ZIP for value: ZIP
            /// </summary>
            [EnumMember(Value = "ZIP")]
            ZIP = 13,

            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 14,

            /// <summary>
            /// Enum LOTUS2 for value: LOTUS2
            /// </summary>
            [EnumMember(Value = "LOTUS2")]
            LOTUS2 = 15,

            /// <summary>
            /// Enum LOTUS3 for value: LOTUS3
            /// </summary>
            [EnumMember(Value = "LOTUS3")]
            LOTUS3 = 16,

            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 17,

            /// <summary>
            /// Enum LOTUS4 for value: LOTUS4
            /// </summary>
            [EnumMember(Value = "LOTUS4")]
            LOTUS4 = 18,

            /// <summary>
            /// Enum WIZARD for value: WIZARD
            /// </summary>
            [EnumMember(Value = "WIZARD")]
            WIZARD = 19,

            /// <summary>
            /// Enum PARTITION for value: PARTITION
            /// </summary>
            [EnumMember(Value = "PARTITION")]
            PARTITION = 20,

            /// <summary>
            /// Enum SELECTION for value: SELECTION
            /// </summary>
            [EnumMember(Value = "SELECTION")]
            SELECTION = 21,

            /// <summary>
            /// Enum LRO for value: LRO
            /// </summary>
            [EnumMember(Value = "LRO")]
            LRO = 22,

            /// <summary>
            /// Enum EQD for value: EQD
            /// </summary>
            [EnumMember(Value = "EQD")]
            EQD = 23,

            /// <summary>
            /// Enum XML for value: XML
            /// </summary>
            [EnumMember(Value = "XML")]
            XML = 24,

            /// <summary>
            /// Enum JAVACDF for value: JAVA_CDF
            /// </summary>
            [EnumMember(Value = "JAVA_CDF")]
            JAVACDF = 25,

            /// <summary>
            /// Enum MAX for value: MAX
            /// </summary>
            [EnumMember(Value = "MAX")]
            MAX = 26,

            /// <summary>
            /// Enum BACKUP for value: BACKUP
            /// </summary>
            [EnumMember(Value = "BACKUP")]
            BACKUP = 27,

            /// <summary>
            /// Enum WORKSHEET for value: WORKSHEET
            /// </summary>
            [EnumMember(Value = "WORKSHEET")]
            WORKSHEET = 28,

            /// <summary>
            /// Enum DATA for value: DATA
            /// </summary>
            [EnumMember(Value = "DATA")]
            DATA = 29,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 30,

            /// <summary>
            /// Enum OUT for value: OUT
            /// </summary>
            [EnumMember(Value = "OUT")]
            OUT = 31,

            /// <summary>
            /// Enum GROOVY for value: GROOVY
            /// </summary>
            [EnumMember(Value = "GROOVY")]
            GROOVY = 32,

            /// <summary>
            /// Enum DRILLTHROUGH for value: DRILLTHROUGH
            /// </summary>
            [EnumMember(Value = "DRILLTHROUGH")]
            DRILLTHROUGH = 33,

            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 34,

            /// <summary>
            /// Enum MDX for value: MDX
            /// </summary>
            [EnumMember(Value = "MDX")]
            MDX = 35

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LockObject" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="user">user.</param>
        /// <param name="type">type.</param>
        /// <param name="time">time.</param>
        /// <param name="name">name.</param>
        public LockObject(List<Link> links = default(List<Link>), string user = default(string), TypeEnum? type = default(TypeEnum?), long time = default(long), string name = default(string))
        {
            this.Links = links;
            this.User = user;
            this.Type = type;
            this.Time = time;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public long Time { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LockObject {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LockObject);
        }

        /// <summary>
        /// Returns true if LockObject instances are equal
        /// </summary>
        /// <param name="input">Instance of LockObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LockObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
