/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// SettingsList
    /// </summary>
    [DataContract(Name = "SettingsList")]
    public partial class SettingsList : IEquatable<SettingsList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsList" /> class.
        /// </summary>
        /// <param name="general">general.</param>
        /// <param name="startup">startup.</param>
        /// <param name="calculation">calculation.</param>
        /// <param name="buffers">buffers.</param>
        /// <param name="compression">compression.</param>
        /// <param name="caches">caches.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="links">links.</param>
        public SettingsList(GeneralSettings general = default(GeneralSettings), StartupSettings startup = default(StartupSettings), CalculationSettings calculation = default(CalculationSettings), BufferSettings buffers = default(BufferSettings), List<CompressionSettings> compression = default(List<CompressionSettings>), CacheSettings caches = default(CacheSettings), TransactionSettings transactions = default(TransactionSettings), List<Link> links = default(List<Link>))
        {
            this.General = general;
            this.Startup = startup;
            this.Calculation = calculation;
            this.Buffers = buffers;
            this.Compression = compression;
            this.Caches = caches;
            this.Transactions = transactions;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets General
        /// </summary>
        [DataMember(Name = "general", EmitDefaultValue = false)]
        public GeneralSettings General { get; set; }

        /// <summary>
        /// Gets or Sets Startup
        /// </summary>
        [DataMember(Name = "startup", EmitDefaultValue = false)]
        public StartupSettings Startup { get; set; }

        /// <summary>
        /// Gets or Sets Calculation
        /// </summary>
        [DataMember(Name = "calculation", EmitDefaultValue = false)]
        public CalculationSettings Calculation { get; set; }

        /// <summary>
        /// Gets or Sets Buffers
        /// </summary>
        [DataMember(Name = "buffers", EmitDefaultValue = false)]
        public BufferSettings Buffers { get; set; }

        /// <summary>
        /// Gets or Sets Compression
        /// </summary>
        [DataMember(Name = "compression", EmitDefaultValue = false)]
        public List<CompressionSettings> Compression { get; set; }

        /// <summary>
        /// Gets or Sets Caches
        /// </summary>
        [DataMember(Name = "caches", EmitDefaultValue = false)]
        public CacheSettings Caches { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public TransactionSettings Transactions { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettingsList {\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  Startup: ").Append(Startup).Append("\n");
            sb.Append("  Calculation: ").Append(Calculation).Append("\n");
            sb.Append("  Buffers: ").Append(Buffers).Append("\n");
            sb.Append("  Compression: ").Append(Compression).Append("\n");
            sb.Append("  Caches: ").Append(Caches).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettingsList);
        }

        /// <summary>
        /// Returns true if SettingsList instances are equal
        /// </summary>
        /// <param name="input">Instance of SettingsList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingsList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.General == input.General ||
                    (this.General != null &&
                    this.General.Equals(input.General))
                ) && 
                (
                    this.Startup == input.Startup ||
                    (this.Startup != null &&
                    this.Startup.Equals(input.Startup))
                ) && 
                (
                    this.Calculation == input.Calculation ||
                    (this.Calculation != null &&
                    this.Calculation.Equals(input.Calculation))
                ) && 
                (
                    this.Buffers == input.Buffers ||
                    (this.Buffers != null &&
                    this.Buffers.Equals(input.Buffers))
                ) && 
                (
                    this.Compression == input.Compression ||
                    this.Compression != null &&
                    input.Compression != null &&
                    this.Compression.SequenceEqual(input.Compression)
                ) && 
                (
                    this.Caches == input.Caches ||
                    (this.Caches != null &&
                    this.Caches.Equals(input.Caches))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.General != null)
                {
                    hashCode = (hashCode * 59) + this.General.GetHashCode();
                }
                if (this.Startup != null)
                {
                    hashCode = (hashCode * 59) + this.Startup.GetHashCode();
                }
                if (this.Calculation != null)
                {
                    hashCode = (hashCode * 59) + this.Calculation.GetHashCode();
                }
                if (this.Buffers != null)
                {
                    hashCode = (hashCode * 59) + this.Buffers.GetHashCode();
                }
                if (this.Compression != null)
                {
                    hashCode = (hashCode * 59) + this.Compression.GetHashCode();
                }
                if (this.Caches != null)
                {
                    hashCode = (hashCode * 59) + this.Caches.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
