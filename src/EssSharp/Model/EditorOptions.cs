/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// EditorOptions
    /// </summary>
    [DataContract(Name = "EditorOptions")]
    public partial class EditorOptions : IEquatable<EditorOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines ViewMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViewModeEnum
        {
            /// <summary>
            /// Enum DIMBUILD for value: DIMBUILD
            /// </summary>
            [EnumMember(Value = "DIMBUILD")]
            DIMBUILD = 1,

            /// <summary>
            /// Enum DATALOAD for value: DATALOAD
            /// </summary>
            [EnumMember(Value = "DATALOAD")]
            DATALOAD = 2

        }


        /// <summary>
        /// Gets or Sets ViewMode
        /// </summary>
        [DataMember(Name = "viewMode", EmitDefaultValue = false)]
        public ViewModeEnum? ViewMode { get; set; }
        /// <summary>
        /// Defines DataFileType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataFileTypeEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum EXCEL for value: EXCEL
            /// </summary>
            [EnumMember(Value = "EXCEL")]
            EXCEL = 2,

            /// <summary>
            /// Enum LOTUS2 for value: LOTUS2
            /// </summary>
            [EnumMember(Value = "LOTUS2")]
            LOTUS2 = 3,

            /// <summary>
            /// Enum LOTUS3 for value: LOTUS3
            /// </summary>
            [EnumMember(Value = "LOTUS3")]
            LOTUS3 = 4,

            /// <summary>
            /// Enum LOTUS4 for value: LOTUS4
            /// </summary>
            [EnumMember(Value = "LOTUS4")]
            LOTUS4 = 5,

            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 6

        }


        /// <summary>
        /// Gets or Sets DataFileType
        /// </summary>
        [DataMember(Name = "dataFileType", EmitDefaultValue = false)]
        public DataFileTypeEnum? DataFileType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditorOptions" /> class.
        /// </summary>
        /// <param name="application">application.</param>
        /// <param name="database">database.</param>
        /// <param name="server">server.</param>
        /// <param name="_object">_object.</param>
        /// <param name="dataFile">dataFile.</param>
        /// <param name="dataFileApplication">dataFileApplication.</param>
        /// <param name="dataFileDatabase">dataFileDatabase.</param>
        /// <param name="dataFileServer">dataFileServer.</param>
        /// <param name="startRecord">startRecord.</param>
        /// <param name="viewCount">viewCount.</param>
        /// <param name="viewGridLines">viewGridLines.</param>
        /// <param name="viewIgnored">viewIgnored.</param>
        /// <param name="viewRawData">viewRawData.</param>
        /// <param name="viewToolbar">viewToolbar.</param>
        /// <param name="viewMode">viewMode.</param>
        /// <param name="dataFileType">dataFileType.</param>
        public EditorOptions(string application = default(string), string database = default(string), string server = default(string), string _object = default(string), string dataFile = default(string), string dataFileApplication = default(string), string dataFileDatabase = default(string), string dataFileServer = default(string), int startRecord = default(int), int viewCount = default(int), bool viewGridLines = default(bool), bool viewIgnored = default(bool), bool viewRawData = default(bool), bool viewToolbar = default(bool), ViewModeEnum? viewMode = default(ViewModeEnum?), DataFileTypeEnum? dataFileType = default(DataFileTypeEnum?))
        {
            this.Application = application;
            this.Database = database;
            this.Server = server;
            this.Object = _object;
            this.DataFile = dataFile;
            this.DataFileApplication = dataFileApplication;
            this.DataFileDatabase = dataFileDatabase;
            this.DataFileServer = dataFileServer;
            this.StartRecord = startRecord;
            this.ViewCount = viewCount;
            this.ViewGridLines = viewGridLines;
            this.ViewIgnored = viewIgnored;
            this.ViewRawData = viewRawData;
            this.ViewToolbar = viewToolbar;
            this.ViewMode = viewMode;
            this.DataFileType = dataFileType;
        }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Database
        /// </summary>
        [DataMember(Name = "database", EmitDefaultValue = false)]
        public string Database { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public string Object { get; set; }

        /// <summary>
        /// Gets or Sets DataFile
        /// </summary>
        [DataMember(Name = "dataFile", EmitDefaultValue = false)]
        public string DataFile { get; set; }

        /// <summary>
        /// Gets or Sets DataFileApplication
        /// </summary>
        [DataMember(Name = "dataFileApplication", EmitDefaultValue = false)]
        public string DataFileApplication { get; set; }

        /// <summary>
        /// Gets or Sets DataFileDatabase
        /// </summary>
        [DataMember(Name = "dataFileDatabase", EmitDefaultValue = false)]
        public string DataFileDatabase { get; set; }

        /// <summary>
        /// Gets or Sets DataFileServer
        /// </summary>
        [DataMember(Name = "dataFileServer", EmitDefaultValue = false)]
        public string DataFileServer { get; set; }

        /// <summary>
        /// Gets or Sets StartRecord
        /// </summary>
        [DataMember(Name = "startRecord", EmitDefaultValue = false)]
        public int StartRecord { get; set; }

        /// <summary>
        /// Gets or Sets ViewCount
        /// </summary>
        [DataMember(Name = "viewCount", EmitDefaultValue = false)]
        public int ViewCount { get; set; }

        /// <summary>
        /// Gets or Sets ViewGridLines
        /// </summary>
        [DataMember(Name = "viewGridLines", EmitDefaultValue = true)]
        public bool ViewGridLines { get; set; }

        /// <summary>
        /// Gets or Sets ViewIgnored
        /// </summary>
        [DataMember(Name = "viewIgnored", EmitDefaultValue = true)]
        public bool ViewIgnored { get; set; }

        /// <summary>
        /// Gets or Sets ViewRawData
        /// </summary>
        [DataMember(Name = "viewRawData", EmitDefaultValue = true)]
        public bool ViewRawData { get; set; }

        /// <summary>
        /// Gets or Sets ViewToolbar
        /// </summary>
        [DataMember(Name = "viewToolbar", EmitDefaultValue = true)]
        public bool ViewToolbar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditorOptions {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  DataFile: ").Append(DataFile).Append("\n");
            sb.Append("  DataFileApplication: ").Append(DataFileApplication).Append("\n");
            sb.Append("  DataFileDatabase: ").Append(DataFileDatabase).Append("\n");
            sb.Append("  DataFileServer: ").Append(DataFileServer).Append("\n");
            sb.Append("  StartRecord: ").Append(StartRecord).Append("\n");
            sb.Append("  ViewCount: ").Append(ViewCount).Append("\n");
            sb.Append("  ViewGridLines: ").Append(ViewGridLines).Append("\n");
            sb.Append("  ViewIgnored: ").Append(ViewIgnored).Append("\n");
            sb.Append("  ViewRawData: ").Append(ViewRawData).Append("\n");
            sb.Append("  ViewToolbar: ").Append(ViewToolbar).Append("\n");
            sb.Append("  ViewMode: ").Append(ViewMode).Append("\n");
            sb.Append("  DataFileType: ").Append(DataFileType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditorOptions);
        }

        /// <summary>
        /// Returns true if EditorOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of EditorOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditorOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Database == input.Database ||
                    (this.Database != null &&
                    this.Database.Equals(input.Database))
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.DataFile == input.DataFile ||
                    (this.DataFile != null &&
                    this.DataFile.Equals(input.DataFile))
                ) && 
                (
                    this.DataFileApplication == input.DataFileApplication ||
                    (this.DataFileApplication != null &&
                    this.DataFileApplication.Equals(input.DataFileApplication))
                ) && 
                (
                    this.DataFileDatabase == input.DataFileDatabase ||
                    (this.DataFileDatabase != null &&
                    this.DataFileDatabase.Equals(input.DataFileDatabase))
                ) && 
                (
                    this.DataFileServer == input.DataFileServer ||
                    (this.DataFileServer != null &&
                    this.DataFileServer.Equals(input.DataFileServer))
                ) && 
                (
                    this.StartRecord == input.StartRecord ||
                    this.StartRecord.Equals(input.StartRecord)
                ) && 
                (
                    this.ViewCount == input.ViewCount ||
                    this.ViewCount.Equals(input.ViewCount)
                ) && 
                (
                    this.ViewGridLines == input.ViewGridLines ||
                    this.ViewGridLines.Equals(input.ViewGridLines)
                ) && 
                (
                    this.ViewIgnored == input.ViewIgnored ||
                    this.ViewIgnored.Equals(input.ViewIgnored)
                ) && 
                (
                    this.ViewRawData == input.ViewRawData ||
                    this.ViewRawData.Equals(input.ViewRawData)
                ) && 
                (
                    this.ViewToolbar == input.ViewToolbar ||
                    this.ViewToolbar.Equals(input.ViewToolbar)
                ) && 
                (
                    this.ViewMode == input.ViewMode ||
                    this.ViewMode.Equals(input.ViewMode)
                ) && 
                (
                    this.DataFileType == input.DataFileType ||
                    this.DataFileType.Equals(input.DataFileType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Database != null)
                {
                    hashCode = (hashCode * 59) + this.Database.GetHashCode();
                }
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.Object != null)
                {
                    hashCode = (hashCode * 59) + this.Object.GetHashCode();
                }
                if (this.DataFile != null)
                {
                    hashCode = (hashCode * 59) + this.DataFile.GetHashCode();
                }
                if (this.DataFileApplication != null)
                {
                    hashCode = (hashCode * 59) + this.DataFileApplication.GetHashCode();
                }
                if (this.DataFileDatabase != null)
                {
                    hashCode = (hashCode * 59) + this.DataFileDatabase.GetHashCode();
                }
                if (this.DataFileServer != null)
                {
                    hashCode = (hashCode * 59) + this.DataFileServer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartRecord.GetHashCode();
                hashCode = (hashCode * 59) + this.ViewCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ViewGridLines.GetHashCode();
                hashCode = (hashCode * 59) + this.ViewIgnored.GetHashCode();
                hashCode = (hashCode * 59) + this.ViewRawData.GetHashCode();
                hashCode = (hashCode * 59) + this.ViewToolbar.GetHashCode();
                hashCode = (hashCode * 59) + this.ViewMode.GetHashCode();
                hashCode = (hashCode * 59) + this.DataFileType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
