/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// RuntimeStatistics
    /// </summary>
    [DataContract(Name = "RuntimeStatistics")]
    public partial class RuntimeStatistics : IEquatable<RuntimeStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeStatistics" /> class.
        /// </summary>
        /// <param name="cacheHitRatio">cacheHitRatio.</param>
        /// <param name="currentCacheSize">currentCacheSize.</param>
        /// <param name="currentCacheSizeLimit">currentCacheSizeLimit.</param>
        /// <param name="pageReadsSinceLastStartup">pageReadsSinceLastStartup.</param>
        /// <param name="pageWritesSinceLastStartup">pageWritesSinceLastStartup.</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="diskSpaceAllocatedForData">diskSpaceAllocatedForData.</param>
        /// <param name="diskSpaceUsedByData">diskSpaceUsedByData.</param>
        /// <param name="temporaryDiskSpaceAllocated">temporaryDiskSpaceAllocated.</param>
        /// <param name="temporaryDiskSpaceUsed">temporaryDiskSpaceUsed.</param>
        /// <param name="hitRatioOnIndexCache">hitRatioOnIndexCache.</param>
        /// <param name="hitRatioOnDataCache">hitRatioOnDataCache.</param>
        /// <param name="numberOfIndexPageReads">numberOfIndexPageReads.</param>
        /// <param name="numberOfIndexPageWrites">numberOfIndexPageWrites.</param>
        /// <param name="numberOfDataBlockReads">numberOfDataBlockReads.</param>
        /// <param name="numberOfDataBlockWrites">numberOfDataBlockWrites.</param>
        /// <param name="hitRatioOnDataFileCache">hitRatioOnDataFileCache.</param>
        public RuntimeStatistics(double cacheHitRatio = default(double), double currentCacheSize = default(double), double currentCacheSizeLimit = default(double), double pageReadsSinceLastStartup = default(double), double pageWritesSinceLastStartup = default(double), double pageSize = default(double), double diskSpaceAllocatedForData = default(double), double diskSpaceUsedByData = default(double), double temporaryDiskSpaceAllocated = default(double), double temporaryDiskSpaceUsed = default(double), double hitRatioOnIndexCache = default(double), double hitRatioOnDataCache = default(double), double numberOfIndexPageReads = default(double), double numberOfIndexPageWrites = default(double), double numberOfDataBlockReads = default(double), double numberOfDataBlockWrites = default(double), double hitRatioOnDataFileCache = default(double))
        {
            this.CacheHitRatio = cacheHitRatio;
            this.CurrentCacheSize = currentCacheSize;
            this.CurrentCacheSizeLimit = currentCacheSizeLimit;
            this.PageReadsSinceLastStartup = pageReadsSinceLastStartup;
            this.PageWritesSinceLastStartup = pageWritesSinceLastStartup;
            this.PageSize = pageSize;
            this.DiskSpaceAllocatedForData = diskSpaceAllocatedForData;
            this.DiskSpaceUsedByData = diskSpaceUsedByData;
            this.TemporaryDiskSpaceAllocated = temporaryDiskSpaceAllocated;
            this.TemporaryDiskSpaceUsed = temporaryDiskSpaceUsed;
            this.HitRatioOnIndexCache = hitRatioOnIndexCache;
            this.HitRatioOnDataCache = hitRatioOnDataCache;
            this.NumberOfIndexPageReads = numberOfIndexPageReads;
            this.NumberOfIndexPageWrites = numberOfIndexPageWrites;
            this.NumberOfDataBlockReads = numberOfDataBlockReads;
            this.NumberOfDataBlockWrites = numberOfDataBlockWrites;
            this.HitRatioOnDataFileCache = hitRatioOnDataFileCache;
        }

        /// <summary>
        /// Gets or Sets CacheHitRatio
        /// </summary>
        [DataMember(Name = "cacheHitRatio", EmitDefaultValue = false)]
        public double CacheHitRatio { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCacheSize
        /// </summary>
        [DataMember(Name = "currentCacheSize", EmitDefaultValue = false)]
        public double CurrentCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCacheSizeLimit
        /// </summary>
        [DataMember(Name = "currentCacheSizeLimit", EmitDefaultValue = false)]
        public double CurrentCacheSizeLimit { get; set; }

        /// <summary>
        /// Gets or Sets PageReadsSinceLastStartup
        /// </summary>
        [DataMember(Name = "pageReadsSinceLastStartup", EmitDefaultValue = false)]
        public double PageReadsSinceLastStartup { get; set; }

        /// <summary>
        /// Gets or Sets PageWritesSinceLastStartup
        /// </summary>
        [DataMember(Name = "pageWritesSinceLastStartup", EmitDefaultValue = false)]
        public double PageWritesSinceLastStartup { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "pageSize", EmitDefaultValue = false)]
        public double PageSize { get; set; }

        /// <summary>
        /// Gets or Sets DiskSpaceAllocatedForData
        /// </summary>
        [DataMember(Name = "diskSpaceAllocatedForData", EmitDefaultValue = false)]
        public double DiskSpaceAllocatedForData { get; set; }

        /// <summary>
        /// Gets or Sets DiskSpaceUsedByData
        /// </summary>
        [DataMember(Name = "diskSpaceUsedByData", EmitDefaultValue = false)]
        public double DiskSpaceUsedByData { get; set; }

        /// <summary>
        /// Gets or Sets TemporaryDiskSpaceAllocated
        /// </summary>
        [DataMember(Name = "temporaryDiskSpaceAllocated", EmitDefaultValue = false)]
        public double TemporaryDiskSpaceAllocated { get; set; }

        /// <summary>
        /// Gets or Sets TemporaryDiskSpaceUsed
        /// </summary>
        [DataMember(Name = "temporaryDiskSpaceUsed", EmitDefaultValue = false)]
        public double TemporaryDiskSpaceUsed { get; set; }

        /// <summary>
        /// Gets or Sets HitRatioOnIndexCache
        /// </summary>
        [DataMember(Name = "hitRatioOnIndexCache", EmitDefaultValue = false)]
        public double HitRatioOnIndexCache { get; set; }

        /// <summary>
        /// Gets or Sets HitRatioOnDataCache
        /// </summary>
        [DataMember(Name = "hitRatioOnDataCache", EmitDefaultValue = false)]
        public double HitRatioOnDataCache { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfIndexPageReads
        /// </summary>
        [DataMember(Name = "numberOfIndexPageReads", EmitDefaultValue = false)]
        public double NumberOfIndexPageReads { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfIndexPageWrites
        /// </summary>
        [DataMember(Name = "numberOfIndexPageWrites", EmitDefaultValue = false)]
        public double NumberOfIndexPageWrites { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDataBlockReads
        /// </summary>
        [DataMember(Name = "numberOfDataBlockReads", EmitDefaultValue = false)]
        public double NumberOfDataBlockReads { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDataBlockWrites
        /// </summary>
        [DataMember(Name = "numberOfDataBlockWrites", EmitDefaultValue = false)]
        public double NumberOfDataBlockWrites { get; set; }

        /// <summary>
        /// Gets or Sets HitRatioOnDataFileCache
        /// </summary>
        [DataMember(Name = "hitRatioOnDataFileCache", EmitDefaultValue = false)]
        public double HitRatioOnDataFileCache { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuntimeStatistics {\n");
            sb.Append("  CacheHitRatio: ").Append(CacheHitRatio).Append("\n");
            sb.Append("  CurrentCacheSize: ").Append(CurrentCacheSize).Append("\n");
            sb.Append("  CurrentCacheSizeLimit: ").Append(CurrentCacheSizeLimit).Append("\n");
            sb.Append("  PageReadsSinceLastStartup: ").Append(PageReadsSinceLastStartup).Append("\n");
            sb.Append("  PageWritesSinceLastStartup: ").Append(PageWritesSinceLastStartup).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  DiskSpaceAllocatedForData: ").Append(DiskSpaceAllocatedForData).Append("\n");
            sb.Append("  DiskSpaceUsedByData: ").Append(DiskSpaceUsedByData).Append("\n");
            sb.Append("  TemporaryDiskSpaceAllocated: ").Append(TemporaryDiskSpaceAllocated).Append("\n");
            sb.Append("  TemporaryDiskSpaceUsed: ").Append(TemporaryDiskSpaceUsed).Append("\n");
            sb.Append("  HitRatioOnIndexCache: ").Append(HitRatioOnIndexCache).Append("\n");
            sb.Append("  HitRatioOnDataCache: ").Append(HitRatioOnDataCache).Append("\n");
            sb.Append("  NumberOfIndexPageReads: ").Append(NumberOfIndexPageReads).Append("\n");
            sb.Append("  NumberOfIndexPageWrites: ").Append(NumberOfIndexPageWrites).Append("\n");
            sb.Append("  NumberOfDataBlockReads: ").Append(NumberOfDataBlockReads).Append("\n");
            sb.Append("  NumberOfDataBlockWrites: ").Append(NumberOfDataBlockWrites).Append("\n");
            sb.Append("  HitRatioOnDataFileCache: ").Append(HitRatioOnDataFileCache).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuntimeStatistics);
        }

        /// <summary>
        /// Returns true if RuntimeStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of RuntimeStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeStatistics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CacheHitRatio == input.CacheHitRatio ||
                    this.CacheHitRatio.Equals(input.CacheHitRatio)
                ) && 
                (
                    this.CurrentCacheSize == input.CurrentCacheSize ||
                    this.CurrentCacheSize.Equals(input.CurrentCacheSize)
                ) && 
                (
                    this.CurrentCacheSizeLimit == input.CurrentCacheSizeLimit ||
                    this.CurrentCacheSizeLimit.Equals(input.CurrentCacheSizeLimit)
                ) && 
                (
                    this.PageReadsSinceLastStartup == input.PageReadsSinceLastStartup ||
                    this.PageReadsSinceLastStartup.Equals(input.PageReadsSinceLastStartup)
                ) && 
                (
                    this.PageWritesSinceLastStartup == input.PageWritesSinceLastStartup ||
                    this.PageWritesSinceLastStartup.Equals(input.PageWritesSinceLastStartup)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.DiskSpaceAllocatedForData == input.DiskSpaceAllocatedForData ||
                    this.DiskSpaceAllocatedForData.Equals(input.DiskSpaceAllocatedForData)
                ) && 
                (
                    this.DiskSpaceUsedByData == input.DiskSpaceUsedByData ||
                    this.DiskSpaceUsedByData.Equals(input.DiskSpaceUsedByData)
                ) && 
                (
                    this.TemporaryDiskSpaceAllocated == input.TemporaryDiskSpaceAllocated ||
                    this.TemporaryDiskSpaceAllocated.Equals(input.TemporaryDiskSpaceAllocated)
                ) && 
                (
                    this.TemporaryDiskSpaceUsed == input.TemporaryDiskSpaceUsed ||
                    this.TemporaryDiskSpaceUsed.Equals(input.TemporaryDiskSpaceUsed)
                ) && 
                (
                    this.HitRatioOnIndexCache == input.HitRatioOnIndexCache ||
                    this.HitRatioOnIndexCache.Equals(input.HitRatioOnIndexCache)
                ) && 
                (
                    this.HitRatioOnDataCache == input.HitRatioOnDataCache ||
                    this.HitRatioOnDataCache.Equals(input.HitRatioOnDataCache)
                ) && 
                (
                    this.NumberOfIndexPageReads == input.NumberOfIndexPageReads ||
                    this.NumberOfIndexPageReads.Equals(input.NumberOfIndexPageReads)
                ) && 
                (
                    this.NumberOfIndexPageWrites == input.NumberOfIndexPageWrites ||
                    this.NumberOfIndexPageWrites.Equals(input.NumberOfIndexPageWrites)
                ) && 
                (
                    this.NumberOfDataBlockReads == input.NumberOfDataBlockReads ||
                    this.NumberOfDataBlockReads.Equals(input.NumberOfDataBlockReads)
                ) && 
                (
                    this.NumberOfDataBlockWrites == input.NumberOfDataBlockWrites ||
                    this.NumberOfDataBlockWrites.Equals(input.NumberOfDataBlockWrites)
                ) && 
                (
                    this.HitRatioOnDataFileCache == input.HitRatioOnDataFileCache ||
                    this.HitRatioOnDataFileCache.Equals(input.HitRatioOnDataFileCache)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CacheHitRatio.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentCacheSize.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentCacheSizeLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.PageReadsSinceLastStartup.GetHashCode();
                hashCode = (hashCode * 59) + this.PageWritesSinceLastStartup.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                hashCode = (hashCode * 59) + this.DiskSpaceAllocatedForData.GetHashCode();
                hashCode = (hashCode * 59) + this.DiskSpaceUsedByData.GetHashCode();
                hashCode = (hashCode * 59) + this.TemporaryDiskSpaceAllocated.GetHashCode();
                hashCode = (hashCode * 59) + this.TemporaryDiskSpaceUsed.GetHashCode();
                hashCode = (hashCode * 59) + this.HitRatioOnIndexCache.GetHashCode();
                hashCode = (hashCode * 59) + this.HitRatioOnDataCache.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfIndexPageReads.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfIndexPageWrites.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfDataBlockReads.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfDataBlockWrites.GetHashCode();
                hashCode = (hashCode * 59) + this.HitRatioOnDataFileCache.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
