/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// RuleDataSource
    /// </summary>
    [DataContract(Name = "RuleDataSource")]
    public partial class RuleDataSource : IEquatable<RuleDataSource>, IValidatableObject
    {
        /// <summary>
        /// Defines TokensCombineOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TokensCombineOptionEnum
        {
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            [EnumMember(Value = "AND")]
            AND = 1,

            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            [EnumMember(Value = "OR")]
            OR = 2

        }


        /// <summary>
        /// Gets or Sets TokensCombineOption
        /// </summary>
        [DataMember(Name = "tokensCombineOption", EmitDefaultValue = false)]
        public TokensCombineOptionEnum? TokensCombineOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleDataSource" /> class.
        /// </summary>
        /// <param name="header">header.</param>
        /// <param name="name">name.</param>
        /// <param name="tokens">tokens.</param>
        /// <param name="tokensCombineOption">tokensCombineOption.</param>
        /// <param name="sqlProperties">sqlProperties.</param>
        /// <param name="fileProperties">fileProperties.</param>
        public RuleDataSource(string header = default(string), string name = default(string), List<string> tokens = default(List<string>), TokensCombineOptionEnum? tokensCombineOption = default(TokensCombineOptionEnum?), SQLProperties sqlProperties = default(SQLProperties), FileProperties fileProperties = default(FileProperties))
        {
            this.Header = header;
            this.Name = name;
            this.Tokens = tokens;
            this.TokensCombineOption = tokensCombineOption;
            this.SqlProperties = sqlProperties;
            this.FileProperties = fileProperties;
        }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = false)]
        public string Header { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [DataMember(Name = "tokens", EmitDefaultValue = false)]
        public List<string> Tokens { get; set; }

        /// <summary>
        /// Gets or Sets SqlProperties
        /// </summary>
        [DataMember(Name = "sqlProperties", EmitDefaultValue = false)]
        public SQLProperties SqlProperties { get; set; }

        /// <summary>
        /// Gets or Sets FileProperties
        /// </summary>
        [DataMember(Name = "fileProperties", EmitDefaultValue = false)]
        public FileProperties FileProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleDataSource {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  TokensCombineOption: ").Append(TokensCombineOption).Append("\n");
            sb.Append("  SqlProperties: ").Append(SqlProperties).Append("\n");
            sb.Append("  FileProperties: ").Append(FileProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleDataSource);
        }

        /// <summary>
        /// Returns true if RuleDataSource instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleDataSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleDataSource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.TokensCombineOption == input.TokensCombineOption ||
                    this.TokensCombineOption.Equals(input.TokensCombineOption)
                ) && 
                (
                    this.SqlProperties == input.SqlProperties ||
                    (this.SqlProperties != null &&
                    this.SqlProperties.Equals(input.SqlProperties))
                ) && 
                (
                    this.FileProperties == input.FileProperties ||
                    (this.FileProperties != null &&
                    this.FileProperties.Equals(input.FileProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Header != null)
                {
                    hashCode = (hashCode * 59) + this.Header.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Tokens != null)
                {
                    hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokensCombineOption.GetHashCode();
                if (this.SqlProperties != null)
                {
                    hashCode = (hashCode * 59) + this.SqlProperties.GetHashCode();
                }
                if (this.FileProperties != null)
                {
                    hashCode = (hashCode * 59) + this.FileProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
