/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// AreaBean
    /// </summary>
    [DataContract(Name = "AreaBean")]
    public partial class AreaBean : IEquatable<AreaBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AreaBean" /> class.
        /// </summary>
        /// <param name="sourceArea">sourceArea.</param>
        /// <param name="targetArea">targetArea.</param>
        /// <param name="sourceCellCount">sourceCellCount.</param>
        /// <param name="targetCellCount">targetCellCount.</param>
        /// <param name="slices">slices.</param>
        public AreaBean(string sourceArea = default(string), string targetArea = default(string), long sourceCellCount = default(long), long targetCellCount = default(long), List<MemberMappingBean> slices = default(List<MemberMappingBean>))
        {
            this.SourceArea = sourceArea;
            this.TargetArea = targetArea;
            this.SourceCellCount = sourceCellCount;
            this.TargetCellCount = targetCellCount;
            this.Slices = slices;
        }

        /// <summary>
        /// Gets or Sets SourceArea
        /// </summary>
        [DataMember(Name = "sourceArea", EmitDefaultValue = false)]
        public string SourceArea { get; set; }

        /// <summary>
        /// Gets or Sets TargetArea
        /// </summary>
        [DataMember(Name = "targetArea", EmitDefaultValue = false)]
        public string TargetArea { get; set; }

        /// <summary>
        /// Gets or Sets SourceCellCount
        /// </summary>
        [DataMember(Name = "sourceCellCount", EmitDefaultValue = false)]
        public long SourceCellCount { get; set; }

        /// <summary>
        /// Gets or Sets TargetCellCount
        /// </summary>
        [DataMember(Name = "targetCellCount", EmitDefaultValue = false)]
        public long TargetCellCount { get; set; }

        /// <summary>
        /// Gets or Sets Slices
        /// </summary>
        [DataMember(Name = "slices", EmitDefaultValue = false)]
        public List<MemberMappingBean> Slices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AreaBean {\n");
            sb.Append("  SourceArea: ").Append(SourceArea).Append("\n");
            sb.Append("  TargetArea: ").Append(TargetArea).Append("\n");
            sb.Append("  SourceCellCount: ").Append(SourceCellCount).Append("\n");
            sb.Append("  TargetCellCount: ").Append(TargetCellCount).Append("\n");
            sb.Append("  Slices: ").Append(Slices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AreaBean);
        }

        /// <summary>
        /// Returns true if AreaBean instances are equal
        /// </summary>
        /// <param name="input">Instance of AreaBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AreaBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceArea == input.SourceArea ||
                    (this.SourceArea != null &&
                    this.SourceArea.Equals(input.SourceArea))
                ) && 
                (
                    this.TargetArea == input.TargetArea ||
                    (this.TargetArea != null &&
                    this.TargetArea.Equals(input.TargetArea))
                ) && 
                (
                    this.SourceCellCount == input.SourceCellCount ||
                    this.SourceCellCount.Equals(input.SourceCellCount)
                ) && 
                (
                    this.TargetCellCount == input.TargetCellCount ||
                    this.TargetCellCount.Equals(input.TargetCellCount)
                ) && 
                (
                    this.Slices == input.Slices ||
                    this.Slices != null &&
                    input.Slices != null &&
                    this.Slices.SequenceEqual(input.Slices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceArea != null)
                {
                    hashCode = (hashCode * 59) + this.SourceArea.GetHashCode();
                }
                if (this.TargetArea != null)
                {
                    hashCode = (hashCode * 59) + this.TargetArea.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceCellCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TargetCellCount.GetHashCode();
                if (this.Slices != null)
                {
                    hashCode = (hashCode * 59) + this.Slices.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
