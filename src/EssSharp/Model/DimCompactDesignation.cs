/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// DimCompactDesignation
    /// </summary>
    [DataContract(Name = "DimCompactDesignation")]
    public partial class DimCompactDesignation : IEquatable<DimCompactDesignation>, IValidatableObject
    {
        /// <summary>
        /// Defines ColumnTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColumnTypesEnum
        {
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 1,

            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGER = 2,

            /// <summary>
            /// Enum FLOAT for value: FLOAT
            /// </summary>
            [EnumMember(Value = "FLOAT")]
            FLOAT = 3,

            /// <summary>
            /// Enum TIME for value: TIME
            /// </summary>
            [EnumMember(Value = "TIME")]
            TIME = 4,

            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATE = 5,

            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 6,

            /// <summary>
            /// Enum EMPTY for value: EMPTY
            /// </summary>
            [EnumMember(Value = "EMPTY")]
            EMPTY = 7,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 8,

            /// <summary>
            /// Enum OUTOFRANGE for value: OUT_OF_RANGE
            /// </summary>
            [EnumMember(Value = "OUT_OF_RANGE")]
            OUTOFRANGE = 9

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DimCompactDesignation" /> class.
        /// </summary>
        /// <param name="query">query.</param>
        /// <param name="essbaseConnection">essbaseConnection.</param>
        /// <param name="genNames">genNames.</param>
        /// <param name="colNames">colNames.</param>
        /// <param name="dimGenColumns">dimGenColumns.</param>
        /// <param name="attribute">attribute.</param>
        /// <param name="dimJoin">dimJoin.</param>
        /// <param name="dimName">dimName.</param>
        /// <param name="attNames">attNames.</param>
        /// <param name="columnTypes">columnTypes.</param>
        /// <param name="uniqCount">uniqCount.</param>
        /// <param name="headerText">headerText.</param>
        /// <param name="parentColumnId">parentColumnId.</param>
        /// <param name="fkcolumnNumber">fkcolumnNumber.</param>
        public DimCompactDesignation(string query = default(string), string essbaseConnection = default(string), List<string> genNames = default(List<string>), List<string> colNames = default(List<string>), List<int> dimGenColumns = default(List<int>), List<int> attribute = default(List<int>), string dimJoin = default(string), string dimName = default(string), List<string> attNames = default(List<string>), List<ColumnTypesEnum> columnTypes = default(List<ColumnTypesEnum>), List<int> uniqCount = default(List<int>), List<string> headerText = default(List<string>), int parentColumnId = default(int), int fkcolumnNumber = default(int))
        {
            this.Query = query;
            this.EssbaseConnection = essbaseConnection;
            this.GenNames = genNames;
            this.ColNames = colNames;
            this.DimGenColumns = dimGenColumns;
            this.Attribute = attribute;
            this.DimJoin = dimJoin;
            this.DimName = dimName;
            this.AttNames = attNames;
            this.ColumnTypes = columnTypes;
            this.UniqCount = uniqCount;
            this.HeaderText = headerText;
            this.ParentColumnId = parentColumnId;
            this.FkcolumnNumber = fkcolumnNumber;
        }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets EssbaseConnection
        /// </summary>
        [DataMember(Name = "essbaseConnection", EmitDefaultValue = false)]
        public string EssbaseConnection { get; set; }

        /// <summary>
        /// Gets or Sets GenNames
        /// </summary>
        [DataMember(Name = "genNames", EmitDefaultValue = false)]
        public List<string> GenNames { get; set; }

        /// <summary>
        /// Gets or Sets ColNames
        /// </summary>
        [DataMember(Name = "colNames", EmitDefaultValue = false)]
        public List<string> ColNames { get; set; }

        /// <summary>
        /// Gets or Sets DimGenColumns
        /// </summary>
        [DataMember(Name = "dimGenColumns", EmitDefaultValue = false)]
        public List<int> DimGenColumns { get; set; }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name = "attribute", EmitDefaultValue = false)]
        public List<int> Attribute { get; set; }

        /// <summary>
        /// Gets or Sets DimJoin
        /// </summary>
        [DataMember(Name = "dimJoin", EmitDefaultValue = false)]
        public string DimJoin { get; set; }

        /// <summary>
        /// Gets or Sets DimName
        /// </summary>
        [DataMember(Name = "dimName", EmitDefaultValue = false)]
        public string DimName { get; set; }

        /// <summary>
        /// Gets or Sets AttNames
        /// </summary>
        [DataMember(Name = "attNames", EmitDefaultValue = false)]
        public List<string> AttNames { get; set; }

        /// <summary>
        /// Gets or Sets ColumnTypes
        /// </summary>
        [DataMember(Name = "columnTypes", EmitDefaultValue = false)]
        public List<DimCompactDesignation.ColumnTypesEnum> ColumnTypes { get; set; }

        /// <summary>
        /// Gets or Sets UniqCount
        /// </summary>
        [DataMember(Name = "uniqCount", EmitDefaultValue = false)]
        public List<int> UniqCount { get; set; }

        /// <summary>
        /// Gets or Sets HeaderText
        /// </summary>
        [DataMember(Name = "headerText", EmitDefaultValue = false)]
        public List<string> HeaderText { get; set; }

        /// <summary>
        /// Gets or Sets ParentColumnId
        /// </summary>
        [DataMember(Name = "parentColumnId", EmitDefaultValue = false)]
        public int ParentColumnId { get; set; }

        /// <summary>
        /// Gets or Sets FkcolumnNumber
        /// </summary>
        [DataMember(Name = "fkcolumnNumber", EmitDefaultValue = false)]
        public int FkcolumnNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DimCompactDesignation {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  EssbaseConnection: ").Append(EssbaseConnection).Append("\n");
            sb.Append("  GenNames: ").Append(GenNames).Append("\n");
            sb.Append("  ColNames: ").Append(ColNames).Append("\n");
            sb.Append("  DimGenColumns: ").Append(DimGenColumns).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  DimJoin: ").Append(DimJoin).Append("\n");
            sb.Append("  DimName: ").Append(DimName).Append("\n");
            sb.Append("  AttNames: ").Append(AttNames).Append("\n");
            sb.Append("  ColumnTypes: ").Append(ColumnTypes).Append("\n");
            sb.Append("  UniqCount: ").Append(UniqCount).Append("\n");
            sb.Append("  HeaderText: ").Append(HeaderText).Append("\n");
            sb.Append("  ParentColumnId: ").Append(ParentColumnId).Append("\n");
            sb.Append("  FkcolumnNumber: ").Append(FkcolumnNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DimCompactDesignation);
        }

        /// <summary>
        /// Returns true if DimCompactDesignation instances are equal
        /// </summary>
        /// <param name="input">Instance of DimCompactDesignation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DimCompactDesignation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.EssbaseConnection == input.EssbaseConnection ||
                    (this.EssbaseConnection != null &&
                    this.EssbaseConnection.Equals(input.EssbaseConnection))
                ) && 
                (
                    this.GenNames == input.GenNames ||
                    this.GenNames != null &&
                    input.GenNames != null &&
                    this.GenNames.SequenceEqual(input.GenNames)
                ) && 
                (
                    this.ColNames == input.ColNames ||
                    this.ColNames != null &&
                    input.ColNames != null &&
                    this.ColNames.SequenceEqual(input.ColNames)
                ) && 
                (
                    this.DimGenColumns == input.DimGenColumns ||
                    this.DimGenColumns != null &&
                    input.DimGenColumns != null &&
                    this.DimGenColumns.SequenceEqual(input.DimGenColumns)
                ) && 
                (
                    this.Attribute == input.Attribute ||
                    this.Attribute != null &&
                    input.Attribute != null &&
                    this.Attribute.SequenceEqual(input.Attribute)
                ) && 
                (
                    this.DimJoin == input.DimJoin ||
                    (this.DimJoin != null &&
                    this.DimJoin.Equals(input.DimJoin))
                ) && 
                (
                    this.DimName == input.DimName ||
                    (this.DimName != null &&
                    this.DimName.Equals(input.DimName))
                ) && 
                (
                    this.AttNames == input.AttNames ||
                    this.AttNames != null &&
                    input.AttNames != null &&
                    this.AttNames.SequenceEqual(input.AttNames)
                ) && 
                (
                    this.ColumnTypes == input.ColumnTypes ||
                    this.ColumnTypes != null &&
                    input.ColumnTypes != null &&
                    this.ColumnTypes.SequenceEqual(input.ColumnTypes)
                ) && 
                (
                    this.UniqCount == input.UniqCount ||
                    this.UniqCount != null &&
                    input.UniqCount != null &&
                    this.UniqCount.SequenceEqual(input.UniqCount)
                ) && 
                (
                    this.HeaderText == input.HeaderText ||
                    this.HeaderText != null &&
                    input.HeaderText != null &&
                    this.HeaderText.SequenceEqual(input.HeaderText)
                ) && 
                (
                    this.ParentColumnId == input.ParentColumnId ||
                    this.ParentColumnId.Equals(input.ParentColumnId)
                ) && 
                (
                    this.FkcolumnNumber == input.FkcolumnNumber ||
                    this.FkcolumnNumber.Equals(input.FkcolumnNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.EssbaseConnection != null)
                {
                    hashCode = (hashCode * 59) + this.EssbaseConnection.GetHashCode();
                }
                if (this.GenNames != null)
                {
                    hashCode = (hashCode * 59) + this.GenNames.GetHashCode();
                }
                if (this.ColNames != null)
                {
                    hashCode = (hashCode * 59) + this.ColNames.GetHashCode();
                }
                if (this.DimGenColumns != null)
                {
                    hashCode = (hashCode * 59) + this.DimGenColumns.GetHashCode();
                }
                if (this.Attribute != null)
                {
                    hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                }
                if (this.DimJoin != null)
                {
                    hashCode = (hashCode * 59) + this.DimJoin.GetHashCode();
                }
                if (this.DimName != null)
                {
                    hashCode = (hashCode * 59) + this.DimName.GetHashCode();
                }
                if (this.AttNames != null)
                {
                    hashCode = (hashCode * 59) + this.AttNames.GetHashCode();
                }
                if (this.ColumnTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnTypes.GetHashCode();
                }
                if (this.UniqCount != null)
                {
                    hashCode = (hashCode * 59) + this.UniqCount.GetHashCode();
                }
                if (this.HeaderText != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderText.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ParentColumnId.GetHashCode();
                hashCode = (hashCode * 59) + this.FkcolumnNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
