/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Limits
    /// </summary>
    [DataContract(Name = "Limits")]
    public partial class Limits : IEquatable<Limits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Limits" /> class.
        /// </summary>
        /// <param name="coreFileSize">coreFileSize.</param>
        /// <param name="dataSegmentSize">dataSegmentSize.</param>
        /// <param name="maxMemory">maxMemory.</param>
        /// <param name="openFiles">openFiles.</param>
        /// <param name="userMaxProcesses">userMaxProcesses.</param>
        /// <param name="virtualMemorySize">virtualMemorySize.</param>
        /// <param name="webLogicHeapSize">webLogicHeapSize.</param>
        public Limits(Limit coreFileSize = default(Limit), Limit dataSegmentSize = default(Limit), Limit maxMemory = default(Limit), Limit openFiles = default(Limit), Limit userMaxProcesses = default(Limit), Limit virtualMemorySize = default(Limit), Limit webLogicHeapSize = default(Limit))
        {
            this.CoreFileSize = coreFileSize;
            this.DataSegmentSize = dataSegmentSize;
            this.MaxMemory = maxMemory;
            this.OpenFiles = openFiles;
            this.UserMaxProcesses = userMaxProcesses;
            this.VirtualMemorySize = virtualMemorySize;
            this.WebLogicHeapSize = webLogicHeapSize;
        }

        /// <summary>
        /// Gets or Sets CoreFileSize
        /// </summary>
        [DataMember(Name = "coreFileSize", EmitDefaultValue = false)]
        public Limit CoreFileSize { get; set; }

        /// <summary>
        /// Gets or Sets DataSegmentSize
        /// </summary>
        [DataMember(Name = "dataSegmentSize", EmitDefaultValue = false)]
        public Limit DataSegmentSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxMemory
        /// </summary>
        [DataMember(Name = "maxMemory", EmitDefaultValue = false)]
        public Limit MaxMemory { get; set; }

        /// <summary>
        /// Gets or Sets OpenFiles
        /// </summary>
        [DataMember(Name = "openFiles", EmitDefaultValue = false)]
        public Limit OpenFiles { get; set; }

        /// <summary>
        /// Gets or Sets UserMaxProcesses
        /// </summary>
        [DataMember(Name = "userMaxProcesses", EmitDefaultValue = false)]
        public Limit UserMaxProcesses { get; set; }

        /// <summary>
        /// Gets or Sets VirtualMemorySize
        /// </summary>
        [DataMember(Name = "virtualMemorySize", EmitDefaultValue = false)]
        public Limit VirtualMemorySize { get; set; }

        /// <summary>
        /// Gets or Sets WebLogicHeapSize
        /// </summary>
        [DataMember(Name = "webLogicHeapSize", EmitDefaultValue = false)]
        public Limit WebLogicHeapSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Limits {\n");
            sb.Append("  CoreFileSize: ").Append(CoreFileSize).Append("\n");
            sb.Append("  DataSegmentSize: ").Append(DataSegmentSize).Append("\n");
            sb.Append("  MaxMemory: ").Append(MaxMemory).Append("\n");
            sb.Append("  OpenFiles: ").Append(OpenFiles).Append("\n");
            sb.Append("  UserMaxProcesses: ").Append(UserMaxProcesses).Append("\n");
            sb.Append("  VirtualMemorySize: ").Append(VirtualMemorySize).Append("\n");
            sb.Append("  WebLogicHeapSize: ").Append(WebLogicHeapSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Limits);
        }

        /// <summary>
        /// Returns true if Limits instances are equal
        /// </summary>
        /// <param name="input">Instance of Limits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Limits input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CoreFileSize == input.CoreFileSize ||
                    (this.CoreFileSize != null &&
                    this.CoreFileSize.Equals(input.CoreFileSize))
                ) && 
                (
                    this.DataSegmentSize == input.DataSegmentSize ||
                    (this.DataSegmentSize != null &&
                    this.DataSegmentSize.Equals(input.DataSegmentSize))
                ) && 
                (
                    this.MaxMemory == input.MaxMemory ||
                    (this.MaxMemory != null &&
                    this.MaxMemory.Equals(input.MaxMemory))
                ) && 
                (
                    this.OpenFiles == input.OpenFiles ||
                    (this.OpenFiles != null &&
                    this.OpenFiles.Equals(input.OpenFiles))
                ) && 
                (
                    this.UserMaxProcesses == input.UserMaxProcesses ||
                    (this.UserMaxProcesses != null &&
                    this.UserMaxProcesses.Equals(input.UserMaxProcesses))
                ) && 
                (
                    this.VirtualMemorySize == input.VirtualMemorySize ||
                    (this.VirtualMemorySize != null &&
                    this.VirtualMemorySize.Equals(input.VirtualMemorySize))
                ) && 
                (
                    this.WebLogicHeapSize == input.WebLogicHeapSize ||
                    (this.WebLogicHeapSize != null &&
                    this.WebLogicHeapSize.Equals(input.WebLogicHeapSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CoreFileSize != null)
                {
                    hashCode = (hashCode * 59) + this.CoreFileSize.GetHashCode();
                }
                if (this.DataSegmentSize != null)
                {
                    hashCode = (hashCode * 59) + this.DataSegmentSize.GetHashCode();
                }
                if (this.MaxMemory != null)
                {
                    hashCode = (hashCode * 59) + this.MaxMemory.GetHashCode();
                }
                if (this.OpenFiles != null)
                {
                    hashCode = (hashCode * 59) + this.OpenFiles.GetHashCode();
                }
                if (this.UserMaxProcesses != null)
                {
                    hashCode = (hashCode * 59) + this.UserMaxProcesses.GetHashCode();
                }
                if (this.VirtualMemorySize != null)
                {
                    hashCode = (hashCode * 59) + this.VirtualMemorySize.GetHashCode();
                }
                if (this.WebLogicHeapSize != null)
                {
                    hashCode = (hashCode * 59) + this.WebLogicHeapSize.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
