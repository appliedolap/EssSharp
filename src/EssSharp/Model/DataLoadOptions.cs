/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// DataLoadOptions
    /// </summary>
    [DataContract(Name = "DataLoadOptions")]
    public partial class DataLoadOptions : IEquatable<DataLoadOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines Option
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OptionEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum OVERWRITE for value: OVERWRITE
            /// </summary>
            [EnumMember(Value = "OVERWRITE")]
            OVERWRITE = 2,

            /// <summary>
            /// Enum ADD for value: ADD
            /// </summary>
            [EnumMember(Value = "ADD")]
            ADD = 3,

            /// <summary>
            /// Enum SUBTRACT for value: SUBTRACT
            /// </summary>
            [EnumMember(Value = "SUBTRACT")]
            SUBTRACT = 4

        }


        /// <summary>
        /// Gets or Sets Option
        /// </summary>
        [DataMember(Name = "option", EmitDefaultValue = false)]
        public OptionEnum? Option { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataLoadOptions" /> class.
        /// </summary>
        /// <param name="clearCombinations">clearCombinations.</param>
        /// <param name="option">option.</param>
        /// <param name="removeAll">removeAll.</param>
        /// <param name="signFlipDimension">signFlipDimension.</param>
        /// <param name="signFlipUDA">signFlipUDA.</param>
        public DataLoadOptions(List<string> clearCombinations = default(List<string>), OptionEnum? option = default(OptionEnum?), int removeAll = default(int), string signFlipDimension = default(string), string signFlipUDA = default(string))
        {
            this.ClearCombinations = clearCombinations;
            this.Option = option;
            this.RemoveAll = removeAll;
            this.SignFlipDimension = signFlipDimension;
            this.SignFlipUDA = signFlipUDA;
        }

        /// <summary>
        /// Gets or Sets ClearCombinations
        /// </summary>
        [DataMember(Name = "clearCombinations", EmitDefaultValue = false)]
        public List<string> ClearCombinations { get; set; }

        /// <summary>
        /// Gets or Sets RemoveAll
        /// </summary>
        [DataMember(Name = "removeAll", EmitDefaultValue = false)]
        public int RemoveAll { get; set; }

        /// <summary>
        /// Gets or Sets SignFlipDimension
        /// </summary>
        [DataMember(Name = "signFlipDimension", EmitDefaultValue = false)]
        public string SignFlipDimension { get; set; }

        /// <summary>
        /// Gets or Sets SignFlipUDA
        /// </summary>
        [DataMember(Name = "signFlipUDA", EmitDefaultValue = false)]
        public string SignFlipUDA { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataLoadOptions {\n");
            sb.Append("  ClearCombinations: ").Append(ClearCombinations).Append("\n");
            sb.Append("  Option: ").Append(Option).Append("\n");
            sb.Append("  RemoveAll: ").Append(RemoveAll).Append("\n");
            sb.Append("  SignFlipDimension: ").Append(SignFlipDimension).Append("\n");
            sb.Append("  SignFlipUDA: ").Append(SignFlipUDA).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataLoadOptions);
        }

        /// <summary>
        /// Returns true if DataLoadOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of DataLoadOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataLoadOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClearCombinations == input.ClearCombinations ||
                    this.ClearCombinations != null &&
                    input.ClearCombinations != null &&
                    this.ClearCombinations.SequenceEqual(input.ClearCombinations)
                ) && 
                (
                    this.Option == input.Option ||
                    this.Option.Equals(input.Option)
                ) && 
                (
                    this.RemoveAll == input.RemoveAll ||
                    this.RemoveAll.Equals(input.RemoveAll)
                ) && 
                (
                    this.SignFlipDimension == input.SignFlipDimension ||
                    (this.SignFlipDimension != null &&
                    this.SignFlipDimension.Equals(input.SignFlipDimension))
                ) && 
                (
                    this.SignFlipUDA == input.SignFlipUDA ||
                    (this.SignFlipUDA != null &&
                    this.SignFlipUDA.Equals(input.SignFlipUDA))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClearCombinations != null)
                {
                    hashCode = (hashCode * 59) + this.ClearCombinations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Option.GetHashCode();
                hashCode = (hashCode * 59) + this.RemoveAll.GetHashCode();
                if (this.SignFlipDimension != null)
                {
                    hashCode = (hashCode * 59) + this.SignFlipDimension.GetHashCode();
                }
                if (this.SignFlipUDA != null)
                {
                    hashCode = (hashCode * 59) + this.SignFlipUDA.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
