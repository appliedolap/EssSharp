/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ServerConfiguration
    /// </summary>
    [DataContract(Name = "ServerConfiguration")]
    public partial class ServerConfiguration : IEquatable<ServerConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfiguration" /> class.
        /// </summary>
        /// <param name="host">host.</param>
        /// <param name="port">port.</param>
        /// <param name="user">user.</param>
        /// <param name="password">password.</param>
        /// <param name="folder">folder.</param>
        /// <param name="messageAction">messageAction.</param>
        /// <param name="messageLocation">messageLocation.</param>
        public ServerConfiguration(string host = default(string), int port = default(int), string user = default(string), string password = default(string), string folder = default(string), string messageAction = default(string), string messageLocation = default(string))
        {
            this.Host = host;
            this.Port = port;
            this.User = user;
            this.Password = password;
            this.Folder = folder;
            this.MessageAction = messageAction;
            this.MessageLocation = messageLocation;
        }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Folder
        /// </summary>
        [DataMember(Name = "folder", EmitDefaultValue = false)]
        public string Folder { get; set; }

        /// <summary>
        /// Gets or Sets MessageAction
        /// </summary>
        [DataMember(Name = "messageAction", EmitDefaultValue = false)]
        public string MessageAction { get; set; }

        /// <summary>
        /// Gets or Sets MessageLocation
        /// </summary>
        [DataMember(Name = "messageLocation", EmitDefaultValue = false)]
        public string MessageLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerConfiguration {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  MessageAction: ").Append(MessageAction).Append("\n");
            sb.Append("  MessageLocation: ").Append(MessageLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerConfiguration);
        }

        /// <summary>
        /// Returns true if ServerConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Folder == input.Folder ||
                    (this.Folder != null &&
                    this.Folder.Equals(input.Folder))
                ) && 
                (
                    this.MessageAction == input.MessageAction ||
                    (this.MessageAction != null &&
                    this.MessageAction.Equals(input.MessageAction))
                ) && 
                (
                    this.MessageLocation == input.MessageLocation ||
                    (this.MessageLocation != null &&
                    this.MessageLocation.Equals(input.MessageLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Folder != null)
                {
                    hashCode = (hashCode * 59) + this.Folder.GetHashCode();
                }
                if (this.MessageAction != null)
                {
                    hashCode = (hashCode * 59) + this.MessageAction.GetHashCode();
                }
                if (this.MessageLocation != null)
                {
                    hashCode = (hashCode * 59) + this.MessageLocation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
