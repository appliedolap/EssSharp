/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// MergeSilceOption
    /// </summary>
    [DataContract(Name = "MergeSilceOption")]
    public partial class MergeSilceOption : IEquatable<MergeSilceOption>, IValidatableObject
    {
        /// <summary>
        /// Defines MergeOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MergeOptionEnum
        {
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 1,

            /// <summary>
            /// Enum INCREMENTAL for value: INCREMENTAL
            /// </summary>
            [EnumMember(Value = "INCREMENTAL")]
            INCREMENTAL = 2

        }


        /// <summary>
        /// Gets or Sets MergeOption
        /// </summary>
        [DataMember(Name = "mergeOption", EmitDefaultValue = false)]
        public MergeOptionEnum? MergeOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MergeSilceOption" /> class.
        /// </summary>
        /// <param name="mergeOption">mergeOption.</param>
        public MergeSilceOption(MergeOptionEnum? mergeOption = default(MergeOptionEnum?))
        {
            this.MergeOption = mergeOption;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MergeSilceOption {\n");
            sb.Append("  MergeOption: ").Append(MergeOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MergeSilceOption);
        }

        /// <summary>
        /// Returns true if MergeSilceOption instances are equal
        /// </summary>
        /// <param name="input">Instance of MergeSilceOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MergeSilceOption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MergeOption == input.MergeOption ||
                    this.MergeOption.Equals(input.MergeOption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MergeOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
