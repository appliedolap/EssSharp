/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// CompactDesignation
    /// </summary>
    [DataContract(Name = "CompactDesignation")]
    public partial class CompactDesignation : IEquatable<CompactDesignation>, IValidatableObject
    {
        /// <summary>
        /// Defines DimDesignationMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DimDesignationModeEnum
        {
            /// <summary>
            /// Enum DIMDESIGNATIONMODEATTRIBSASMULTILEVELDIMS for value: DIM_DESIGNATION_MODE_ATTRIBS_AS_MULTILEVEL_DIMS
            /// </summary>
            [EnumMember(Value = "DIM_DESIGNATION_MODE_ATTRIBS_AS_MULTILEVEL_DIMS")]
            DIMDESIGNATIONMODEATTRIBSASMULTILEVELDIMS = 1,

            /// <summary>
            /// Enum DIMDESIGNATIONMODEATTRIBSASFLATDIMS for value: DIM_DESIGNATION_MODE_ATTRIBS_AS_FLAT_DIMS
            /// </summary>
            [EnumMember(Value = "DIM_DESIGNATION_MODE_ATTRIBS_AS_FLAT_DIMS")]
            DIMDESIGNATIONMODEATTRIBSASFLATDIMS = 2,

            /// <summary>
            /// Enum DIMDESIGNATIONMODEALLFLAT for value: DIM_DESIGNATION_MODE_ALL_FLAT
            /// </summary>
            [EnumMember(Value = "DIM_DESIGNATION_MODE_ALL_FLAT")]
            DIMDESIGNATIONMODEALLFLAT = 3,

            /// <summary>
            /// Enum DIMDESIGNATIONMODEOAV for value: DIM_DESIGNATION_MODE_OAV
            /// </summary>
            [EnumMember(Value = "DIM_DESIGNATION_MODE_OAV")]
            DIMDESIGNATIONMODEOAV = 4,

            /// <summary>
            /// Enum DIMDESIGNATIONMODEOAVDIM for value: DIM_DESIGNATION_MODE_OAV_DIM
            /// </summary>
            [EnumMember(Value = "DIM_DESIGNATION_MODE_OAV_DIM")]
            DIMDESIGNATIONMODEOAVDIM = 5,

            /// <summary>
            /// Enum DIMDESIGNATIONMODEOAVSNOWFLAKEDIM for value: DIM_DESIGNATION_MODE_OAV_SNOWFLAKE_DIM
            /// </summary>
            [EnumMember(Value = "DIM_DESIGNATION_MODE_OAV_SNOWFLAKE_DIM")]
            DIMDESIGNATIONMODEOAVSNOWFLAKEDIM = 6,

            /// <summary>
            /// Enum CONVERTTOCSV for value: CONVERT_TO_CSV
            /// </summary>
            [EnumMember(Value = "CONVERT_TO_CSV")]
            CONVERTTOCSV = 7,

            /// <summary>
            /// Enum DIMDESIGNATIONMODEATTRIBSASATTRIBS for value: DIM_DESIGNATION_MODE_ATTRIBS_AS_ATTRIBS
            /// </summary>
            [EnumMember(Value = "DIM_DESIGNATION_MODE_ATTRIBS_AS_ATTRIBS")]
            DIMDESIGNATIONMODEATTRIBSASATTRIBS = 8

        }


        /// <summary>
        /// Gets or Sets DimDesignationMode
        /// </summary>
        [DataMember(Name = "dimDesignationMode", EmitDefaultValue = false)]
        public DimDesignationModeEnum? DimDesignationMode { get; set; }
        /// <summary>
        /// Defines NamingPriority
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NamingPriorityEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum GENERATIONS for value: GENERATIONS
            /// </summary>
            [EnumMember(Value = "GENERATIONS")]
            GENERATIONS = 2,

            /// <summary>
            /// Enum DIMENSIONS for value: DIMENSIONS
            /// </summary>
            [EnumMember(Value = "DIMENSIONS")]
            DIMENSIONS = 3

        }


        /// <summary>
        /// Gets or Sets NamingPriority
        /// </summary>
        [DataMember(Name = "namingPriority", EmitDefaultValue = false)]
        public NamingPriorityEnum? NamingPriority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompactDesignation" /> class.
        /// </summary>
        /// <param name="file">file.</param>
        /// <param name="excelSheetName">excelSheetName.</param>
        /// <param name="columnOffset">columnOffset.</param>
        /// <param name="badRowListString">badRowListString.</param>
        /// <param name="nr">nr.</param>
        /// <param name="nrh">nrh.</param>
        /// <param name="compactDesignationColumn">compactDesignationColumn.</param>
        /// <param name="bsoLimitsExceeded">bsoLimitsExceeded.</param>
        /// <param name="fastAnalysis">fastAnalysis.</param>
        /// <param name="measureDimensionName">measureDimensionName.</param>
        /// <param name="dimDesignationMode">dimDesignationMode.</param>
        /// <param name="namingPriority">namingPriority.</param>
        /// <param name="dateColumnId">dateColumnId.</param>
        /// <param name="dateFormatString">dateFormatString.</param>
        /// <param name="dateDimString">dateDimString.</param>
        /// <param name="dateDimensionLeaves">dateDimensionLeaves.</param>
        /// <param name="maxDate">maxDate.</param>
        /// <param name="minDate">minDate.</param>
        /// <param name="tableName">tableName.</param>
        /// <param name="dimCompactDesignationList">dimCompactDesignationList.</param>
        /// <param name="query">query.</param>
        /// <param name="excelRowCount">excelRowCount.</param>
        public CompactDesignation(string file = default(string), string excelSheetName = default(string), int columnOffset = default(int), string badRowListString = default(string), int nr = default(int), int nrh = default(int), List<CompactDesignationColumn> compactDesignationColumn = default(List<CompactDesignationColumn>), bool bsoLimitsExceeded = default(bool), bool fastAnalysis = default(bool), string measureDimensionName = default(string), DimDesignationModeEnum? dimDesignationMode = default(DimDesignationModeEnum?), NamingPriorityEnum? namingPriority = default(NamingPriorityEnum?), int dateColumnId = default(int), string dateFormatString = default(string), string dateDimString = default(string), List<string> dateDimensionLeaves = default(List<string>), DateTime maxDate = default(DateTime), DateTime minDate = default(DateTime), string tableName = default(string), List<DimCompactDesignation> dimCompactDesignationList = default(List<DimCompactDesignation>), string query = default(string), int excelRowCount = default(int))
        {
            this.File = file;
            this.ExcelSheetName = excelSheetName;
            this.ColumnOffset = columnOffset;
            this.BadRowListString = badRowListString;
            this.Nr = nr;
            this.Nrh = nrh;
            this.CompactDesignationColumn = compactDesignationColumn;
            this.BsoLimitsExceeded = bsoLimitsExceeded;
            this.FastAnalysis = fastAnalysis;
            this.MeasureDimensionName = measureDimensionName;
            this.DimDesignationMode = dimDesignationMode;
            this.NamingPriority = namingPriority;
            this.DateColumnId = dateColumnId;
            this.DateFormatString = dateFormatString;
            this.DateDimString = dateDimString;
            this.DateDimensionLeaves = dateDimensionLeaves;
            this.MaxDate = maxDate;
            this.MinDate = minDate;
            this.TableName = tableName;
            this.DimCompactDesignationList = dimCompactDesignationList;
            this.Query = query;
            this.ExcelRowCount = excelRowCount;
        }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public string File { get; set; }

        /// <summary>
        /// Gets or Sets ExcelSheetName
        /// </summary>
        [DataMember(Name = "excelSheetName", EmitDefaultValue = false)]
        public string ExcelSheetName { get; set; }

        /// <summary>
        /// Gets or Sets ColumnOffset
        /// </summary>
        [DataMember(Name = "columnOffset", EmitDefaultValue = false)]
        public int ColumnOffset { get; set; }

        /// <summary>
        /// Gets or Sets BadRowListString
        /// </summary>
        [DataMember(Name = "badRowListString", EmitDefaultValue = false)]
        public string BadRowListString { get; set; }

        /// <summary>
        /// Gets or Sets Nr
        /// </summary>
        [DataMember(Name = "nr", EmitDefaultValue = false)]
        public int Nr { get; set; }

        /// <summary>
        /// Gets or Sets Nrh
        /// </summary>
        [DataMember(Name = "nrh", EmitDefaultValue = false)]
        public int Nrh { get; set; }

        /// <summary>
        /// Gets or Sets CompactDesignationColumn
        /// </summary>
        [DataMember(Name = "compactDesignationColumn", EmitDefaultValue = false)]
        public List<CompactDesignationColumn> CompactDesignationColumn { get; set; }

        /// <summary>
        /// Gets or Sets BsoLimitsExceeded
        /// </summary>
        [DataMember(Name = "bsoLimitsExceeded", EmitDefaultValue = true)]
        public bool BsoLimitsExceeded { get; set; }

        /// <summary>
        /// Gets or Sets FastAnalysis
        /// </summary>
        [DataMember(Name = "fastAnalysis", EmitDefaultValue = true)]
        public bool FastAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets MeasureDimensionName
        /// </summary>
        [DataMember(Name = "measureDimensionName", EmitDefaultValue = false)]
        public string MeasureDimensionName { get; set; }

        /// <summary>
        /// Gets or Sets DateColumnId
        /// </summary>
        [DataMember(Name = "dateColumnId", EmitDefaultValue = false)]
        public int DateColumnId { get; set; }

        /// <summary>
        /// Gets or Sets DateFormatString
        /// </summary>
        [DataMember(Name = "dateFormatString", EmitDefaultValue = false)]
        public string DateFormatString { get; set; }

        /// <summary>
        /// Gets or Sets DateDimString
        /// </summary>
        [DataMember(Name = "dateDimString", EmitDefaultValue = false)]
        public string DateDimString { get; set; }

        /// <summary>
        /// Gets or Sets DateDimensionLeaves
        /// </summary>
        [DataMember(Name = "dateDimensionLeaves", EmitDefaultValue = false)]
        public List<string> DateDimensionLeaves { get; set; }

        /// <summary>
        /// Gets or Sets MaxDate
        /// </summary>
        [DataMember(Name = "maxDate", EmitDefaultValue = false)]
        public DateTime MaxDate { get; set; }

        /// <summary>
        /// Gets or Sets MinDate
        /// </summary>
        [DataMember(Name = "minDate", EmitDefaultValue = false)]
        public DateTime MinDate { get; set; }

        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name = "tableName", EmitDefaultValue = false)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets DimCompactDesignationList
        /// </summary>
        [DataMember(Name = "dimCompactDesignationList", EmitDefaultValue = false)]
        public List<DimCompactDesignation> DimCompactDesignationList { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets ExcelRowCount
        /// </summary>
        [DataMember(Name = "excelRowCount", EmitDefaultValue = false)]
        public int ExcelRowCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompactDesignation {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  ExcelSheetName: ").Append(ExcelSheetName).Append("\n");
            sb.Append("  ColumnOffset: ").Append(ColumnOffset).Append("\n");
            sb.Append("  BadRowListString: ").Append(BadRowListString).Append("\n");
            sb.Append("  Nr: ").Append(Nr).Append("\n");
            sb.Append("  Nrh: ").Append(Nrh).Append("\n");
            sb.Append("  CompactDesignationColumn: ").Append(CompactDesignationColumn).Append("\n");
            sb.Append("  BsoLimitsExceeded: ").Append(BsoLimitsExceeded).Append("\n");
            sb.Append("  FastAnalysis: ").Append(FastAnalysis).Append("\n");
            sb.Append("  MeasureDimensionName: ").Append(MeasureDimensionName).Append("\n");
            sb.Append("  DimDesignationMode: ").Append(DimDesignationMode).Append("\n");
            sb.Append("  NamingPriority: ").Append(NamingPriority).Append("\n");
            sb.Append("  DateColumnId: ").Append(DateColumnId).Append("\n");
            sb.Append("  DateFormatString: ").Append(DateFormatString).Append("\n");
            sb.Append("  DateDimString: ").Append(DateDimString).Append("\n");
            sb.Append("  DateDimensionLeaves: ").Append(DateDimensionLeaves).Append("\n");
            sb.Append("  MaxDate: ").Append(MaxDate).Append("\n");
            sb.Append("  MinDate: ").Append(MinDate).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  DimCompactDesignationList: ").Append(DimCompactDesignationList).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  ExcelRowCount: ").Append(ExcelRowCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompactDesignation);
        }

        /// <summary>
        /// Returns true if CompactDesignation instances are equal
        /// </summary>
        /// <param name="input">Instance of CompactDesignation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompactDesignation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.ExcelSheetName == input.ExcelSheetName ||
                    (this.ExcelSheetName != null &&
                    this.ExcelSheetName.Equals(input.ExcelSheetName))
                ) && 
                (
                    this.ColumnOffset == input.ColumnOffset ||
                    this.ColumnOffset.Equals(input.ColumnOffset)
                ) && 
                (
                    this.BadRowListString == input.BadRowListString ||
                    (this.BadRowListString != null &&
                    this.BadRowListString.Equals(input.BadRowListString))
                ) && 
                (
                    this.Nr == input.Nr ||
                    this.Nr.Equals(input.Nr)
                ) && 
                (
                    this.Nrh == input.Nrh ||
                    this.Nrh.Equals(input.Nrh)
                ) && 
                (
                    this.CompactDesignationColumn == input.CompactDesignationColumn ||
                    this.CompactDesignationColumn != null &&
                    input.CompactDesignationColumn != null &&
                    this.CompactDesignationColumn.SequenceEqual(input.CompactDesignationColumn)
                ) && 
                (
                    this.BsoLimitsExceeded == input.BsoLimitsExceeded ||
                    this.BsoLimitsExceeded.Equals(input.BsoLimitsExceeded)
                ) && 
                (
                    this.FastAnalysis == input.FastAnalysis ||
                    this.FastAnalysis.Equals(input.FastAnalysis)
                ) && 
                (
                    this.MeasureDimensionName == input.MeasureDimensionName ||
                    (this.MeasureDimensionName != null &&
                    this.MeasureDimensionName.Equals(input.MeasureDimensionName))
                ) && 
                (
                    this.DimDesignationMode == input.DimDesignationMode ||
                    this.DimDesignationMode.Equals(input.DimDesignationMode)
                ) && 
                (
                    this.NamingPriority == input.NamingPriority ||
                    this.NamingPriority.Equals(input.NamingPriority)
                ) && 
                (
                    this.DateColumnId == input.DateColumnId ||
                    this.DateColumnId.Equals(input.DateColumnId)
                ) && 
                (
                    this.DateFormatString == input.DateFormatString ||
                    (this.DateFormatString != null &&
                    this.DateFormatString.Equals(input.DateFormatString))
                ) && 
                (
                    this.DateDimString == input.DateDimString ||
                    (this.DateDimString != null &&
                    this.DateDimString.Equals(input.DateDimString))
                ) && 
                (
                    this.DateDimensionLeaves == input.DateDimensionLeaves ||
                    this.DateDimensionLeaves != null &&
                    input.DateDimensionLeaves != null &&
                    this.DateDimensionLeaves.SequenceEqual(input.DateDimensionLeaves)
                ) && 
                (
                    this.MaxDate == input.MaxDate ||
                    (this.MaxDate != null &&
                    this.MaxDate.Equals(input.MaxDate))
                ) && 
                (
                    this.MinDate == input.MinDate ||
                    (this.MinDate != null &&
                    this.MinDate.Equals(input.MinDate))
                ) && 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.DimCompactDesignationList == input.DimCompactDesignationList ||
                    this.DimCompactDesignationList != null &&
                    input.DimCompactDesignationList != null &&
                    this.DimCompactDesignationList.SequenceEqual(input.DimCompactDesignationList)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.ExcelRowCount == input.ExcelRowCount ||
                    this.ExcelRowCount.Equals(input.ExcelRowCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.ExcelSheetName != null)
                {
                    hashCode = (hashCode * 59) + this.ExcelSheetName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ColumnOffset.GetHashCode();
                if (this.BadRowListString != null)
                {
                    hashCode = (hashCode * 59) + this.BadRowListString.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nr.GetHashCode();
                hashCode = (hashCode * 59) + this.Nrh.GetHashCode();
                if (this.CompactDesignationColumn != null)
                {
                    hashCode = (hashCode * 59) + this.CompactDesignationColumn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BsoLimitsExceeded.GetHashCode();
                hashCode = (hashCode * 59) + this.FastAnalysis.GetHashCode();
                if (this.MeasureDimensionName != null)
                {
                    hashCode = (hashCode * 59) + this.MeasureDimensionName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DimDesignationMode.GetHashCode();
                hashCode = (hashCode * 59) + this.NamingPriority.GetHashCode();
                hashCode = (hashCode * 59) + this.DateColumnId.GetHashCode();
                if (this.DateFormatString != null)
                {
                    hashCode = (hashCode * 59) + this.DateFormatString.GetHashCode();
                }
                if (this.DateDimString != null)
                {
                    hashCode = (hashCode * 59) + this.DateDimString.GetHashCode();
                }
                if (this.DateDimensionLeaves != null)
                {
                    hashCode = (hashCode * 59) + this.DateDimensionLeaves.GetHashCode();
                }
                if (this.MaxDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDate.GetHashCode();
                }
                if (this.MinDate != null)
                {
                    hashCode = (hashCode * 59) + this.MinDate.GetHashCode();
                }
                if (this.TableName != null)
                {
                    hashCode = (hashCode * 59) + this.TableName.GetHashCode();
                }
                if (this.DimCompactDesignationList != null)
                {
                    hashCode = (hashCode * 59) + this.DimCompactDesignationList.GetHashCode();
                }
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExcelRowCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
