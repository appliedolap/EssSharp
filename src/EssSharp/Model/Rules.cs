/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Rules
    /// </summary>
    [DataContract(Name = "Rules")]
    public partial class Rules : IEquatable<Rules>, IValidatableObject
    {
        /// <summary>
        /// Defines Encoding
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EncodingEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum NONUNICODE for value: NONUNICODE
            /// </summary>
            [EnumMember(Value = "NONUNICODE")]
            NONUNICODE = 2,

            /// <summary>
            /// Enum UTF8 for value: UTF8
            /// </summary>
            [EnumMember(Value = "UTF8")]
            UTF8 = 3

        }


        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name = "encoding", EmitDefaultValue = false)]
        public EncodingEnum? Encoding { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rules" /> class.
        /// </summary>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="fields">fields.</param>
        /// <param name="timeStamp">timeStamp.</param>
        /// <param name="dataSource">dataSource.</param>
        /// <param name="dimensionBuildOptions">dimensionBuildOptions.</param>
        /// <param name="dataLoadOptions">dataLoadOptions.</param>
        /// <param name="editorOptions">editorOptions.</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="name">name.</param>
        /// <param name="locale">locale.</param>
        /// <param name="studio">studio.</param>
        /// <param name="bibpm">bibpm.</param>
        /// <param name="xolap">xolap.</param>
        /// <param name="flatFileBased">flatFileBased.</param>
        /// <param name="essbaseInfo">essbaseInfo.</param>
        /// <param name="columnOperations">columnOperations.</param>
        public Rules(List<Dimension> dimensions = default(List<Dimension>), List<Field> fields = default(List<Field>), long timeStamp = default(long), Datasource dataSource = default(Datasource), DimBuildOptions dimensionBuildOptions = default(DimBuildOptions), DataLoadOptions dataLoadOptions = default(DataLoadOptions), EditorOptions editorOptions = default(EditorOptions), EncodingEnum? encoding = default(EncodingEnum?), string name = default(string), string locale = default(string), bool studio = default(bool), bool bibpm = default(bool), bool xolap = default(bool), bool flatFileBased = default(bool), EssbaseInfo essbaseInfo = default(EssbaseInfo), List<ColumnOperation> columnOperations = default(List<ColumnOperation>))
        {
            this.Dimensions = dimensions;
            this.Fields = fields;
            this.TimeStamp = timeStamp;
            this.DataSource = dataSource;
            this.DimensionBuildOptions = dimensionBuildOptions;
            this.DataLoadOptions = dataLoadOptions;
            this.EditorOptions = editorOptions;
            this.Encoding = encoding;
            this.Name = name;
            this.Locale = locale;
            this.Studio = studio;
            this.Bibpm = bibpm;
            this.Xolap = xolap;
            this.FlatFileBased = flatFileBased;
            this.EssbaseInfo = essbaseInfo;
            this.ColumnOperations = columnOperations;
        }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public List<Dimension> Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name = "timeStamp", EmitDefaultValue = false)]
        public long TimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name = "dataSource", EmitDefaultValue = false)]
        public Datasource DataSource { get; set; }

        /// <summary>
        /// Gets or Sets DimensionBuildOptions
        /// </summary>
        [DataMember(Name = "dimensionBuildOptions", EmitDefaultValue = false)]
        public DimBuildOptions DimensionBuildOptions { get; set; }

        /// <summary>
        /// Gets or Sets DataLoadOptions
        /// </summary>
        [DataMember(Name = "dataLoadOptions", EmitDefaultValue = false)]
        public DataLoadOptions DataLoadOptions { get; set; }

        /// <summary>
        /// Gets or Sets EditorOptions
        /// </summary>
        [DataMember(Name = "editorOptions", EmitDefaultValue = false)]
        public EditorOptions EditorOptions { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Studio
        /// </summary>
        [DataMember(Name = "studio", EmitDefaultValue = true)]
        public bool Studio { get; set; }

        /// <summary>
        /// Gets or Sets Bibpm
        /// </summary>
        [DataMember(Name = "bibpm", EmitDefaultValue = true)]
        public bool Bibpm { get; set; }

        /// <summary>
        /// Gets or Sets Xolap
        /// </summary>
        [DataMember(Name = "xolap", EmitDefaultValue = true)]
        public bool Xolap { get; set; }

        /// <summary>
        /// Gets or Sets FlatFileBased
        /// </summary>
        [DataMember(Name = "flatFileBased", EmitDefaultValue = true)]
        public bool FlatFileBased { get; set; }

        /// <summary>
        /// Gets or Sets EssbaseInfo
        /// </summary>
        [DataMember(Name = "essbaseInfo", EmitDefaultValue = false)]
        public EssbaseInfo EssbaseInfo { get; set; }

        /// <summary>
        /// Gets or Sets ColumnOperations
        /// </summary>
        [DataMember(Name = "columnOperations", EmitDefaultValue = false)]
        public List<ColumnOperation> ColumnOperations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Rules {\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  DimensionBuildOptions: ").Append(DimensionBuildOptions).Append("\n");
            sb.Append("  DataLoadOptions: ").Append(DataLoadOptions).Append("\n");
            sb.Append("  EditorOptions: ").Append(EditorOptions).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Studio: ").Append(Studio).Append("\n");
            sb.Append("  Bibpm: ").Append(Bibpm).Append("\n");
            sb.Append("  Xolap: ").Append(Xolap).Append("\n");
            sb.Append("  FlatFileBased: ").Append(FlatFileBased).Append("\n");
            sb.Append("  EssbaseInfo: ").Append(EssbaseInfo).Append("\n");
            sb.Append("  ColumnOperations: ").Append(ColumnOperations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rules);
        }

        /// <summary>
        /// Returns true if Rules instances are equal
        /// </summary>
        /// <param name="input">Instance of Rules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rules input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    this.TimeStamp.Equals(input.TimeStamp)
                ) && 
                (
                    this.DataSource == input.DataSource ||
                    (this.DataSource != null &&
                    this.DataSource.Equals(input.DataSource))
                ) && 
                (
                    this.DimensionBuildOptions == input.DimensionBuildOptions ||
                    (this.DimensionBuildOptions != null &&
                    this.DimensionBuildOptions.Equals(input.DimensionBuildOptions))
                ) && 
                (
                    this.DataLoadOptions == input.DataLoadOptions ||
                    (this.DataLoadOptions != null &&
                    this.DataLoadOptions.Equals(input.DataLoadOptions))
                ) && 
                (
                    this.EditorOptions == input.EditorOptions ||
                    (this.EditorOptions != null &&
                    this.EditorOptions.Equals(input.EditorOptions))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    this.Encoding.Equals(input.Encoding)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Studio == input.Studio ||
                    this.Studio.Equals(input.Studio)
                ) && 
                (
                    this.Bibpm == input.Bibpm ||
                    this.Bibpm.Equals(input.Bibpm)
                ) && 
                (
                    this.Xolap == input.Xolap ||
                    this.Xolap.Equals(input.Xolap)
                ) && 
                (
                    this.FlatFileBased == input.FlatFileBased ||
                    this.FlatFileBased.Equals(input.FlatFileBased)
                ) && 
                (
                    this.EssbaseInfo == input.EssbaseInfo ||
                    (this.EssbaseInfo != null &&
                    this.EssbaseInfo.Equals(input.EssbaseInfo))
                ) && 
                (
                    this.ColumnOperations == input.ColumnOperations ||
                    this.ColumnOperations != null &&
                    input.ColumnOperations != null &&
                    this.ColumnOperations.SequenceEqual(input.ColumnOperations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dimensions != null)
                {
                    hashCode = (hashCode * 59) + this.Dimensions.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeStamp.GetHashCode();
                if (this.DataSource != null)
                {
                    hashCode = (hashCode * 59) + this.DataSource.GetHashCode();
                }
                if (this.DimensionBuildOptions != null)
                {
                    hashCode = (hashCode * 59) + this.DimensionBuildOptions.GetHashCode();
                }
                if (this.DataLoadOptions != null)
                {
                    hashCode = (hashCode * 59) + this.DataLoadOptions.GetHashCode();
                }
                if (this.EditorOptions != null)
                {
                    hashCode = (hashCode * 59) + this.EditorOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Encoding.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Studio.GetHashCode();
                hashCode = (hashCode * 59) + this.Bibpm.GetHashCode();
                hashCode = (hashCode * 59) + this.Xolap.GetHashCode();
                hashCode = (hashCode * 59) + this.FlatFileBased.GetHashCode();
                if (this.EssbaseInfo != null)
                {
                    hashCode = (hashCode * 59) + this.EssbaseInfo.GetHashCode();
                }
                if (this.ColumnOperations != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnOperations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
