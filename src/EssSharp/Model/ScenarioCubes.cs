/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ScenarioCubes
    /// </summary>
    [DataContract(Name = "ScenarioCubes")]
    public partial class ScenarioCubes : IEquatable<ScenarioCubes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioCubes" /> class.
        /// </summary>
        /// <param name="application">application.</param>
        /// <param name="databases">databases.</param>
        /// <param name="createScenario">createScenario.</param>
        /// <param name="participateInScenario">participateInScenario.</param>
        /// <param name="databaseAdmin">databaseAdmin.</param>
        /// <param name="easManagedApp">easManagedApp.</param>
        public ScenarioCubes(string application = default(string), List<string> databases = default(List<string>), bool createScenario = default(bool), bool participateInScenario = default(bool), bool databaseAdmin = default(bool), bool easManagedApp = default(bool))
        {
            this.Application = application;
            this.Databases = databases;
            this.CreateScenario = createScenario;
            this.ParticipateInScenario = participateInScenario;
            this.DatabaseAdmin = databaseAdmin;
            this.EasManagedApp = easManagedApp;
        }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Databases
        /// </summary>
        [DataMember(Name = "databases", EmitDefaultValue = false)]
        public List<string> Databases { get; set; }

        /// <summary>
        /// Gets or Sets CreateScenario
        /// </summary>
        [DataMember(Name = "createScenario", EmitDefaultValue = true)]
        public bool CreateScenario { get; set; }

        /// <summary>
        /// Gets or Sets ParticipateInScenario
        /// </summary>
        [DataMember(Name = "participateInScenario", EmitDefaultValue = true)]
        public bool ParticipateInScenario { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseAdmin
        /// </summary>
        [DataMember(Name = "databaseAdmin", EmitDefaultValue = true)]
        public bool DatabaseAdmin { get; set; }

        /// <summary>
        /// Gets or Sets EasManagedApp
        /// </summary>
        [DataMember(Name = "easManagedApp", EmitDefaultValue = true)]
        public bool EasManagedApp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScenarioCubes {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Databases: ").Append(Databases).Append("\n");
            sb.Append("  CreateScenario: ").Append(CreateScenario).Append("\n");
            sb.Append("  ParticipateInScenario: ").Append(ParticipateInScenario).Append("\n");
            sb.Append("  DatabaseAdmin: ").Append(DatabaseAdmin).Append("\n");
            sb.Append("  EasManagedApp: ").Append(EasManagedApp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioCubes);
        }

        /// <summary>
        /// Returns true if ScenarioCubes instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioCubes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioCubes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Databases == input.Databases ||
                    this.Databases != null &&
                    input.Databases != null &&
                    this.Databases.SequenceEqual(input.Databases)
                ) && 
                (
                    this.CreateScenario == input.CreateScenario ||
                    this.CreateScenario.Equals(input.CreateScenario)
                ) && 
                (
                    this.ParticipateInScenario == input.ParticipateInScenario ||
                    this.ParticipateInScenario.Equals(input.ParticipateInScenario)
                ) && 
                (
                    this.DatabaseAdmin == input.DatabaseAdmin ||
                    this.DatabaseAdmin.Equals(input.DatabaseAdmin)
                ) && 
                (
                    this.EasManagedApp == input.EasManagedApp ||
                    this.EasManagedApp.Equals(input.EasManagedApp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Databases != null)
                {
                    hashCode = (hashCode * 59) + this.Databases.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateScenario.GetHashCode();
                hashCode = (hashCode * 59) + this.ParticipateInScenario.GetHashCode();
                hashCode = (hashCode * 59) + this.DatabaseAdmin.GetHashCode();
                hashCode = (hashCode * 59) + this.EasManagedApp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
