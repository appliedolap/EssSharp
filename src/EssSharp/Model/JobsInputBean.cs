/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// JobsInputBean
    /// </summary>
    [DataContract(Name = "JobsInputBean")]
    public partial class JobsInputBean : IEquatable<JobsInputBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobsInputBean" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JobsInputBean() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobsInputBean" /> class.
        /// </summary>
        /// <param name="application">application (required).</param>
        /// <param name="db">db (required).</param>
        /// <param name="jobtype">jobtype (required).</param>
        /// <param name="parameters">parameters.</param>
        public JobsInputBean(string application = default(string), string db = default(string), string jobtype = default(string), ParametersBean parameters = default(ParametersBean))
        {
            // to ensure "application" is required (not null)
            if (application == null)
            {
                throw new ArgumentNullException("application is a required property for JobsInputBean and cannot be null");
            }
            this.Application = application;
            // to ensure "db" is required (not null)
            if (db == null)
            {
                throw new ArgumentNullException("db is a required property for JobsInputBean and cannot be null");
            }
            this.Db = db;
            // to ensure "jobtype" is required (not null)
            if (jobtype == null)
            {
                throw new ArgumentNullException("jobtype is a required property for JobsInputBean and cannot be null");
            }
            this.Jobtype = jobtype;
            this.Parameters = parameters;
        }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", IsRequired = true, EmitDefaultValue = true)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Db
        /// </summary>
        [DataMember(Name = "db", IsRequired = true, EmitDefaultValue = true)]
        public string Db { get; set; }

        /// <summary>
        /// Gets or Sets Jobtype
        /// </summary>
        [DataMember(Name = "jobtype", IsRequired = true, EmitDefaultValue = true)]
        public string Jobtype { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public ParametersBean Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobsInputBean {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Db: ").Append(Db).Append("\n");
            sb.Append("  Jobtype: ").Append(Jobtype).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobsInputBean);
        }

        /// <summary>
        /// Returns true if JobsInputBean instances are equal
        /// </summary>
        /// <param name="input">Instance of JobsInputBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobsInputBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Db == input.Db ||
                    (this.Db != null &&
                    this.Db.Equals(input.Db))
                ) && 
                (
                    this.Jobtype == input.Jobtype ||
                    (this.Jobtype != null &&
                    this.Jobtype.Equals(input.Jobtype))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Db != null)
                {
                    hashCode = (hashCode * 59) + this.Db.GetHashCode();
                }
                if (this.Jobtype != null)
                {
                    hashCode = (hashCode * 59) + this.Jobtype.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
