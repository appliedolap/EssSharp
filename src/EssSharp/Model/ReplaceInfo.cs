/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ReplaceInfo
    /// </summary>
    [DataContract(Name = "ReplaceInfo")]
    public partial class ReplaceInfo : IEquatable<ReplaceInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplaceInfo" /> class.
        /// </summary>
        /// <param name="find">find.</param>
        /// <param name="replace">replace.</param>
        /// <param name="matchWholeWord">matchWholeWord.</param>
        /// <param name="replaceAll">replaceAll.</param>
        /// <param name="caseSensitive">caseSensitive.</param>
        public ReplaceInfo(string find = default(string), string replace = default(string), bool matchWholeWord = default(bool), bool replaceAll = default(bool), bool caseSensitive = default(bool))
        {
            this.Find = find;
            this.Replace = replace;
            this.MatchWholeWord = matchWholeWord;
            this.ReplaceAll = replaceAll;
            this.CaseSensitive = caseSensitive;
        }

        /// <summary>
        /// Gets or Sets Find
        /// </summary>
        [DataMember(Name = "find", EmitDefaultValue = false)]
        public string Find { get; set; }

        /// <summary>
        /// Gets or Sets Replace
        /// </summary>
        [DataMember(Name = "replace", EmitDefaultValue = false)]
        public string Replace { get; set; }

        /// <summary>
        /// Gets or Sets MatchWholeWord
        /// </summary>
        [DataMember(Name = "matchWholeWord", EmitDefaultValue = true)]
        public bool MatchWholeWord { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceAll
        /// </summary>
        [DataMember(Name = "replaceAll", EmitDefaultValue = true)]
        public bool ReplaceAll { get; set; }

        /// <summary>
        /// Gets or Sets CaseSensitive
        /// </summary>
        [DataMember(Name = "caseSensitive", EmitDefaultValue = true)]
        public bool CaseSensitive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplaceInfo {\n");
            sb.Append("  Find: ").Append(Find).Append("\n");
            sb.Append("  Replace: ").Append(Replace).Append("\n");
            sb.Append("  MatchWholeWord: ").Append(MatchWholeWord).Append("\n");
            sb.Append("  ReplaceAll: ").Append(ReplaceAll).Append("\n");
            sb.Append("  CaseSensitive: ").Append(CaseSensitive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplaceInfo);
        }

        /// <summary>
        /// Returns true if ReplaceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplaceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplaceInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Find == input.Find ||
                    (this.Find != null &&
                    this.Find.Equals(input.Find))
                ) && 
                (
                    this.Replace == input.Replace ||
                    (this.Replace != null &&
                    this.Replace.Equals(input.Replace))
                ) && 
                (
                    this.MatchWholeWord == input.MatchWholeWord ||
                    this.MatchWholeWord.Equals(input.MatchWholeWord)
                ) && 
                (
                    this.ReplaceAll == input.ReplaceAll ||
                    this.ReplaceAll.Equals(input.ReplaceAll)
                ) && 
                (
                    this.CaseSensitive == input.CaseSensitive ||
                    this.CaseSensitive.Equals(input.CaseSensitive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Find != null)
                {
                    hashCode = (hashCode * 59) + this.Find.GetHashCode();
                }
                if (this.Replace != null)
                {
                    hashCode = (hashCode * 59) + this.Replace.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MatchWholeWord.GetHashCode();
                hashCode = (hashCode * 59) + this.ReplaceAll.GetHashCode();
                hashCode = (hashCode * 59) + this.CaseSensitive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
