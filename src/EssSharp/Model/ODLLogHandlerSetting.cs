/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// ODLLogHandlerSetting
    /// </summary>
    [DataContract(Name = "ODLLogHandlerSetting")]
    public partial class ODLLogHandlerSetting : IEquatable<ODLLogHandlerSetting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ODLLogHandlerSetting" /> class.
        /// </summary>
        /// <param name="handlerName">handlerName.</param>
        /// <param name="logType">logType.</param>
        /// <param name="maxLogSize">maxLogSize.</param>
        /// <param name="maxAllLogSize">maxAllLogSize.</param>
        /// <param name="rotationPeriod">rotationPeriod.</param>
        /// <param name="rotationPeriodCustom">rotationPeriodCustom.</param>
        /// <param name="retentionPeriod">retentionPeriod.</param>
        /// <param name="retentionPeriodCustom">retentionPeriodCustom.</param>
        /// <param name="links">links.</param>
        public ODLLogHandlerSetting(string handlerName = default(string), string logType = default(string), string maxLogSize = default(string), string maxAllLogSize = default(string), string rotationPeriod = default(string), string rotationPeriodCustom = default(string), string retentionPeriod = default(string), string retentionPeriodCustom = default(string), List<Link> links = default(List<Link>))
        {
            this.HandlerName = handlerName;
            this.LogType = logType;
            this.MaxLogSize = maxLogSize;
            this.MaxAllLogSize = maxAllLogSize;
            this.RotationPeriod = rotationPeriod;
            this.RotationPeriodCustom = rotationPeriodCustom;
            this.RetentionPeriod = retentionPeriod;
            this.RetentionPeriodCustom = retentionPeriodCustom;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets HandlerName
        /// </summary>
        [DataMember(Name = "handlerName", EmitDefaultValue = false)]
        public string HandlerName { get; set; }

        /// <summary>
        /// Gets or Sets LogType
        /// </summary>
        [DataMember(Name = "logType", EmitDefaultValue = false)]
        public string LogType { get; set; }

        /// <summary>
        /// Gets or Sets MaxLogSize
        /// </summary>
        [DataMember(Name = "maxLogSize", EmitDefaultValue = false)]
        public string MaxLogSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxAllLogSize
        /// </summary>
        [DataMember(Name = "maxAllLogSize", EmitDefaultValue = false)]
        public string MaxAllLogSize { get; set; }

        /// <summary>
        /// Gets or Sets RotationPeriod
        /// </summary>
        [DataMember(Name = "rotationPeriod", EmitDefaultValue = false)]
        public string RotationPeriod { get; set; }

        /// <summary>
        /// Gets or Sets RotationPeriodCustom
        /// </summary>
        [DataMember(Name = "rotationPeriodCustom", EmitDefaultValue = false)]
        public string RotationPeriodCustom { get; set; }

        /// <summary>
        /// Gets or Sets RetentionPeriod
        /// </summary>
        [DataMember(Name = "retentionPeriod", EmitDefaultValue = false)]
        public string RetentionPeriod { get; set; }

        /// <summary>
        /// Gets or Sets RetentionPeriodCustom
        /// </summary>
        [DataMember(Name = "retentionPeriodCustom", EmitDefaultValue = false)]
        public string RetentionPeriodCustom { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ODLLogHandlerSetting {\n");
            sb.Append("  HandlerName: ").Append(HandlerName).Append("\n");
            sb.Append("  LogType: ").Append(LogType).Append("\n");
            sb.Append("  MaxLogSize: ").Append(MaxLogSize).Append("\n");
            sb.Append("  MaxAllLogSize: ").Append(MaxAllLogSize).Append("\n");
            sb.Append("  RotationPeriod: ").Append(RotationPeriod).Append("\n");
            sb.Append("  RotationPeriodCustom: ").Append(RotationPeriodCustom).Append("\n");
            sb.Append("  RetentionPeriod: ").Append(RetentionPeriod).Append("\n");
            sb.Append("  RetentionPeriodCustom: ").Append(RetentionPeriodCustom).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ODLLogHandlerSetting);
        }

        /// <summary>
        /// Returns true if ODLLogHandlerSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of ODLLogHandlerSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ODLLogHandlerSetting input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HandlerName == input.HandlerName ||
                    (this.HandlerName != null &&
                    this.HandlerName.Equals(input.HandlerName))
                ) && 
                (
                    this.LogType == input.LogType ||
                    (this.LogType != null &&
                    this.LogType.Equals(input.LogType))
                ) && 
                (
                    this.MaxLogSize == input.MaxLogSize ||
                    (this.MaxLogSize != null &&
                    this.MaxLogSize.Equals(input.MaxLogSize))
                ) && 
                (
                    this.MaxAllLogSize == input.MaxAllLogSize ||
                    (this.MaxAllLogSize != null &&
                    this.MaxAllLogSize.Equals(input.MaxAllLogSize))
                ) && 
                (
                    this.RotationPeriod == input.RotationPeriod ||
                    (this.RotationPeriod != null &&
                    this.RotationPeriod.Equals(input.RotationPeriod))
                ) && 
                (
                    this.RotationPeriodCustom == input.RotationPeriodCustom ||
                    (this.RotationPeriodCustom != null &&
                    this.RotationPeriodCustom.Equals(input.RotationPeriodCustom))
                ) && 
                (
                    this.RetentionPeriod == input.RetentionPeriod ||
                    (this.RetentionPeriod != null &&
                    this.RetentionPeriod.Equals(input.RetentionPeriod))
                ) && 
                (
                    this.RetentionPeriodCustom == input.RetentionPeriodCustom ||
                    (this.RetentionPeriodCustom != null &&
                    this.RetentionPeriodCustom.Equals(input.RetentionPeriodCustom))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HandlerName != null)
                {
                    hashCode = (hashCode * 59) + this.HandlerName.GetHashCode();
                }
                if (this.LogType != null)
                {
                    hashCode = (hashCode * 59) + this.LogType.GetHashCode();
                }
                if (this.MaxLogSize != null)
                {
                    hashCode = (hashCode * 59) + this.MaxLogSize.GetHashCode();
                }
                if (this.MaxAllLogSize != null)
                {
                    hashCode = (hashCode * 59) + this.MaxAllLogSize.GetHashCode();
                }
                if (this.RotationPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.RotationPeriod.GetHashCode();
                }
                if (this.RotationPeriodCustom != null)
                {
                    hashCode = (hashCode * 59) + this.RotationPeriodCustom.GetHashCode();
                }
                if (this.RetentionPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.RetentionPeriod.GetHashCode();
                }
                if (this.RetentionPeriodCustom != null)
                {
                    hashCode = (hashCode * 59) + this.RetentionPeriodCustom.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
