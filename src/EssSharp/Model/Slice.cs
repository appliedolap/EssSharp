/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// Slice
    /// </summary>
    [DataContract(Name = "Slice")]
    public partial class Slice : IEquatable<Slice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Slice" /> class.
        /// </summary>
        /// <param name="rows">rows.</param>
        /// <param name="dirtyCells">dirtyCells.</param>
        /// <param name="dirtyTexts">dirtyTexts.</param>
        /// <param name="columns">columns.</param>
        /// <param name="data">data.</param>
        public Slice(int rows = default(int), List<int> dirtyCells = default(List<int>), List<int> dirtyTexts = default(List<int>), int columns = default(int), Data data = default(Data))
        {
            this.Rows = rows;
            this.DirtyCells = dirtyCells;
            this.DirtyTexts = dirtyTexts;
            this.Columns = columns;
            this.Data = data;
        }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name = "rows", EmitDefaultValue = false)]
        public int Rows { get; set; }

        /// <summary>
        /// Gets or Sets DirtyCells
        /// </summary>
        [DataMember(Name = "dirtyCells", EmitDefaultValue = false)]
        public List<int> DirtyCells { get; set; }

        /// <summary>
        /// Gets or Sets DirtyTexts
        /// </summary>
        [DataMember(Name = "dirtyTexts", EmitDefaultValue = false)]
        public List<int> DirtyTexts { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", EmitDefaultValue = false)]
        public int Columns { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public Data Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Slice {\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  DirtyCells: ").Append(DirtyCells).Append("\n");
            sb.Append("  DirtyTexts: ").Append(DirtyTexts).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Slice);
        }

        /// <summary>
        /// Returns true if Slice instances are equal
        /// </summary>
        /// <param name="input">Instance of Slice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Slice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Rows == input.Rows ||
                    this.Rows.Equals(input.Rows)
                ) && 
                (
                    this.DirtyCells == input.DirtyCells ||
                    this.DirtyCells != null &&
                    input.DirtyCells != null &&
                    this.DirtyCells.SequenceEqual(input.DirtyCells)
                ) && 
                (
                    this.DirtyTexts == input.DirtyTexts ||
                    this.DirtyTexts != null &&
                    input.DirtyTexts != null &&
                    this.DirtyTexts.SequenceEqual(input.DirtyTexts)
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns.Equals(input.Columns)
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                if (this.DirtyCells != null)
                {
                    hashCode = (hashCode * 59) + this.DirtyCells.GetHashCode();
                }
                if (this.DirtyTexts != null)
                {
                    hashCode = (hashCode * 59) + this.DirtyTexts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
