/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EssSharp.Client.OpenAPIDateConverter;

namespace EssSharp.Model
{
    /// <summary>
    /// AppStartupSettings
    /// </summary>
    [DataContract(Name = "AppStartupSettings")]
    public partial class AppStartupSettings : IEquatable<AppStartupSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppStartupSettings" /> class.
        /// </summary>
        /// <param name="allowUsersToStartApplication">allowUsersToStartApplication.</param>
        /// <param name="startApplicationWhenServerStarts">startApplicationWhenServerStarts.</param>
        public AppStartupSettings(bool allowUsersToStartApplication = default(bool), bool startApplicationWhenServerStarts = default(bool))
        {
            this.AllowUsersToStartApplication = allowUsersToStartApplication;
            this.StartApplicationWhenServerStarts = startApplicationWhenServerStarts;
        }

        /// <summary>
        /// Gets or Sets AllowUsersToStartApplication
        /// </summary>
        [DataMember(Name = "allowUsersToStartApplication", EmitDefaultValue = true)]
        public bool AllowUsersToStartApplication { get; set; }

        /// <summary>
        /// Gets or Sets StartApplicationWhenServerStarts
        /// </summary>
        [DataMember(Name = "startApplicationWhenServerStarts", EmitDefaultValue = true)]
        public bool StartApplicationWhenServerStarts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppStartupSettings {\n");
            sb.Append("  AllowUsersToStartApplication: ").Append(AllowUsersToStartApplication).Append("\n");
            sb.Append("  StartApplicationWhenServerStarts: ").Append(StartApplicationWhenServerStarts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppStartupSettings);
        }

        /// <summary>
        /// Returns true if AppStartupSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AppStartupSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppStartupSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowUsersToStartApplication == input.AllowUsersToStartApplication ||
                    this.AllowUsersToStartApplication.Equals(input.AllowUsersToStartApplication)
                ) && 
                (
                    this.StartApplicationWhenServerStarts == input.StartApplicationWhenServerStarts ||
                    this.StartApplicationWhenServerStarts.Equals(input.StartApplicationWhenServerStarts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowUsersToStartApplication.GetHashCode();
                hashCode = (hashCode * 59) + this.StartApplicationWhenServerStarts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
