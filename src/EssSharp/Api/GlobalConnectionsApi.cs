/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalConnectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalConnectionsCreateConnection(Connection body, int operationIndex = 0);

        /// <summary>
        /// Create Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalConnectionsCreateConnectionWithHttpInfo(Connection body, int operationIndex = 0);
        /// <summary>
        /// Delete Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalConnectionsDeleteConnection(string connectionName, int operationIndex = 0);

        /// <summary>
        /// Delete Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalConnectionsDeleteConnectionWithHttpInfo(string connectionName, int operationIndex = 0);
        /// <summary>
        /// Get Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Connection</returns>
        Connection GlobalConnectionsGetConnectionDetails(string connectionName, bool? password = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Connection</returns>
        ApiResponse<Connection> GlobalConnectionsGetConnectionDetailsWithHttpInfo(string connectionName, bool? password = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List Connections
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectionsList</returns>
        ConnectionsList GlobalConnectionsGetConnections(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Connections
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectionsList</returns>
        ApiResponse<ConnectionsList> GlobalConnectionsGetConnectionsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Test New Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalConnectionsTestConnection(Connection body, int operationIndex = 0);

        /// <summary>
        /// Test New Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalConnectionsTestConnectionWithHttpInfo(Connection body, int operationIndex = 0);
        /// <summary>
        /// Test Saved Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalConnectionsTestConnectionExisting(string connectionName, int operationIndex = 0);

        /// <summary>
        /// Test Saved Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalConnectionsTestConnectionExistingWithHttpInfo(string connectionName, int operationIndex = 0);
        /// <summary>
        /// Update Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Connection</returns>
        Connection GlobalConnectionsUpdateConnection(string connectionName, Connection body, int operationIndex = 0);

        /// <summary>
        /// Update Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Connection</returns>
        ApiResponse<Connection> GlobalConnectionsUpdateConnectionWithHttpInfo(string connectionName, Connection body, int operationIndex = 0);
        /// <summary>
        /// Upload Connection Wallet File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletLocation</returns>
        WalletLocation GlobalConnectionsWallets(string connectionName, int operationIndex = 0);

        /// <summary>
        /// Upload Connection Wallet File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletLocation</returns>
        ApiResponse<WalletLocation> GlobalConnectionsWalletsWithHttpInfo(string connectionName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalConnectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalConnectionsCreateConnectionAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalConnectionsCreateConnectionWithHttpInfoAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalConnectionsDeleteConnectionAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalConnectionsDeleteConnectionWithHttpInfoAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Connection</returns>
        System.Threading.Tasks.Task<Connection> GlobalConnectionsGetConnectionDetailsAsync(string connectionName, bool? password = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Connection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Connection>> GlobalConnectionsGetConnectionDetailsWithHttpInfoAsync(string connectionName, bool? password = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Connections
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionsList</returns>
        System.Threading.Tasks.Task<ConnectionsList> GlobalConnectionsGetConnectionsAsync(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Connections
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionsList>> GlobalConnectionsGetConnectionsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test New Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalConnectionsTestConnectionAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test New Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalConnectionsTestConnectionWithHttpInfoAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test Saved Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalConnectionsTestConnectionExistingAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test Saved Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalConnectionsTestConnectionExistingWithHttpInfoAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Connection</returns>
        System.Threading.Tasks.Task<Connection> GlobalConnectionsUpdateConnectionAsync(string connectionName, Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Connection
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Connection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Connection>> GlobalConnectionsUpdateConnectionWithHttpInfoAsync(string connectionName, Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload Connection Wallet File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletLocation</returns>
        System.Threading.Tasks.Task<WalletLocation> GlobalConnectionsWalletsAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload Connection Wallet File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletLocation>> GlobalConnectionsWalletsWithHttpInfoAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalConnectionsApi : IGlobalConnectionsApiSync, IGlobalConnectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalConnectionsApi : IGlobalConnectionsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalConnectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalConnectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalConnectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalConnectionsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalConnectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalConnectionsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalConnectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GlobalConnectionsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Connection &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalConnectionsCreateConnection(Connection body, int operationIndex = 0)
        {
            GlobalConnectionsCreateConnectionWithHttpInfo(body);
        }

        /// <summary>
        /// Create Connection &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalConnectionsCreateConnectionWithHttpInfo(Connection body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GlobalConnectionsApi->GlobalConnectionsCreateConnection");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsCreateConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/connections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsCreateConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Connection &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalConnectionsCreateConnectionAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalConnectionsCreateConnectionWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Connection &lt;p&gt;Creates a connection based on specified inputs. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of connections. Other required inputs differ based on the type of connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalConnectionsCreateConnectionWithHttpInfoAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GlobalConnectionsApi->GlobalConnectionsCreateConnection");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsCreateConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/connections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsCreateConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Connection &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalConnectionsDeleteConnection(string connectionName, int operationIndex = 0)
        {
            GlobalConnectionsDeleteConnectionWithHttpInfo(connectionName);
        }

        /// <summary>
        /// Delete Connection &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalConnectionsDeleteConnectionWithHttpInfo(string connectionName, int operationIndex = 0)
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsDeleteConnection");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsDeleteConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/connections/{connectionName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsDeleteConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Connection &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalConnectionsDeleteConnectionAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalConnectionsDeleteConnectionWithHttpInfoAsync(connectionName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Connection &lt;p&gt;Deletes a named global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalConnectionsDeleteConnectionWithHttpInfoAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsDeleteConnection");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsDeleteConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/connections/{connectionName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsDeleteConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connection &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Connection</returns>
        public Connection GlobalConnectionsGetConnectionDetails(string connectionName, bool? password = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Connection> localVarResponse = GlobalConnectionsGetConnectionDetailsWithHttpInfo(connectionName, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connection &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Connection</returns>
        public EssSharp.Client.ApiResponse<Connection> GlobalConnectionsGetConnectionDetailsWithHttpInfo(string connectionName, bool? password = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsGetConnectionDetails");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsGetConnectionDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Connection>("/connections/{connectionName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsGetConnectionDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connection &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Connection</returns>
        public async System.Threading.Tasks.Task<Connection> GlobalConnectionsGetConnectionDetailsAsync(string connectionName, bool? password = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Connection> localVarResponse = await GlobalConnectionsGetConnectionDetailsWithHttpInfoAsync(connectionName, password, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connection &lt;p&gt;Returns details about the specified global connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="password">&lt;p&gt;If set to true, the encrypted password is returned in the result.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Connection)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Connection>> GlobalConnectionsGetConnectionDetailsWithHttpInfoAsync(string connectionName, bool? password = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsGetConnectionDetails");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsGetConnectionDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Connection>("/connections/{connectionName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsGetConnectionDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connections &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectionsList</returns>
        public ConnectionsList GlobalConnectionsGetConnections(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ConnectionsList> localVarResponse = GlobalConnectionsGetConnectionsWithHttpInfo(offset, limit, connType, repoConn, walletConn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connections &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectionsList</returns>
        public EssSharp.Client.ApiResponse<ConnectionsList> GlobalConnectionsGetConnectionsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (connType != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connType", connType));
            }
            if (repoConn != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "repoConn", repoConn));
            }
            if (walletConn != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "walletConn", walletConn));
            }

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsGetConnections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConnectionsList>("/connections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsGetConnections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connections &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionsList</returns>
        public async System.Threading.Tasks.Task<ConnectionsList> GlobalConnectionsGetConnectionsAsync(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ConnectionsList> localVarResponse = await GlobalConnectionsGetConnectionsWithHttpInfoAsync(offset, limit, connType, repoConn, walletConn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connections &lt;p&gt;Returns global connections list, including details such as name, description, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of connections to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of connections to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connType">&lt;p&gt;Type of connections to return, if provided&lt;/p&gt; (optional)</param>
        /// <param name="repoConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns repository-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="walletConn">&lt;p&gt;Used in conjunction with connType param. If set to true, returns wallet-based Autonomous Data Warehouse connections. Default is false&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionsList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ConnectionsList>> GlobalConnectionsGetConnectionsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string connType = default(string), bool? repoConn = default(bool?), bool? walletConn = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (connType != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connType", connType));
            }
            if (repoConn != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "repoConn", repoConn));
            }
            if (walletConn != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "walletConn", walletConn));
            }

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsGetConnections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConnectionsList>("/connections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsGetConnections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test New Connection &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalConnectionsTestConnection(Connection body, int operationIndex = 0)
        {
            GlobalConnectionsTestConnectionWithHttpInfo(body);
        }

        /// <summary>
        /// Test New Connection &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalConnectionsTestConnectionWithHttpInfo(Connection body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GlobalConnectionsApi->GlobalConnectionsTestConnection");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsTestConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/connections/actions/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsTestConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test New Connection &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalConnectionsTestConnectionAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalConnectionsTestConnectionWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Test New Connection &lt;p&gt;Tests a new or updated global connection, using specified inputs, without saving it.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalConnectionsTestConnectionWithHttpInfoAsync(Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GlobalConnectionsApi->GlobalConnectionsTestConnection");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsTestConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/connections/actions/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsTestConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Saved Connection &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalConnectionsTestConnectionExisting(string connectionName, int operationIndex = 0)
        {
            GlobalConnectionsTestConnectionExistingWithHttpInfo(connectionName);
        }

        /// <summary>
        /// Test Saved Connection &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalConnectionsTestConnectionExistingWithHttpInfo(string connectionName, int operationIndex = 0)
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsTestConnectionExisting");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsTestConnectionExisting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/connections/{connectionName}/actions/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsTestConnectionExisting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Saved Connection &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalConnectionsTestConnectionExistingAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalConnectionsTestConnectionExistingWithHttpInfoAsync(connectionName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Test Saved Connection &lt;p&gt;Tests a saved global connection by name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalConnectionsTestConnectionExistingWithHttpInfoAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsTestConnectionExisting");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsTestConnectionExisting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/connections/{connectionName}/actions/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsTestConnectionExisting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Connection &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Connection</returns>
        public Connection GlobalConnectionsUpdateConnection(string connectionName, Connection body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Connection> localVarResponse = GlobalConnectionsUpdateConnectionWithHttpInfo(connectionName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Connection &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Connection</returns>
        public EssSharp.Client.ApiResponse<Connection> GlobalConnectionsUpdateConnectionWithHttpInfo(string connectionName, Connection body, int operationIndex = 0)
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsUpdateConnection");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GlobalConnectionsApi->GlobalConnectionsUpdateConnection");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsUpdateConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Connection>("/connections/{connectionName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsUpdateConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Connection &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Connection</returns>
        public async System.Threading.Tasks.Task<Connection> GlobalConnectionsUpdateConnectionAsync(string connectionName, Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Connection> localVarResponse = await GlobalConnectionsUpdateConnectionWithHttpInfoAsync(connectionName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Connection &lt;p&gt;Update the named global connection. If the update is successful, returns details about the updated connection. &lt;code&gt;type&lt;/code&gt; is a required input for all types of connections. Other required inputs differ based on the type of the connection.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Connection details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Connection)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Connection>> GlobalConnectionsUpdateConnectionWithHttpInfoAsync(string connectionName, Connection body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsUpdateConnection");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GlobalConnectionsApi->GlobalConnectionsUpdateConnection");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsUpdateConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Connection>("/connections/{connectionName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsUpdateConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Connection Wallet File &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletLocation</returns>
        public WalletLocation GlobalConnectionsWallets(string connectionName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<WalletLocation> localVarResponse = GlobalConnectionsWalletsWithHttpInfo(connectionName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Connection Wallet File &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletLocation</returns>
        public EssSharp.Client.ApiResponse<WalletLocation> GlobalConnectionsWalletsWithHttpInfo(string connectionName, int operationIndex = 0)
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsWallets");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsWallets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WalletLocation>("/connections/{connectionName}/wallet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsWallets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Connection Wallet File &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletLocation</returns>
        public async System.Threading.Tasks.Task<WalletLocation> GlobalConnectionsWalletsAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<WalletLocation> localVarResponse = await GlobalConnectionsWalletsWithHttpInfoAsync(connectionName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Connection Wallet File &lt;p&gt;Upload a connection wallet file for a global connection. Oracle client credentials (wallet files) are downloaded from Autonomous Data Warehouse by a service administrator. If you are not an Autonomous Data Warehouse administrator, your administrator should provide you with the client credentials.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletLocation)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<WalletLocation>> GlobalConnectionsWalletsWithHttpInfoAsync(string connectionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionName' is set
            if (connectionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'connectionName' when calling GlobalConnectionsApi->GlobalConnectionsWallets");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("connectionName", EssSharp.Client.ClientUtils.ParameterToString(connectionName)); // path parameter

            localVarRequestOptions.Operation = "GlobalConnectionsApi.GlobalConnectionsWallets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<WalletLocation>("/connections/{connectionName}/wallet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalConnectionsWallets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
