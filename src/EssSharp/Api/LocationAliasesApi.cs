/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationAliasesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationAliasesCreate(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0);

        /// <summary>
        /// Create Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationAliasesCreateWithHttpInfo(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0);
        /// <summary>
        /// Delete Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationAliasesDelete(string applicationName, string databaseName, string aliasName, int operationIndex = 0);

        /// <summary>
        /// Delete Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationAliasesDeleteWithHttpInfo(string applicationName, string databaseName, string aliasName, int operationIndex = 0);
        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationAliasBean</returns>
        LocationAliasBean LocationAliasesGetLocationAlias(string applicationName, string databaseName, string aliasName, int operationIndex = 0);

        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationAliasBean</returns>
        ApiResponse<LocationAliasBean> LocationAliasesGetLocationAliasWithHttpInfo(string applicationName, string databaseName, string aliasName, int operationIndex = 0);
        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// Get Location Alias
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationAliasList</returns>
        LocationAliasList LocationAliasesGetLocationAliases(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// Get Location Alias
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationAliasList</returns>
        ApiResponse<LocationAliasList> LocationAliasesGetLocationAliasesWithHttpInfo(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LocationAliasesUpdate(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0);

        /// <summary>
        /// Update Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocationAliasesUpdateWithHttpInfo(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationAliasesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationAliasesCreateAsync(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationAliasesCreateWithHttpInfoAsync(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationAliasesDeleteAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationAliasesDeleteWithHttpInfoAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationAliasBean</returns>
        System.Threading.Tasks.Task<LocationAliasBean> LocationAliasesGetLocationAliasAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationAliasBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationAliasBean>> LocationAliasesGetLocationAliasWithHttpInfoAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// Get Location Alias
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationAliasList</returns>
        System.Threading.Tasks.Task<LocationAliasList> LocationAliasesGetLocationAliasesAsync(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Location Alias
        /// </summary>
        /// <remarks>
        /// Get Location Alias
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationAliasList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationAliasList>> LocationAliasesGetLocationAliasesWithHttpInfoAsync(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocationAliasesUpdateAsync(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Location Alias
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocationAliasesUpdateWithHttpInfoAsync(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationAliasesApi : ILocationAliasesApiSync, ILocationAliasesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationAliasesApi : ILocationAliasesApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAliasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationAliasesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAliasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationAliasesApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAliasesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocationAliasesApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAliasesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LocationAliasesApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Location Alias &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationAliasesCreate(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0)
        {
            LocationAliasesCreateWithHttpInfo(applicationName, databaseName, body);
        }

        /// <summary>
        /// Create Location Alias &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> LocationAliasesCreateWithHttpInfo(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesCreate");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling LocationAliasesApi->LocationAliasesCreate");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/locationaliases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Location Alias &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationAliasesCreateAsync(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationAliasesCreateWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Location Alias &lt;p&gt;Creates a new location alias in the given application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> LocationAliasesCreateWithHttpInfoAsync(string applicationName, string databaseName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesCreate");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling LocationAliasesApi->LocationAliasesCreate");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/locationaliases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Location Alias &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationAliasesDelete(string applicationName, string databaseName, string aliasName, int operationIndex = 0)
        {
            LocationAliasesDeleteWithHttpInfo(applicationName, databaseName, aliasName);
        }

        /// <summary>
        /// Delete Location Alias &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> LocationAliasesDeleteWithHttpInfo(string applicationName, string databaseName, string aliasName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesDelete");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesDelete");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'aliasName' when calling LocationAliasesApi->LocationAliasesDelete");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", EssSharp.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Location Alias &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationAliasesDeleteAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationAliasesDeleteWithHttpInfoAsync(applicationName, databaseName, aliasName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Location Alias &lt;p&gt;Deletes the specified location alias from the application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> LocationAliasesDeleteWithHttpInfoAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesDelete");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesDelete");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'aliasName' when calling LocationAliasesApi->LocationAliasesDelete");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", EssSharp.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Location Alias &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationAliasBean</returns>
        public LocationAliasBean LocationAliasesGetLocationAlias(string applicationName, string databaseName, string aliasName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<LocationAliasBean> localVarResponse = LocationAliasesGetLocationAliasWithHttpInfo(applicationName, databaseName, aliasName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location Alias &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationAliasBean</returns>
        public EssSharp.Client.ApiResponse<LocationAliasBean> LocationAliasesGetLocationAliasWithHttpInfo(string applicationName, string databaseName, string aliasName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesGetLocationAlias");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesGetLocationAlias");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'aliasName' when calling LocationAliasesApi->LocationAliasesGetLocationAlias");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", EssSharp.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesGetLocationAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationAliasBean>("/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesGetLocationAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Location Alias &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationAliasBean</returns>
        public async System.Threading.Tasks.Task<LocationAliasBean> LocationAliasesGetLocationAliasAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<LocationAliasBean> localVarResponse = await LocationAliasesGetLocationAliasWithHttpInfoAsync(applicationName, databaseName, aliasName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location Alias &lt;p&gt;Returns details of the specified location alias.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationAliasBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<LocationAliasBean>> LocationAliasesGetLocationAliasWithHttpInfoAsync(string applicationName, string databaseName, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesGetLocationAlias");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesGetLocationAlias");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'aliasName' when calling LocationAliasesApi->LocationAliasesGetLocationAlias");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", EssSharp.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesGetLocationAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationAliasBean>("/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesGetLocationAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Location Alias Get Location Alias
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationAliasList</returns>
        public LocationAliasList LocationAliasesGetLocationAliases(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<LocationAliasList> localVarResponse = LocationAliasesGetLocationAliasesWithHttpInfo(applicationName, databaseName, offset, limit, serverName, applicationName2, databaseName2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location Alias Get Location Alias
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationAliasList</returns>
        public EssSharp.Client.ApiResponse<LocationAliasList> LocationAliasesGetLocationAliasesWithHttpInfo(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesGetLocationAliases");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesGetLocationAliases");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesGetLocationAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationAliasList>("/applications/{applicationName}/databases/{databaseName}/locationaliases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesGetLocationAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Location Alias Get Location Alias
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationAliasList</returns>
        public async System.Threading.Tasks.Task<LocationAliasList> LocationAliasesGetLocationAliasesAsync(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<LocationAliasList> localVarResponse = await LocationAliasesGetLocationAliasesWithHttpInfoAsync(applicationName, databaseName, offset, limit, serverName, applicationName2, databaseName2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Location Alias Get Location Alias
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of location aliases to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Location alias target server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Location alias target application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Location alias target database name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationAliasList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<LocationAliasList>> LocationAliasesGetLocationAliasesWithHttpInfoAsync(string applicationName, string databaseName, int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesGetLocationAliases");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesGetLocationAliases");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesGetLocationAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationAliasList>("/applications/{applicationName}/databases/{databaseName}/locationaliases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesGetLocationAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Location Alias &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LocationAliasesUpdate(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0)
        {
            LocationAliasesUpdateWithHttpInfo(applicationName, databaseName, aliasName, body);
        }

        /// <summary>
        /// Update Location Alias &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> LocationAliasesUpdateWithHttpInfo(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesUpdate");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesUpdate");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'aliasName' when calling LocationAliasesApi->LocationAliasesUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling LocationAliasesApi->LocationAliasesUpdate");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", EssSharp.Client.ClientUtils.ParameterToString(aliasName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Location Alias &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocationAliasesUpdateAsync(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LocationAliasesUpdateWithHttpInfoAsync(applicationName, databaseName, aliasName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Location Alias &lt;p&gt;Updates location alias with new application and database. Not supported when location alias is defined across Essbase instances.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasName">&lt;p&gt;Location alias name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Location alias details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> LocationAliasesUpdateWithHttpInfoAsync(string applicationName, string databaseName, string aliasName, LocationAliasBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling LocationAliasesApi->LocationAliasesUpdate");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling LocationAliasesApi->LocationAliasesUpdate");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'aliasName' when calling LocationAliasesApi->LocationAliasesUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling LocationAliasesApi->LocationAliasesUpdate");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", EssSharp.Client.ClientUtils.ParameterToString(aliasName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LocationAliasesApi.LocationAliasesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/applications/{applicationName}/databases/{databaseName}/locationaliases/{aliasName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationAliasesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
