/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditTrailApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string AuditTrailGetDataAudit(string application, string database, long? fetchCount = default(long?), int operationIndex = 0);

        /// <summary>
        /// Get Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AuditTrailGetDataAuditWithHttpInfo(string application, string database, long? fetchCount = default(long?), int operationIndex = 0);
        /// <summary>
        /// Delete Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AuditTrailPurge(string application, string database, long? olderthan = default(long?), int operationIndex = 0);

        /// <summary>
        /// Delete Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuditTrailPurgeWithHttpInfo(string application, string database, long? olderthan = default(long?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditTrailApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AuditTrailGetDataAuditAsync(string application, string database, long? fetchCount = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AuditTrailGetDataAuditWithHttpInfoAsync(string application, string database, long? fetchCount = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuditTrailPurgeAsync(string application, string database, long? olderthan = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Audit Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuditTrailPurgeWithHttpInfoAsync(string application, string database, long? olderthan = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditTrailApi : IAuditTrailApiSync, IAuditTrailApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditTrailApi : IAuditTrailApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditTrailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditTrailApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditTrailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditTrailApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditTrailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditTrailApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditTrailApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuditTrailApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Audit Data &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string AuditTrailGetDataAudit(string application, string database, long? fetchCount = default(long?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = AuditTrailGetDataAuditWithHttpInfo(application, database, fetchCount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Audit Data &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> AuditTrailGetDataAuditWithHttpInfo(string application, string database, long? fetchCount = default(long?), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling AuditTrailApi->AuditTrailGetDataAudit");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling AuditTrailApi->AuditTrailGetDataAudit");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "text/csv"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            if (fetchCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fetchCount", fetchCount));
            }

            localVarRequestOptions.Operation = "AuditTrailApi.AuditTrailGetDataAudit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/applications/{application}/databases/{database}/audittrail/data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditTrailGetDataAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Audit Data &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AuditTrailGetDataAuditAsync(string application, string database, long? fetchCount = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await AuditTrailGetDataAuditWithHttpInfoAsync(application, database, fetchCount, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Audit Data &lt;p&gt;Returns audit trail data in CSV string format if &lt;code&gt;Accept&#x3D;&#39;text/csv&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;text/plain&#39;&lt;/code&gt;. If &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt;, returns audit data as a CSV stream to download. If &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt;, returns the audit data list in JSON format.&lt;p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="fetchCount">&lt;p&gt;Number of records to be fetched.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> AuditTrailGetDataAuditWithHttpInfoAsync(string application, string database, long? fetchCount = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling AuditTrailApi->AuditTrailGetDataAudit");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling AuditTrailApi->AuditTrailGetDataAudit");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "text/csv"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            if (fetchCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fetchCount", fetchCount));
            }

            localVarRequestOptions.Operation = "AuditTrailApi.AuditTrailGetDataAudit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/applications/{application}/databases/{database}/audittrail/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditTrailGetDataAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Audit Data &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AuditTrailPurge(string application, string database, long? olderthan = default(long?), int operationIndex = 0)
        {
            AuditTrailPurgeWithHttpInfo(application, database, olderthan);
        }

        /// <summary>
        /// Delete Audit Data &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> AuditTrailPurgeWithHttpInfo(string application, string database, long? olderthan = default(long?), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling AuditTrailApi->AuditTrailPurge");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling AuditTrailApi->AuditTrailPurge");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            if (olderthan != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "olderthan", olderthan));
            }

            localVarRequestOptions.Operation = "AuditTrailApi.AuditTrailPurge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{application}/databases/{database}/audittrail/data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditTrailPurge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Audit Data &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuditTrailPurgeAsync(string application, string database, long? olderthan = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AuditTrailPurgeWithHttpInfoAsync(application, database, olderthan, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Audit Data &lt;p&gt;Deletes audit trail data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> AuditTrailPurgeWithHttpInfoAsync(string application, string database, long? olderthan = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling AuditTrailApi->AuditTrailPurge");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling AuditTrailApi->AuditTrailPurge");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            if (olderthan != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "olderthan", olderthan));
            }

            localVarRequestOptions.Operation = "AuditTrailApi.AuditTrailPurge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{application}/databases/{database}/audittrail/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditTrailPurge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
