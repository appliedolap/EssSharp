/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILayoutsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LayoutsDeleteLayout(string application, string database, string layout, string user = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LayoutsDeleteLayoutWithHttpInfo(string application, string database, string layout, string user = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        Layout LayoutsEditLayout(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0);

        /// <summary>
        /// Update Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        ApiResponse<Layout> LayoutsEditLayoutWithHttpInfo(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0);
        /// <summary>
        /// Get Layout Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        Layout LayoutsGetLayoutDetails(string application, string database, string layout, string user = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Layout Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        ApiResponse<Layout> LayoutsGetLayoutDetailsWithHttpInfo(string application, string database, string layout, string user = default(string), int operationIndex = 0);
        /// <summary>
        /// List Layouts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layouts</returns>
        Layouts LayoutsGetLayouts(string application, string database, int operationIndex = 0);

        /// <summary>
        /// List Layouts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layouts</returns>
        ApiResponse<Layouts> LayoutsGetLayoutsWithHttpInfo(string application, string database, int operationIndex = 0);
        /// <summary>
        /// Mark Layout as Default
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        Layout LayoutsMarkDefaultLayout(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0);

        /// <summary>
        /// Mark Layout as Default
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        ApiResponse<Layout> LayoutsMarkDefaultLayoutWithHttpInfo(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0);
        /// <summary>
        /// Save Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        Layout LayoutsSaveLayout(string application, string database, Layout body = default(Layout), int operationIndex = 0);

        /// <summary>
        /// Save Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        ApiResponse<Layout> LayoutsSaveLayoutWithHttpInfo(string application, string database, Layout body = default(Layout), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILayoutsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LayoutsDeleteLayoutAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LayoutsDeleteLayoutWithHttpInfoAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        System.Threading.Tasks.Task<Layout> LayoutsEditLayoutAsync(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layout>> LayoutsEditLayoutWithHttpInfoAsync(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Layout Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        System.Threading.Tasks.Task<Layout> LayoutsGetLayoutDetailsAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Layout Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layout>> LayoutsGetLayoutDetailsWithHttpInfoAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Layouts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layouts</returns>
        System.Threading.Tasks.Task<Layouts> LayoutsGetLayoutsAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Layouts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layouts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layouts>> LayoutsGetLayoutsWithHttpInfoAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark Layout as Default
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        System.Threading.Tasks.Task<Layout> LayoutsMarkDefaultLayoutAsync(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark Layout as Default
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layout>> LayoutsMarkDefaultLayoutWithHttpInfoAsync(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        System.Threading.Tasks.Task<Layout> LayoutsSaveLayoutAsync(string application, string database, Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layout>> LayoutsSaveLayoutWithHttpInfoAsync(string application, string database, Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILayoutsApi : ILayoutsApiSync, ILayoutsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LayoutsApi : ILayoutsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LayoutsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LayoutsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LayoutsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LayoutsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Layout &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LayoutsDeleteLayout(string application, string database, string layout, string user = default(string), int operationIndex = 0)
        {
            LayoutsDeleteLayoutWithHttpInfo(application, database, layout, user);
        }

        /// <summary>
        /// Delete Layout &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> LayoutsDeleteLayoutWithHttpInfo(string application, string database, string layout, string user = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsDeleteLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsDeleteLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsDeleteLayout");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsDeleteLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{application}/databases/{database}/layouts/{layout}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsDeleteLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Layout &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LayoutsDeleteLayoutAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LayoutsDeleteLayoutWithHttpInfoAsync(application, database, layout, user, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Layout &lt;p&gt;Deletes the layout in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> LayoutsDeleteLayoutWithHttpInfoAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsDeleteLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsDeleteLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsDeleteLayout");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsDeleteLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{application}/databases/{database}/layouts/{layout}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsDeleteLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Layout &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        public Layout LayoutsEditLayout(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = LayoutsEditLayoutWithHttpInfo(application, database, layout, user, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Layout &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        public EssSharp.Client.ApiResponse<Layout> LayoutsEditLayoutWithHttpInfo(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsEditLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsEditLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsEditLayout");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsEditLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Layout>("/applications/{application}/databases/{database}/layouts/{layout}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsEditLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Layout &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        public async System.Threading.Tasks.Task<Layout> LayoutsEditLayoutAsync(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = await LayoutsEditLayoutWithHttpInfoAsync(application, database, layout, user, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Layout &lt;p&gt;Updates the layout with the provided details in the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="body">&lt;p&gt;Layout details to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Layout>> LayoutsEditLayoutWithHttpInfoAsync(string application, string database, string layout, string user = default(string), Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsEditLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsEditLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsEditLayout");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsEditLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Layout>("/applications/{application}/databases/{database}/layouts/{layout}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsEditLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Layout Details &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        public Layout LayoutsGetLayoutDetails(string application, string database, string layout, string user = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = LayoutsGetLayoutDetailsWithHttpInfo(application, database, layout, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Layout Details &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        public EssSharp.Client.ApiResponse<Layout> LayoutsGetLayoutDetailsWithHttpInfo(string application, string database, string layout, string user = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsGetLayoutDetails");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsGetLayoutDetails");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsGetLayoutDetails");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsGetLayoutDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Layout>("/applications/{application}/databases/{database}/layouts/{layout}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsGetLayoutDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Layout Details &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        public async System.Threading.Tasks.Task<Layout> LayoutsGetLayoutDetailsAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = await LayoutsGetLayoutDetailsWithHttpInfoAsync(application, database, layout, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Layout Details &lt;p&gt;Gets the details for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;User name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Layout>> LayoutsGetLayoutDetailsWithHttpInfoAsync(string application, string database, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsGetLayoutDetails");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsGetLayoutDetails");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsGetLayoutDetails");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsGetLayoutDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Layout>("/applications/{application}/databases/{database}/layouts/{layout}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsGetLayoutDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Layouts &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layouts</returns>
        public Layouts LayoutsGetLayouts(string application, string database, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Layouts> localVarResponse = LayoutsGetLayoutsWithHttpInfo(application, database);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Layouts &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layouts</returns>
        public EssSharp.Client.ApiResponse<Layouts> LayoutsGetLayoutsWithHttpInfo(string application, string database, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsGetLayouts");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsGetLayouts");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsGetLayouts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Layouts>("/applications/{application}/databases/{database}/layouts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsGetLayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Layouts &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layouts</returns>
        public async System.Threading.Tasks.Task<Layouts> LayoutsGetLayoutsAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Layouts> localVarResponse = await LayoutsGetLayoutsWithHttpInfoAsync(application, database, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Layouts &lt;p&gt;Lists the available saved grid layouts. If you are a service administrator, all saved layouts are listed, including those created by other users.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layouts)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Layouts>> LayoutsGetLayoutsWithHttpInfoAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsGetLayouts");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsGetLayouts");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsGetLayouts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Layouts>("/applications/{application}/databases/{database}/layouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsGetLayouts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark Layout as Default &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        public Layout LayoutsMarkDefaultLayout(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = LayoutsMarkDefaultLayoutWithHttpInfo(application, database, layout, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark Layout as Default &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        public EssSharp.Client.ApiResponse<Layout> LayoutsMarkDefaultLayoutWithHttpInfo(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsMarkDefaultLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsMarkDefaultLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsMarkDefaultLayout");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsMarkDefaultLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Layout>("/applications/{application}/databases/{database}/layouts/{layout}/actions/markDefault", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsMarkDefaultLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark Layout as Default &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        public async System.Threading.Tasks.Task<Layout> LayoutsMarkDefaultLayoutAsync(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = await LayoutsMarkDefaultLayoutWithHttpInfoAsync(application, database, layout, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark Layout as Default &lt;p&gt;Marks a saved grid layout as the default grid view for this user or this cube. Requires Database Access permission to set the user default layout, and Database Manager permission to set the cube default layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Saved grid layout name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User default or database default details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Layout>> LayoutsMarkDefaultLayoutWithHttpInfoAsync(string application, string database, string layout, DefaultLayoutBean body = default(DefaultLayoutBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsMarkDefaultLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsMarkDefaultLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling LayoutsApi->LayoutsMarkDefaultLayout");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsMarkDefaultLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Layout>("/applications/{application}/databases/{database}/layouts/{layout}/actions/markDefault", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsMarkDefaultLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Layout &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Layout</returns>
        public Layout LayoutsSaveLayout(string application, string database, Layout body = default(Layout), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = LayoutsSaveLayoutWithHttpInfo(application, database, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Layout &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Layout</returns>
        public EssSharp.Client.ApiResponse<Layout> LayoutsSaveLayoutWithHttpInfo(string application, string database, Layout body = default(Layout), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsSaveLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsSaveLayout");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsSaveLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Layout>("/applications/{application}/databases/{database}/layouts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsSaveLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save Layout &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Layout</returns>
        public async System.Threading.Tasks.Task<Layout> LayoutsSaveLayoutAsync(string application, string database, Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Layout> localVarResponse = await LayoutsSaveLayoutWithHttpInfoAsync(application, database, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save Layout &lt;p&gt;Saves a grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid to be saved as a layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Layout)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Layout>> LayoutsSaveLayoutWithHttpInfoAsync(string application, string database, Layout body = default(Layout), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling LayoutsApi->LayoutsSaveLayout");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling LayoutsApi->LayoutsSaveLayout");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LayoutsApi.LayoutsSaveLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Layout>("/applications/{application}/databases/{database}/layouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LayoutsSaveLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
