/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copy Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsCopyApplication(CopyRenameBean body, int operationIndex = 0);

        /// <summary>
        /// Copy Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsCopyApplicationWithHttpInfo(CopyRenameBean body, int operationIndex = 0);
        /// <summary>
        /// Copy Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsCopyDatabase(string applicationName, CubeCopy body, int operationIndex = 0);

        /// <summary>
        /// Copy Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsCopyDatabaseWithHttpInfo(string applicationName, CubeCopy body, int operationIndex = 0);
        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsCreateApplications(CreateApplication body, int operationIndex = 0);

        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsCreateApplicationsWithHttpInfo(CreateApplication body, int operationIndex = 0);
        /// <summary>
        /// Create Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsCreateShadowApplication(ShadowCopyBean body, int operationIndex = 0);

        /// <summary>
        /// Create Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsCreateShadowApplicationWithHttpInfo(ShadowCopyBean body, int operationIndex = 0);
        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsDeleteApplication(string applicationName, int operationIndex = 0);

        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsDeleteApplicationWithHttpInfo(string applicationName, int operationIndex = 0);
        /// <summary>
        /// Delete Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsDeleteDatabase(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Delete Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsDeleteDatabaseWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Delete Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsDropShadowApplication(string shadowAppName, int operationIndex = 0);

        /// <summary>
        /// Delete Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsDropShadowApplicationWithHttpInfo(string shadowAppName, int operationIndex = 0);
        /// <summary>
        /// Execute Report Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsExecuteReportScript(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0);

        /// <summary>
        /// Execute Report Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsExecuteReportScriptWithHttpInfo(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0);
        /// <summary>
        /// List Active Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ApplicationsGetActiveAlias(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// List Active Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApplicationsGetActiveAliasWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// List Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StringCollectionResponse</returns>
        StringCollectionResponse ApplicationsGetAliases(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// List Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StringCollectionResponse</returns>
        ApiResponse<StringCollectionResponse> ApplicationsGetAliasesWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Application</returns>
        Application ApplicationsGetApplication(string applicationName, bool? role = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationsGetApplicationWithHttpInfo(string applicationName, bool? role = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List Application Names
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApplicationsGetApplicationNames(string appVisiblity, int operationIndex = 0);

        /// <summary>
        /// List Application Names
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApplicationsGetApplicationNamesWithHttpInfo(string appVisiblity, int operationIndex = 0);
        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsGetApplicationProvisionReport(string applicationName, int operationIndex = 0);

        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsGetApplicationProvisionReportWithHttpInfo(string applicationName, int operationIndex = 0);
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationList</returns>
        ApplicationList ApplicationsGetApplications(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0);

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationList</returns>
        ApiResponse<ApplicationList> ApplicationsGetApplicationsWithHttpInfo(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Application Tree View
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ApplicationsGetApplicationsTree(int operationIndex = 0);

        /// <summary>
        /// Get Application Tree View
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApplicationsGetApplicationsTreeWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Cube</returns>
        Cube ApplicationsGetCube(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Cube</returns>
        ApiResponse<Cube> ApplicationsGetCubeWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// List Databases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CubeList</returns>
        CubeList ApplicationsGetCubes(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0);

        /// <summary>
        /// List Databases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CubeList</returns>
        ApiResponse<CubeList> ApplicationsGetCubesWithHttpInfo(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0);
        /// <summary>
        /// Start or Stop Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsPerformDbOperation(string applicationName, string databaseName, string action, int operationIndex = 0);

        /// <summary>
        /// Start or Stop Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsPerformDbOperationWithHttpInfo(string applicationName, string databaseName, string action, int operationIndex = 0);
        /// <summary>
        /// Start or Stop Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsPerformOperation(string applicationName, string action, int operationIndex = 0);

        /// <summary>
        /// Start or Stop Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsPerformOperationWithHttpInfo(string applicationName, string action, int operationIndex = 0);
        /// <summary>
        /// Promote Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsPromoteShadowApplication(ShadowPromoteBean body, int operationIndex = 0);

        /// <summary>
        /// Promote Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsPromoteShadowApplicationWithHttpInfo(ShadowPromoteBean body, int operationIndex = 0);
        /// <summary>
        /// Rename Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsRenameApplication(CopyRenameBean body, int operationIndex = 0);

        /// <summary>
        /// Rename Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsRenameApplicationWithHttpInfo(CopyRenameBean body, int operationIndex = 0);
        /// <summary>
        /// Rename Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationsRenameDatabase(string applicationName, CopyRenameBean body, int operationIndex = 0);

        /// <summary>
        /// Rename Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationsRenameDatabaseWithHttpInfo(string applicationName, CopyRenameBean body, int operationIndex = 0);
        /// <summary>
        /// Get Formula Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DatabasesFormulaFunctions(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Formula Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DatabasesFormulaFunctionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Calculation Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DatabasesGetCalculationFunctions(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Calculation Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DatabasesGetCalculationFunctionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DatabasesGetCurrencySettings(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DatabasesGetCurrencySettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get MDX Functions
        /// </summary>
        /// <remarks>
        /// Returns list of MDX functions
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DatabasesGetMdxFunctions(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get MDX Functions
        /// </summary>
        /// <remarks>
        /// Returns list of MDX functions
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DatabasesGetMdxFunctionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Set Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DatabasesSetCurrencySettings(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0);

        /// <summary>
        /// Set Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DatabasesSetCurrencySettingsWithHttpInfo(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0);
        /// <summary>
        /// Set Active Alias
        /// </summary>
        /// <remarks>
        /// Sets the active alias table associated with the specified application and database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StringCollectionResponse</returns>
        StringCollectionResponse SetActiveAlias(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0);

        /// <summary>
        /// Set Active Alias
        /// </summary>
        /// <remarks>
        /// Sets the active alias table associated with the specified application and database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StringCollectionResponse</returns>
        ApiResponse<StringCollectionResponse> SetActiveAliasWithHttpInfo(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Copy Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsCopyApplicationAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsCopyApplicationWithHttpInfoAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsCopyDatabaseAsync(string applicationName, CubeCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsCopyDatabaseWithHttpInfoAsync(string applicationName, CubeCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsCreateApplicationsAsync(CreateApplication body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsCreateApplicationsWithHttpInfoAsync(CreateApplication body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsCreateShadowApplicationAsync(ShadowCopyBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsCreateShadowApplicationWithHttpInfoAsync(ShadowCopyBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsDeleteApplicationAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsDeleteApplicationWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsDeleteDatabaseAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsDeleteDatabaseWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsDropShadowApplicationAsync(string shadowAppName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsDropShadowApplicationWithHttpInfoAsync(string shadowAppName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute Report Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsExecuteReportScriptAsync(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute Report Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsExecuteReportScriptWithHttpInfoAsync(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Active Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApplicationsGetActiveAliasAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Active Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApplicationsGetActiveAliasWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StringCollectionResponse</returns>
        System.Threading.Tasks.Task<StringCollectionResponse> ApplicationsGetAliasesAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Aliases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StringCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringCollectionResponse>> ApplicationsGetAliasesWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationsGetApplicationAsync(string applicationName, bool? role = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsGetApplicationWithHttpInfoAsync(string applicationName, bool? role = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Application Names
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApplicationsGetApplicationNamesAsync(string appVisiblity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Application Names
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsGetApplicationNamesWithHttpInfoAsync(string appVisiblity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsGetApplicationProvisionReportAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsGetApplicationProvisionReportWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationList</returns>
        System.Threading.Tasks.Task<ApplicationList> ApplicationsGetApplicationsAsync(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationList>> ApplicationsGetApplicationsWithHttpInfoAsync(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Tree View
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApplicationsGetApplicationsTreeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Tree View
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApplicationsGetApplicationsTreeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cube</returns>
        System.Threading.Tasks.Task<Cube> ApplicationsGetCubeAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cube)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cube>> ApplicationsGetCubeWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Databases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CubeList</returns>
        System.Threading.Tasks.Task<CubeList> ApplicationsGetCubesAsync(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Databases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CubeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CubeList>> ApplicationsGetCubesWithHttpInfoAsync(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start or Stop Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsPerformDbOperationAsync(string applicationName, string databaseName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start or Stop Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsPerformDbOperationWithHttpInfoAsync(string applicationName, string databaseName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start or Stop Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsPerformOperationAsync(string applicationName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start or Stop Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsPerformOperationWithHttpInfoAsync(string applicationName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Promote Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsPromoteShadowApplicationAsync(ShadowPromoteBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Promote Shadow Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsPromoteShadowApplicationWithHttpInfoAsync(ShadowPromoteBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rename Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsRenameApplicationAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rename Application
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsRenameApplicationWithHttpInfoAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rename Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationsRenameDatabaseAsync(string applicationName, CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rename Database
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationsRenameDatabaseWithHttpInfoAsync(string applicationName, CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Formula Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DatabasesFormulaFunctionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Formula Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DatabasesFormulaFunctionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Calculation Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DatabasesGetCalculationFunctionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Calculation Functions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DatabasesGetCalculationFunctionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DatabasesGetCurrencySettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DatabasesGetCurrencySettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get MDX Functions
        /// </summary>
        /// <remarks>
        /// Returns list of MDX functions
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DatabasesGetMdxFunctionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get MDX Functions
        /// </summary>
        /// <remarks>
        /// Returns list of MDX functions
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DatabasesGetMdxFunctionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DatabasesSetCurrencySettingsAsync(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Currency Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DatabasesSetCurrencySettingsWithHttpInfoAsync(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Active Alias
        /// </summary>
        /// <remarks>
        /// Sets the active alias table associated with the specified application and database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StringCollectionResponse</returns>
        System.Threading.Tasks.Task<StringCollectionResponse> SetActiveAliasAsync(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Active Alias
        /// </summary>
        /// <remarks>
        /// Sets the active alias table associated with the specified application and database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StringCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringCollectionResponse>> SetActiveAliasWithHttpInfoAsync(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApi : IApplicationsApiSync, IApplicationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationsApi : IApplicationsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Copy Application &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsCopyApplication(CopyRenameBean body, int operationIndex = 0)
        {
            ApplicationsCopyApplicationWithHttpInfo(body);
        }

        /// <summary>
        /// Copy Application &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsCopyApplicationWithHttpInfo(CopyRenameBean body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCopyApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCopyApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/actions/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCopyApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Application &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsCopyApplicationAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsCopyApplicationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Copy Application &lt;p&gt;Copies an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsCopyApplicationWithHttpInfoAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCopyApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCopyApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/actions/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCopyApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Database &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsCopyDatabase(string applicationName, CubeCopy body, int operationIndex = 0)
        {
            ApplicationsCopyDatabaseWithHttpInfo(applicationName, body);
        }

        /// <summary>
        /// Copy Database &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsCopyDatabaseWithHttpInfo(string applicationName, CubeCopy body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsCopyDatabase");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCopyDatabase");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCopyDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/actions/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCopyDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Database &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsCopyDatabaseAsync(string applicationName, CubeCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsCopyDatabaseWithHttpInfoAsync(applicationName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Copy Database &lt;p&gt;Copies a database. You must provide the source and destination application and database names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsCopyDatabaseWithHttpInfoAsync(string applicationName, CubeCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsCopyDatabase");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCopyDatabase");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCopyDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/actions/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCopyDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Application &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsCreateApplications(CreateApplication body, int operationIndex = 0)
        {
            ApplicationsCreateApplicationsWithHttpInfo(body);
        }

        /// <summary>
        /// Create Application &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsCreateApplicationsWithHttpInfo(CreateApplication body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCreateApplications");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCreateApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCreateApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Application &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsCreateApplicationsAsync(CreateApplication body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsCreateApplicationsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Application &lt;p&gt;Creates an application with the specified details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Application details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsCreateApplicationsWithHttpInfoAsync(CreateApplication body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCreateApplications");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCreateApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCreateApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shadow Application &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsCreateShadowApplication(ShadowCopyBean body, int operationIndex = 0)
        {
            ApplicationsCreateShadowApplicationWithHttpInfo(body);
        }

        /// <summary>
        /// Create Shadow Application &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsCreateShadowApplicationWithHttpInfo(ShadowCopyBean body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCreateShadowApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCreateShadowApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/actions/shadowCopy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCreateShadowApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shadow Application &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsCreateShadowApplicationAsync(ShadowCopyBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsCreateShadowApplicationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Shadow Application &lt;p&gt;Puts the specified primary application in read-only mode and creates a shadow application (a complete copy) out of the primary application.&lt;/p&gt; &lt;p&gt;A shadow application enables you to perform cube modifications and outline restructure on the shadow application, while the primary application serves read-only operations such as queries.&lt;/p&gt; &lt;p&gt;Permission required: power user.&lt;/p&gt; &lt;p&gt;Shadow applications are useful because an outline restructure can take a very long time, depending on the size of the application.&lt;/p&gt; &lt;p&gt;Instead of reporting users being blocked by the downtime due to restructure, a shadow solution helps them continue their queries against the primary application, while the restructure is occurring on the shadow application.&lt;/p&gt; &lt;p&gt;Note that a shadow application can be made as hidden copy of the primary application.&lt;/p&gt; &lt;p&gt;This means if you invoke &lt;a href&#x3D;&#39;./op-applications-get.html&#39;&gt;List Applications&lt;/a&gt;, you will not see the shadow application in that list.&lt;/p&gt; &lt;p&gt;The parameter &lt;i&gt;waitForOngoingUpdatesInSecs&lt;/i&gt; allows you to control how long the copying process can wait, if there are any ongoing write-operations on the cubes(s) of this application at the time you are attempting to make a shadow copy.&lt;/p&gt; &lt;p&gt;For example, if there is a data load in progress, the cloning process fails.&lt;/p&gt; &lt;p&gt;If you specified waitForOngoingUpdatesInSecs as 60, Essbase waits up to one minute for the data load to complete before initiating a cloning process.&lt;/p&gt; &lt;p&gt;If the data load doesn&#39;t complete within this specified wait-interval, Essbase does not create the copy, the cloning process fails with an error, and the data load continues.&lt;/p&gt;&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-name-appvisiblity-get.html&#39;&gt;List Application Names&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowpromote-post.html&#39;&gt;Promote Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;&#39;./op-applications-actions-shadowdelete-shadowappname-delete.html&#39;&gt;Delete Shadow Application&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;primaryAppName: Source application name which you intend to clone.&lt;/p&gt; &lt;p&gt;shadowAppName : Unique Destination or secondary application name which will be a copy of the source.&lt;/p&gt; &lt;p&gt;hideShadow: Specify &lt;b&gt;true&lt;/b&gt; to hide the application; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;waitForOngoingUpdatesInSecs: Waiting period (in seconds) for any active write-operations to complete.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Copy&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsCreateShadowApplicationWithHttpInfoAsync(ShadowCopyBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsCreateShadowApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsCreateShadowApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/actions/shadowCopy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsCreateShadowApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsDeleteApplication(string applicationName, int operationIndex = 0)
        {
            ApplicationsDeleteApplicationWithHttpInfo(applicationName);
        }

        /// <summary>
        /// Delete Application &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsDeleteApplicationWithHttpInfo(string applicationName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsDeleteApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsDeleteApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDeleteApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsDeleteApplicationAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsDeleteApplicationWithHttpInfoAsync(applicationName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Application &lt;p&gt;Deletes specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsDeleteApplicationWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsDeleteApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsDeleteApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDeleteApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Database &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsDeleteDatabase(string applicationName, string databaseName, int operationIndex = 0)
        {
            ApplicationsDeleteDatabaseWithHttpInfo(applicationName, databaseName);
        }

        /// <summary>
        /// Delete Database &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsDeleteDatabaseWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsDeleteDatabase");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsDeleteDatabase");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsDeleteDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/databases/{databaseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDeleteDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Database &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsDeleteDatabaseAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsDeleteDatabaseWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Database &lt;p&gt;Deletes specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsDeleteDatabaseWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsDeleteDatabase");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsDeleteDatabase");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsDeleteDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/databases/{databaseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDeleteDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Shadow Application &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsDropShadowApplication(string shadowAppName, int operationIndex = 0)
        {
            ApplicationsDropShadowApplicationWithHttpInfo(shadowAppName);
        }

        /// <summary>
        /// Delete Shadow Application &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsDropShadowApplicationWithHttpInfo(string shadowAppName, int operationIndex = 0)
        {
            // verify the required parameter 'shadowAppName' is set
            if (shadowAppName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'shadowAppName' when calling ApplicationsApi->ApplicationsDropShadowApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shadowAppName", EssSharp.Client.ClientUtils.ParameterToString(shadowAppName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsDropShadowApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/actions/shadowDelete/{shadowAppName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDropShadowApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Shadow Application &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsDropShadowApplicationAsync(string shadowAppName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsDropShadowApplicationWithHttpInfoAsync(shadowAppName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Shadow Application &lt;p&gt;Forcefully deletes the specified shadow application.&lt;/p&gt; &lt;p&gt;Although shadow applications can also be deleted using the regular &lt;a href&#x3D;&#39;./op-applications-applicationname-delete.html&#39;&gt;Delete Application&lt;/a&gt;, if the shadow application is corrupted or has any locks, then it the regular delete application fails.&lt;/p&gt; &lt;p&gt;Therefore, this API guarantees a forceful deletion of the shadow application.&lt;/p&gt; &lt;p&gt;This API is similar to the MaxL statement &lt;b&gt;drop application &lt;i&gt;APP-NAME&lt;/i&gt; cascade force&lt;/b&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shadowAppName">&lt;p&gt;shadowAppName: Name of the shadow application to remove.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsDropShadowApplicationWithHttpInfoAsync(string shadowAppName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shadowAppName' is set
            if (shadowAppName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'shadowAppName' when calling ApplicationsApi->ApplicationsDropShadowApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shadowAppName", EssSharp.Client.ClientUtils.ParameterToString(shadowAppName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsDropShadowApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/actions/shadowDelete/{shadowAppName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDropShadowApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Report Script &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsExecuteReportScript(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0)
        {
            ApplicationsExecuteReportScriptWithHttpInfo(applicationName, databaseName, filename, lockForUpdate);
        }

        /// <summary>
        /// Execute Report Script &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsExecuteReportScriptWithHttpInfo(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsExecuteReportScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsExecuteReportScript");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'filename' when calling ApplicationsApi->ApplicationsExecuteReportScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            if (lockForUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "lockForUpdate", lockForUpdate));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsExecuteReportScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/applications/{applicationName}/databases/{databaseName}/executeReport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsExecuteReportScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Report Script &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsExecuteReportScriptAsync(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsExecuteReportScriptWithHttpInfoAsync(applicationName, databaseName, filename, lockForUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Execute Report Script &lt;p&gt;Returns output generated by  executing a report script specification file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="filename">&lt;p&gt;Report script file name.&lt;/p&gt;</param>
        /// <param name="lockForUpdate">&lt;p&gt;All blocks which are accessed by the report specification are locked.&lt;/p&gt; (optional, default to &quot;false&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsExecuteReportScriptWithHttpInfoAsync(string applicationName, string databaseName, string filename, string lockForUpdate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsExecuteReportScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsExecuteReportScript");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'filename' when calling ApplicationsApi->ApplicationsExecuteReportScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            if (lockForUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "lockForUpdate", lockForUpdate));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsExecuteReportScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/applications/{applicationName}/databases/{databaseName}/executeReport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsExecuteReportScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Active Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ApplicationsGetActiveAlias(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = ApplicationsGetActiveAliasWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Active Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> ApplicationsGetActiveAliasWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetActiveAlias");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsGetActiveAlias");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetActiveAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/applications/{applicationName}/databases/{databaseName}/aliases/getActiveAlias", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetActiveAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Active Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApplicationsGetActiveAliasAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await ApplicationsGetActiveAliasWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Active Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> ApplicationsGetActiveAliasWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetActiveAlias");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsGetActiveAlias");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetActiveAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/applications/{applicationName}/databases/{databaseName}/aliases/getActiveAlias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetActiveAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StringCollectionResponse</returns>
        public StringCollectionResponse ApplicationsGetAliases(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StringCollectionResponse> localVarResponse = ApplicationsGetAliasesWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StringCollectionResponse</returns>
        public EssSharp.Client.ApiResponse<StringCollectionResponse> ApplicationsGetAliasesWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetAliases");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsGetAliases");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StringCollectionResponse>("/applications/{applicationName}/databases/{databaseName}/aliases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StringCollectionResponse</returns>
        public async System.Threading.Tasks.Task<StringCollectionResponse> ApplicationsGetAliasesAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StringCollectionResponse> localVarResponse = await ApplicationsGetAliasesWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Aliases &lt;p&gt;Returns alias tables associated with the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StringCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StringCollectionResponse>> ApplicationsGetAliasesWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetAliases");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsGetAliases");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StringCollectionResponse>("/applications/{applicationName}/databases/{databaseName}/aliases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Application</returns>
        public Application ApplicationsGetApplication(string applicationName, bool? role = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Application> localVarResponse = ApplicationsGetApplicationWithHttpInfo(applicationName, role);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Application</returns>
        public EssSharp.Client.ApiResponse<Application> ApplicationsGetApplicationWithHttpInfo(string applicationName, bool? role = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Application>("/applications/{applicationName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationsGetApplicationAsync(string applicationName, bool? role = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Application> localVarResponse = await ApplicationsGetApplicationWithHttpInfoAsync(applicationName, role, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application &lt;p&gt;Returns details of application with specified name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="role">&lt;p&gt;Role.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Application>> ApplicationsGetApplicationWithHttpInfoAsync(string applicationName, bool? role = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Application>("/applications/{applicationName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application Names &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApplicationsGetApplicationNames(string appVisiblity, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Object> localVarResponse = ApplicationsGetApplicationNamesWithHttpInfo(appVisiblity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Application Names &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsGetApplicationNamesWithHttpInfo(string appVisiblity, int operationIndex = 0)
        {
            // verify the required parameter 'appVisiblity' is set
            if (appVisiblity == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'appVisiblity' when calling ApplicationsApi->ApplicationsGetApplicationNames");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appVisiblity", EssSharp.Client.ClientUtils.ParameterToString(appVisiblity)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplicationNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/applications/actions/name/{appVisiblity}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplicationNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Application Names &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApplicationsGetApplicationNamesAsync(string appVisiblity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Object> localVarResponse = await ApplicationsGetApplicationNamesWithHttpInfoAsync(appVisiblity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Application Names &lt;p&gt;Returns the list of application names, based on the type of visibility requested. For example, you can fetch the list of hidden (shadow) applications only, or you can fetch the visible applications list only, or both sets of applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appVisiblity">&lt;p&gt;appVisiblity : Visibility level of application names. Valid options: ALL, HIDDEN, REGULAR&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsGetApplicationNamesWithHttpInfoAsync(string appVisiblity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appVisiblity' is set
            if (appVisiblity == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'appVisiblity' when calling ApplicationsApi->ApplicationsGetApplicationNames");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appVisiblity", EssSharp.Client.ClientUtils.ParameterToString(appVisiblity)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplicationNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/applications/actions/name/{appVisiblity}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplicationNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsGetApplicationProvisionReport(string applicationName, int operationIndex = 0)
        {
            ApplicationsGetApplicationProvisionReportWithHttpInfo(applicationName);
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsGetApplicationProvisionReportWithHttpInfo(string applicationName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetApplicationProvisionReport");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplicationProvisionReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/applications/{applicationName}/provisionReport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplicationProvisionReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsGetApplicationProvisionReportAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsGetApplicationProvisionReportWithHttpInfoAsync(applicationName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report of specified application for all the users and groups having at least one application role (directly or inherited through groups). To invoke this API, logged in user should have at least &lt;b&gt;Database Manager&lt;/b&gt; role for the specified application. Application roles are included only when logged in user has &lt;b&gt;Application Manager&lt;/b&gt; role for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsGetApplicationProvisionReportWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetApplicationProvisionReport");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplicationProvisionReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/applications/{applicationName}/provisionReport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplicationProvisionReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationList</returns>
        public ApplicationList ApplicationsGetApplications(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationList> localVarResponse = ApplicationsGetApplicationsWithHttpInfo(filter, offset, limit, connectionName, applicationNameForConnection, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationList</returns>
        public EssSharp.Client.ApiResponse<ApplicationList> ApplicationsGetApplicationsWithHttpInfo(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationList>("/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationList</returns>
        public async System.Threading.Tasks.Task<ApplicationList> ApplicationsGetApplicationsAsync(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationList> localVarResponse = await ApplicationsGetApplicationsWithHttpInfoAsync(filter, offset, limit, connectionName, applicationNameForConnection, fields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications &lt;p&gt;Returns the list of Essbase applications. Connection name and application name for connection are optional parameters.&lt;/p&gt; &lt;p&gt;If you provide only a connection name with no application name, this API fetches all applications using that named connection.&lt;/p&gt; &lt;p&gt;If you provide a connection name and application name, this API fetches the specified applications using the specified connection.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;fields&lt;/code&gt; parameter to return only required fields.&lt;/p&gt; &lt;p&gt;Limitation: If the application status is required in response, the limit must be less than or equal to 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;*&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of applications to omit from the start of the result set. Default value is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of applications to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of fields to be returned in response fields. If omitted, all fields are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationList>> ApplicationsGetApplicationsWithHttpInfoAsync(string filter = default(string), int? offset = default(int?), int? limit = default(int?), string connectionName = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationList>("/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Tree View &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ApplicationsGetApplicationsTree(int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = ApplicationsGetApplicationsTreeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Tree View &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> ApplicationsGetApplicationsTreeWithHttpInfo(int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplicationsTree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/applications/actions/tree", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplicationsTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Tree View &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApplicationsGetApplicationsTreeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await ApplicationsGetApplicationsTreeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Tree View &lt;p&gt;Gets the list of applications and databases as a tree view.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> ApplicationsGetApplicationsTreeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetApplicationsTree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/applications/actions/tree", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetApplicationsTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Database &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Cube</returns>
        public Cube ApplicationsGetCube(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Cube> localVarResponse = ApplicationsGetCubeWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Database &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Cube</returns>
        public EssSharp.Client.ApiResponse<Cube> ApplicationsGetCubeWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetCube");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsGetCube");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetCube";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Cube>("/applications/{applicationName}/databases/{databaseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetCube", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Database &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cube</returns>
        public async System.Threading.Tasks.Task<Cube> ApplicationsGetCubeAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Cube> localVarResponse = await ApplicationsGetCubeWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Database &lt;p&gt;Returns details of database with specified database name and application name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cube)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Cube>> ApplicationsGetCubeWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetCube");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsGetCube");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetCube";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Cube>("/applications/{applicationName}/databases/{databaseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetCube", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Databases &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CubeList</returns>
        public CubeList ApplicationsGetCubes(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CubeList> localVarResponse = ApplicationsGetCubesWithHttpInfo(applicationName, connectionName, applicationNameForConnection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Databases &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CubeList</returns>
        public EssSharp.Client.ApiResponse<CubeList> ApplicationsGetCubesWithHttpInfo(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetCubes");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetCubes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CubeList>("/applications/{applicationName}/databases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetCubes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Databases &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CubeList</returns>
        public async System.Threading.Tasks.Task<CubeList> ApplicationsGetCubesAsync(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CubeList> localVarResponse = await ApplicationsGetCubesWithHttpInfoAsync(applicationName, connectionName, applicationNameForConnection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Databases &lt;p&gt;Returns list of databases. Providing the connection name for which to list databases is optional. If a connection name is provided, connections created at the specified application is used to fetch the database list.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name from which to list databases.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CubeList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CubeList>> ApplicationsGetCubesWithHttpInfoAsync(string applicationName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsGetCubes");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsGetCubes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CubeList>("/applications/{applicationName}/databases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsGetCubes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start or Stop Database &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsPerformDbOperation(string applicationName, string databaseName, string action, int operationIndex = 0)
        {
            ApplicationsPerformDbOperationWithHttpInfo(applicationName, databaseName, action);
        }

        /// <summary>
        /// Start or Stop Database &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsPerformDbOperationWithHttpInfo(string applicationName, string databaseName, string action, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsPerformDbOperation");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsPerformDbOperation");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'action' when calling ApplicationsApi->ApplicationsPerformDbOperation");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsPerformDbOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/applications/{applicationName}/databases/{databaseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsPerformDbOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start or Stop Database &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsPerformDbOperationAsync(string applicationName, string databaseName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsPerformDbOperationWithHttpInfoAsync(applicationName, databaseName, action, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Start or Stop Database &lt;p&gt;Performs specified action on the application and database. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Action - start or stop.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsPerformDbOperationWithHttpInfoAsync(string applicationName, string databaseName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsPerformDbOperation");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->ApplicationsPerformDbOperation");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'action' when calling ApplicationsApi->ApplicationsPerformDbOperation");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsPerformDbOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/applications/{applicationName}/databases/{databaseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsPerformDbOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start or Stop Application &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsPerformOperation(string applicationName, string action, int operationIndex = 0)
        {
            ApplicationsPerformOperationWithHttpInfo(applicationName, action);
        }

        /// <summary>
        /// Start or Stop Application &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsPerformOperationWithHttpInfo(string applicationName, string action, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsPerformOperation");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'action' when calling ApplicationsApi->ApplicationsPerformOperation");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsPerformOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/applications/{applicationName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsPerformOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start or Stop Application &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsPerformOperationAsync(string applicationName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsPerformOperationWithHttpInfoAsync(applicationName, action, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Start or Stop Application &lt;p&gt;Performs specified action on the application. Valid actions are &lt;b&gt;Start&lt;/b&gt; and &lt;b&gt;Stop&lt;/b&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="action">Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsPerformOperationWithHttpInfoAsync(string applicationName, string action, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsPerformOperation");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'action' when calling ApplicationsApi->ApplicationsPerformOperation");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsPerformOperation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/applications/{applicationName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsPerformOperation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Promote Shadow Application &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsPromoteShadowApplication(ShadowPromoteBean body, int operationIndex = 0)
        {
            ApplicationsPromoteShadowApplicationWithHttpInfo(body);
        }

        /// <summary>
        /// Promote Shadow Application &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsPromoteShadowApplicationWithHttpInfo(ShadowPromoteBean body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsPromoteShadowApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsPromoteShadowApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/actions/shadowPromote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsPromoteShadowApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Promote Shadow Application &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsPromoteShadowApplicationAsync(ShadowPromoteBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsPromoteShadowApplicationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Promote Shadow Application &lt;p&gt;Promotes the shadow application as the base application. Conceptually, the promote operation is equivalent to moving the Essbase application directory from a source to destination location, at the file system level.&lt;/p&gt; &lt;p&gt;Essbase must stop (unload) both applications, if they are running, before promoting. At the time of unloading, if the destination application is serving any ongoing operations, such as queries, Essbase terminates those operations and attempts to unload the application.&lt;/p&gt; &lt;p&gt;If a graceful unload process fails or takes longer than permitted by the input argument &lt;i&gt;timeoutToForceUnloadApp&lt;/i&gt; (unit&#x3D;seconds), Essbase forcefully terminates the application.&lt;/p&gt; &lt;p&gt;Example: if you specify 60 seconds for the timeout, but the termination of ongoing requests and graceful unloading of the application does not complete within one minute, Essbase triggers a forceful termination.  After termination, Essbase promotes the shadow application.&lt;/p&gt; &lt;p&gt;The promote operation is supported on all applications, including aggregate storage, block storage, and Hybrid mode.&lt;/p&gt; &lt;p&gt;Note: when moving an existing application, only the application and cube artifacts (such as metadata and data) are replaced from the source to destination.&lt;/p&gt; &lt;p&gt;During a promotion, all security layer associations on the destination application, such as  users, groups, and security filters, are retained, while that of shadow/source are lost. The same rule applies for partition definitions.&lt;/p&gt; &lt;p&gt;Example: If users X and Y had read-access to App1, and an admin promotes a shadow App2 to replace App1, both X and Y will be able to access App1.&lt;/p&gt; &lt;p&gt;If user Z had access to App2, then after promotion, Z is not be able to access App1.&lt;/p&gt; &lt;p&gt;Promotion from shadowed application to base is honored only if there are no changes to the number of cubes and cube names. In other words, if a cube gets renamed or if there is any addition or deletion of an application after it was shadowed, then promotion of such an application fails with an error, leaving both applications as they were.&lt;/p&gt; &lt;p&gt;Example:  ASOAppNew.cubeNew &lt;i&gt;cannot&lt;/i&gt; be replaced as ASO.cube. ASOAppNew.cube &lt;i&gt;can&lt;/i&gt; be replaced as ASO.cube.&lt;/p&gt; &lt;p&gt;Tips: You need not unload or stop the application prior to calling this promotion API. Essbase loads the application to gather information, and unloads it prior to moving the applications.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;shadowAppName: Name of the hidden shadow application that needs to be promoted to base.&lt;/p&gt; &lt;p&gt;primaryAppName: Name of the primary application.&lt;/p&gt; &lt;p&gt;timeoutToForceUnloadApp: Time interval (in seconds) to force unload in the event of applications performing an ongoing requests even after time interval.&lt;/p&gt; &lt;p&gt;runInBackground: Specify &lt;b&gt;true&lt;/b&gt; to schedule &#39;Shadow Promote&#39; as a Job; otherwise, specify &lt;b&gt;false&lt;/b&gt;.&lt;/p&gt; </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsPromoteShadowApplicationWithHttpInfoAsync(ShadowPromoteBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsPromoteShadowApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsPromoteShadowApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/actions/shadowPromote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsPromoteShadowApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Application &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsRenameApplication(CopyRenameBean body, int operationIndex = 0)
        {
            ApplicationsRenameApplicationWithHttpInfo(body);
        }

        /// <summary>
        /// Rename Application &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsRenameApplicationWithHttpInfo(CopyRenameBean body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsRenameApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsRenameApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/actions/rename", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsRenameApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Application &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsRenameApplicationAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsRenameApplicationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rename Application &lt;p&gt;Renames an application. You must provide the source and destination application names.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Source and destination application information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsRenameApplicationWithHttpInfoAsync(CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsRenameApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsRenameApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/actions/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsRenameApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Database &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationsRenameDatabase(string applicationName, CopyRenameBean body, int operationIndex = 0)
        {
            ApplicationsRenameDatabaseWithHttpInfo(applicationName, body);
        }

        /// <summary>
        /// Rename Database &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationsRenameDatabaseWithHttpInfo(string applicationName, CopyRenameBean body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsRenameDatabase");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsRenameDatabase");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsRenameDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/actions/rename", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsRenameDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Database &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationsRenameDatabaseAsync(string applicationName, CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationsRenameDatabaseWithHttpInfoAsync(applicationName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rename Database &lt;p&gt;Renames a database. You must provide the source application name, and the source and destination database names. Destination application name is not required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Source application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Source and destination database information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationsRenameDatabaseWithHttpInfoAsync(string applicationName, CopyRenameBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->ApplicationsRenameDatabase");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->ApplicationsRenameDatabase");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.ApplicationsRenameDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/actions/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsRenameDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Formula Functions &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DatabasesFormulaFunctions(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = DatabasesFormulaFunctionsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Formula Functions &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> DatabasesFormulaFunctionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesFormulaFunctions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesFormulaFunctions");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesFormulaFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/applications/{applicationName}/databases/{databaseName}/formulaFunctions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesFormulaFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Formula Functions &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DatabasesFormulaFunctionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await DatabasesFormulaFunctionsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Formula Functions &lt;p&gt;Returns a list of functions for defining formulas. For an aggregate storage cube, the list contains MDX functions. For a block storage cube, the list contains Essbase calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> DatabasesFormulaFunctionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesFormulaFunctions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesFormulaFunctions");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesFormulaFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/applications/{applicationName}/databases/{databaseName}/formulaFunctions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesFormulaFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Calculation Functions &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DatabasesGetCalculationFunctions(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = DatabasesGetCalculationFunctionsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Calculation Functions &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> DatabasesGetCalculationFunctionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesGetCalculationFunctions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesGetCalculationFunctions");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesGetCalculationFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/applications/{applicationName}/databases/{databaseName}/calculationFunctions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesGetCalculationFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Calculation Functions &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DatabasesGetCalculationFunctionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await DatabasesGetCalculationFunctionsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Calculation Functions &lt;p&gt;Returns list of common and database-specific calculation functions.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> DatabasesGetCalculationFunctionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesGetCalculationFunctions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesGetCalculationFunctions");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesGetCalculationFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/applications/{applicationName}/databases/{databaseName}/calculationFunctions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesGetCalculationFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Currency Settings &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DatabasesGetCurrencySettings(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = DatabasesGetCurrencySettingsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Currency Settings &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> DatabasesGetCurrencySettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesGetCurrencySettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesGetCurrencySettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesGetCurrencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/applications/{applicationName}/databases/{databaseName}/currencySettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesGetCurrencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Currency Settings &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DatabasesGetCurrencySettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await DatabasesGetCurrencySettingsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Currency Settings &lt;p&gt;Returns the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> DatabasesGetCurrencySettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesGetCurrencySettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesGetCurrencySettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesGetCurrencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/applications/{applicationName}/databases/{databaseName}/currencySettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesGetCurrencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MDX Functions Returns list of MDX functions
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DatabasesGetMdxFunctions(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = DatabasesGetMdxFunctionsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MDX Functions Returns list of MDX functions
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> DatabasesGetMdxFunctionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesGetMdxFunctions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesGetMdxFunctions");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesGetMdxFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/applications/{applicationName}/databases/{databaseName}/mdxFunctions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesGetMdxFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MDX Functions Returns list of MDX functions
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DatabasesGetMdxFunctionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await DatabasesGetMdxFunctionsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MDX Functions Returns list of MDX functions
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> DatabasesGetMdxFunctionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesGetMdxFunctions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesGetMdxFunctions");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesGetMdxFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/applications/{applicationName}/databases/{databaseName}/mdxFunctions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesGetMdxFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Currency Settings &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DatabasesSetCurrencySettings(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = DatabasesSetCurrencySettingsWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Currency Settings &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> DatabasesSetCurrencySettingsWithHttpInfo(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesSetCurrencySettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesSetCurrencySettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->DatabasesSetCurrencySettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesSetCurrencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/applications/{applicationName}/databases/{databaseName}/currencySettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesSetCurrencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Currency Settings &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DatabasesSetCurrencySettingsAsync(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await DatabasesSetCurrencySettingsWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Currency Settings &lt;p&gt;Updates the currency settings for the database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Currency settings.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> DatabasesSetCurrencySettingsWithHttpInfoAsync(string applicationName, string databaseName, CurrencySettings body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->DatabasesSetCurrencySettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->DatabasesSetCurrencySettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationsApi->DatabasesSetCurrencySettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationsApi.DatabasesSetCurrencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/applications/{applicationName}/databases/{databaseName}/currencySettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabasesSetCurrencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Active Alias Sets the active alias table associated with the specified application and database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StringCollectionResponse</returns>
        public StringCollectionResponse SetActiveAlias(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StringCollectionResponse> localVarResponse = SetActiveAliasWithHttpInfo(applicationName, databaseName, aliasTableName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Active Alias Sets the active alias table associated with the specified application and database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StringCollectionResponse</returns>
        public EssSharp.Client.ApiResponse<StringCollectionResponse> SetActiveAliasWithHttpInfo(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->SetActiveAlias");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->SetActiveAlias");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (aliasTableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "aliasTableName", aliasTableName));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.SetActiveAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<StringCollectionResponse>("/applications/{applicationName}/databases/{databaseName}/aliases/setActiveAlias", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActiveAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Active Alias Sets the active alias table associated with the specified application and database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StringCollectionResponse</returns>
        public async System.Threading.Tasks.Task<StringCollectionResponse> SetActiveAliasAsync(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StringCollectionResponse> localVarResponse = await SetActiveAliasWithHttpInfoAsync(applicationName, databaseName, aliasTableName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Active Alias Sets the active alias table associated with the specified application and database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="aliasTableName">&lt;p&gt;Alias table name.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StringCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StringCollectionResponse>> SetActiveAliasWithHttpInfoAsync(string applicationName, string databaseName, string aliasTableName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationsApi->SetActiveAlias");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ApplicationsApi->SetActiveAlias");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (aliasTableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "aliasTableName", aliasTableName));
            }

            localVarRequestOptions.Operation = "ApplicationsApi.SetActiveAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<StringCollectionResponse>("/applications/{applicationName}/databases/{databaseName}/aliases/setActiveAlias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActiveAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
