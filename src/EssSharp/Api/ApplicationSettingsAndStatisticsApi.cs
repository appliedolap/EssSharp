/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationSettingsAndStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Application Security Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppSecuritySettings</returns>
        AppSecuritySettings ApplicationSettingsStatisticsGetSecuritySettings(string applicationName, int operationIndex = 0);

        /// <summary>
        /// Get Application Security Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppSecuritySettings</returns>
        ApiResponse<AppSecuritySettings> ApplicationSettingsStatisticsGetSecuritySettingsWithHttpInfo(string applicationName, int operationIndex = 0);
        /// <summary>
        /// Get Application General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppSettingsList</returns>
        AppSettingsList ApplicationSettingsStatisticsGetSettings(string applicationName, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Application General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppSettingsList</returns>
        ApiResponse<AppSettingsList> ApplicationSettingsStatisticsGetSettingsWithHttpInfo(string applicationName, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Application Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppStartupSettings</returns>
        AppStartupSettings ApplicationSettingsStatisticsGetStartupSettings(string applicationName, int operationIndex = 0);

        /// <summary>
        /// Get Application Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppStartupSettings</returns>
        ApiResponse<AppStartupSettings> ApplicationSettingsStatisticsGetStartupSettingsWithHttpInfo(string applicationName, int operationIndex = 0);
        /// <summary>
        /// Get Application Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationStatistics</returns>
        ApplicationStatistics ApplicationSettingsStatisticsGetStatistics(string applicationName, int operationIndex = 0);

        /// <summary>
        /// Get Application Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationStatistics</returns>
        ApiResponse<ApplicationStatistics> ApplicationSettingsStatisticsGetStatisticsWithHttpInfo(string applicationName, int operationIndex = 0);
        /// <summary>
        /// Update Application Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationSettingsStatisticsUpdateSettings(string applicationName, List<PatchElement> body, int operationIndex = 0);

        /// <summary>
        /// Update Application Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationSettingsStatisticsUpdateSettingsWithHttpInfo(string applicationName, List<PatchElement> body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationSettingsAndStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Application Security Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppSecuritySettings</returns>
        System.Threading.Tasks.Task<AppSecuritySettings> ApplicationSettingsStatisticsGetSecuritySettingsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Security Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppSecuritySettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppSecuritySettings>> ApplicationSettingsStatisticsGetSecuritySettingsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppSettingsList</returns>
        System.Threading.Tasks.Task<AppSettingsList> ApplicationSettingsStatisticsGetSettingsAsync(string applicationName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppSettingsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppSettingsList>> ApplicationSettingsStatisticsGetSettingsWithHttpInfoAsync(string applicationName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStartupSettings</returns>
        System.Threading.Tasks.Task<AppStartupSettings> ApplicationSettingsStatisticsGetStartupSettingsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStartupSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStartupSettings>> ApplicationSettingsStatisticsGetStartupSettingsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationStatistics</returns>
        System.Threading.Tasks.Task<ApplicationStatistics> ApplicationSettingsStatisticsGetStatisticsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationStatistics>> ApplicationSettingsStatisticsGetStatisticsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Application Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationSettingsStatisticsUpdateSettingsAsync(string applicationName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Application Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationSettingsStatisticsUpdateSettingsWithHttpInfoAsync(string applicationName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationSettingsAndStatisticsApi : IApplicationSettingsAndStatisticsApiSync, IApplicationSettingsAndStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationSettingsAndStatisticsApi : IApplicationSettingsAndStatisticsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationSettingsAndStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationSettingsAndStatisticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationSettingsAndStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationSettingsAndStatisticsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationSettingsAndStatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationSettingsAndStatisticsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationSettingsAndStatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationSettingsAndStatisticsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Application Security Settings &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppSecuritySettings</returns>
        public AppSecuritySettings ApplicationSettingsStatisticsGetSecuritySettings(string applicationName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<AppSecuritySettings> localVarResponse = ApplicationSettingsStatisticsGetSecuritySettingsWithHttpInfo(applicationName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Security Settings &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppSecuritySettings</returns>
        public EssSharp.Client.ApiResponse<AppSecuritySettings> ApplicationSettingsStatisticsGetSecuritySettingsWithHttpInfo(string applicationName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetSecuritySettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetSecuritySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppSecuritySettings>("/applications/{applicationName}/settings/security", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetSecuritySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Security Settings &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppSecuritySettings</returns>
        public async System.Threading.Tasks.Task<AppSecuritySettings> ApplicationSettingsStatisticsGetSecuritySettingsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<AppSecuritySettings> localVarResponse = await ApplicationSettingsStatisticsGetSecuritySettingsWithHttpInfoAsync(applicationName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Security Settings &lt;p&gt;Returns the security settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppSecuritySettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<AppSecuritySettings>> ApplicationSettingsStatisticsGetSecuritySettingsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetSecuritySettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetSecuritySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppSecuritySettings>("/applications/{applicationName}/settings/security", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetSecuritySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application General Settings &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppSettingsList</returns>
        public AppSettingsList ApplicationSettingsStatisticsGetSettings(string applicationName, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<AppSettingsList> localVarResponse = ApplicationSettingsStatisticsGetSettingsWithHttpInfo(applicationName, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application General Settings &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppSettingsList</returns>
        public EssSharp.Client.ApiResponse<AppSettingsList> ApplicationSettingsStatisticsGetSettingsWithHttpInfo(string applicationName, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppSettingsList>("/applications/{applicationName}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application General Settings &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppSettingsList</returns>
        public async System.Threading.Tasks.Task<AppSettingsList> ApplicationSettingsStatisticsGetSettingsAsync(string applicationName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<AppSettingsList> localVarResponse = await ApplicationSettingsStatisticsGetSettingsWithHttpInfoAsync(applicationName, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application General Settings &lt;p&gt;Returns general settings of the specified application. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings (this is the default). Other options available: &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;security&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppSettingsList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<AppSettingsList>> ApplicationSettingsStatisticsGetSettingsWithHttpInfoAsync(string applicationName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppSettingsList>("/applications/{applicationName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Startup Settings &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppStartupSettings</returns>
        public AppStartupSettings ApplicationSettingsStatisticsGetStartupSettings(string applicationName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<AppStartupSettings> localVarResponse = ApplicationSettingsStatisticsGetStartupSettingsWithHttpInfo(applicationName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Startup Settings &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppStartupSettings</returns>
        public EssSharp.Client.ApiResponse<AppStartupSettings> ApplicationSettingsStatisticsGetStartupSettingsWithHttpInfo(string applicationName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetStartupSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetStartupSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStartupSettings>("/applications/{applicationName}/settings/startup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetStartupSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Startup Settings &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStartupSettings</returns>
        public async System.Threading.Tasks.Task<AppStartupSettings> ApplicationSettingsStatisticsGetStartupSettingsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<AppStartupSettings> localVarResponse = await ApplicationSettingsStatisticsGetStartupSettingsWithHttpInfoAsync(applicationName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Startup Settings &lt;p&gt;Returns the startup settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStartupSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<AppStartupSettings>> ApplicationSettingsStatisticsGetStartupSettingsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetStartupSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetStartupSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStartupSettings>("/applications/{applicationName}/settings/startup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetStartupSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Statistics &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationStatistics</returns>
        public ApplicationStatistics ApplicationSettingsStatisticsGetStatistics(string applicationName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationStatistics> localVarResponse = ApplicationSettingsStatisticsGetStatisticsWithHttpInfo(applicationName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Statistics &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationStatistics</returns>
        public EssSharp.Client.ApiResponse<ApplicationStatistics> ApplicationSettingsStatisticsGetStatisticsWithHttpInfo(string applicationName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetStatistics");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationStatistics>("/applications/{applicationName}/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Statistics &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationStatistics</returns>
        public async System.Threading.Tasks.Task<ApplicationStatistics> ApplicationSettingsStatisticsGetStatisticsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationStatistics> localVarResponse = await ApplicationSettingsStatisticsGetStatisticsWithHttpInfoAsync(applicationName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Statistics &lt;p&gt;Returns the statistics of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationStatistics)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationStatistics>> ApplicationSettingsStatisticsGetStatisticsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsGetStatistics");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsGetStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationStatistics>("/applications/{applicationName}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsGetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Settings &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationSettingsStatisticsUpdateSettings(string applicationName, List<PatchElement> body, int operationIndex = 0)
        {
            ApplicationSettingsStatisticsUpdateSettingsWithHttpInfo(applicationName, body);
        }

        /// <summary>
        /// Update Application Settings &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationSettingsStatisticsUpdateSettingsWithHttpInfo(string applicationName, List<PatchElement> body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsUpdateSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsUpdateSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsUpdateSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/applications/{applicationName}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsUpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Settings &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationSettingsStatisticsUpdateSettingsAsync(string applicationName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationSettingsStatisticsUpdateSettingsWithHttpInfoAsync(applicationName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Application Settings &lt;p&gt;Updates the settings of the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Application settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationSettingsStatisticsUpdateSettingsWithHttpInfoAsync(string applicationName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsUpdateSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationSettingsAndStatisticsApi->ApplicationSettingsStatisticsUpdateSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationSettingsAndStatisticsApi.ApplicationSettingsStatisticsUpdateSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/applications/{applicationName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationSettingsStatisticsUpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
