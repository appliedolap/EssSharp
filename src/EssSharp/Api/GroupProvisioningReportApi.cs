/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupProvisioningReportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        DatabaseProvisionReportItemList GroupProvisioningReportGetFilters(string application, string groupId, int operationIndex = 0);

        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        ApiResponse<DatabaseProvisionReportItemList> GroupProvisioningReportGetFiltersWithHttpInfo(string application, string groupId, int operationIndex = 0);
        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MainProvisionReport</returns>
        MainProvisionReport GroupProvisioningReportGetFullReport(string groupId, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MainProvisionReport</returns>
        ApiResponse<MainProvisionReport> GroupProvisioningReportGetFullReportWithHttpInfo(string groupId, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get All Applications Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItemList</returns>
        ApplicationProvisionReportItemList GroupProvisioningReportGetReportForAllApplications(string groupId, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get All Applications Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItemList</returns>
        ApiResponse<ApplicationProvisionReportItemList> GroupProvisioningReportGetReportForAllApplicationsWithHttpInfo(string groupId, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItem</returns>
        ApplicationProvisionReportItem GroupProvisioningReportGetReportForApplication(string application, string groupId, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItem</returns>
        ApiResponse<ApplicationProvisionReportItem> GroupProvisioningReportGetReportForApplicationWithHttpInfo(string application, string groupId, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisionReportItemList</returns>
        ProvisionReportItemList GroupProvisioningReportGetRoles(string application, string groupId, int operationIndex = 0);

        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisionReportItemList</returns>
        ApiResponse<ProvisionReportItemList> GroupProvisioningReportGetRolesWithHttpInfo(string application, string groupId, int operationIndex = 0);
        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        DatabaseProvisionReportItemList GroupProvisioningReportGetScripts(string application, string groupId, int operationIndex = 0);

        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        ApiResponse<DatabaseProvisionReportItemList> GroupProvisioningReportGetScriptsWithHttpInfo(string application, string groupId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupProvisioningReportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        System.Threading.Tasks.Task<DatabaseProvisionReportItemList> GroupProvisioningReportGetFiltersAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatabaseProvisionReportItemList>> GroupProvisioningReportGetFiltersWithHttpInfoAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MainProvisionReport</returns>
        System.Threading.Tasks.Task<MainProvisionReport> GroupProvisioningReportGetFullReportAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MainProvisionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainProvisionReport>> GroupProvisioningReportGetFullReportWithHttpInfoAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Applications Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItemList</returns>
        System.Threading.Tasks.Task<ApplicationProvisionReportItemList> GroupProvisioningReportGetReportForAllApplicationsAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Applications Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationProvisionReportItemList>> GroupProvisioningReportGetReportForAllApplicationsWithHttpInfoAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItem</returns>
        System.Threading.Tasks.Task<ApplicationProvisionReportItem> GroupProvisioningReportGetReportForApplicationAsync(string application, string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationProvisionReportItem>> GroupProvisioningReportGetReportForApplicationWithHttpInfoAsync(string application, string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisionReportItemList</returns>
        System.Threading.Tasks.Task<ProvisionReportItemList> GroupProvisioningReportGetRolesAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisionReportItemList>> GroupProvisioningReportGetRolesWithHttpInfoAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        System.Threading.Tasks.Task<DatabaseProvisionReportItemList> GroupProvisioningReportGetScriptsAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatabaseProvisionReportItemList>> GroupProvisioningReportGetScriptsWithHttpInfoAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupProvisioningReportApi : IGroupProvisioningReportApiSync, IGroupProvisioningReportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupProvisioningReportApi : IGroupProvisioningReportApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupProvisioningReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupProvisioningReportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupProvisioningReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupProvisioningReportApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupProvisioningReportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupProvisioningReportApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupProvisioningReportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupProvisioningReportApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        public DatabaseProvisionReportItemList GroupProvisioningReportGetFilters(string application, string groupId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = GroupProvisioningReportGetFiltersWithHttpInfo(application, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> GroupProvisioningReportGetFiltersWithHttpInfo(string application, string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetFilters");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetFilters");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetFilters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatabaseProvisionReportItemList>("/groups/{groupId}/provisionReport/applications/{application}/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<DatabaseProvisionReportItemList> GroupProvisioningReportGetFiltersAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = await GroupProvisioningReportGetFiltersWithHttpInfoAsync(application, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a provisioning report about filters for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList>> GroupProvisioningReportGetFiltersWithHttpInfoAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetFilters");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetFilters");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetFilters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatabaseProvisionReportItemList>("/groups/{groupId}/provisionReport/applications/{application}/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MainProvisionReport</returns>
        public MainProvisionReport GroupProvisioningReportGetFullReport(string groupId, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<MainProvisionReport> localVarResponse = GroupProvisioningReportGetFullReportWithHttpInfo(groupId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MainProvisionReport</returns>
        public EssSharp.Client.ApiResponse<MainProvisionReport> GroupProvisioningReportGetFullReportWithHttpInfo(string groupId, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetFullReport");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetFullReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MainProvisionReport>("/groups/{groupId}/provisionReport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetFullReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MainProvisionReport</returns>
        public async System.Threading.Tasks.Task<MainProvisionReport> GroupProvisioningReportGetFullReportAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<MainProvisionReport> localVarResponse = await GroupProvisioningReportGetFullReportWithHttpInfoAsync(groupId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report for the service and all applications. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for applications to get application provisioning reports. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MainProvisionReport)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<MainProvisionReport>> GroupProvisioningReportGetFullReportWithHttpInfoAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetFullReport");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetFullReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MainProvisionReport>("/groups/{groupId}/provisionReport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetFullReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Applications Provisioning Report &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItemList</returns>
        public ApplicationProvisionReportItemList GroupProvisioningReportGetReportForAllApplications(string groupId, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList> localVarResponse = GroupProvisioningReportGetReportForAllApplicationsWithHttpInfo(groupId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Applications Provisioning Report &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList> GroupProvisioningReportGetReportForAllApplicationsWithHttpInfo(string groupId, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetReportForAllApplications");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetReportForAllApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationProvisionReportItemList>("/groups/{groupId}/provisionReport/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetReportForAllApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Applications Provisioning Report &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<ApplicationProvisionReportItemList> GroupProvisioningReportGetReportForAllApplicationsAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList> localVarResponse = await GroupProvisioningReportGetReportForAllApplicationsWithHttpInfoAsync(groupId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Applications Provisioning Report &lt;p&gt;Gets a provisioning report for all applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;all&lt;/code&gt; to get provisioning information for all applications.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList>> GroupProvisioningReportGetReportForAllApplicationsWithHttpInfoAsync(string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetReportForAllApplications");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetReportForAllApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationProvisionReportItemList>("/groups/{groupId}/provisionReport/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetReportForAllApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItem</returns>
        public ApplicationProvisionReportItem GroupProvisioningReportGetReportForApplication(string application, string groupId, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItem> localVarResponse = GroupProvisioningReportGetReportForApplicationWithHttpInfo(application, groupId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItem</returns>
        public EssSharp.Client.ApiResponse<ApplicationProvisionReportItem> GroupProvisioningReportGetReportForApplicationWithHttpInfo(string application, string groupId, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetReportForApplication");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetReportForApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetReportForApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationProvisionReportItem>("/groups/{groupId}/provisionReport/applications/{application}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetReportForApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItem</returns>
        public async System.Threading.Tasks.Task<ApplicationProvisionReportItem> GroupProvisioningReportGetReportForApplicationAsync(string application, string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItem> localVarResponse = await GroupProvisioningReportGetReportForApplicationWithHttpInfoAsync(application, groupId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;. When value is &lt;code&gt;none&lt;/code&gt;, only links to roles, filters and scripts will be returned. When value is &lt;code&gt;all&lt;/code&gt;, provisioning information for roles, filters, and scripts are returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItem)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationProvisionReportItem>> GroupProvisioningReportGetReportForApplicationWithHttpInfoAsync(string application, string groupId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetReportForApplication");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetReportForApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetReportForApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationProvisionReportItem>("/groups/{groupId}/provisionReport/applications/{application}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetReportForApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisionReportItemList</returns>
        public ProvisionReportItemList GroupProvisioningReportGetRoles(string application, string groupId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ProvisionReportItemList> localVarResponse = GroupProvisioningReportGetRolesWithHttpInfo(application, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<ProvisionReportItemList> GroupProvisioningReportGetRolesWithHttpInfo(string application, string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetRoles");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetRoles");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisionReportItemList>("/groups/{groupId}/provisionReport/applications/{application}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<ProvisionReportItemList> GroupProvisioningReportGetRolesAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ProvisionReportItemList> localVarResponse = await GroupProvisioningReportGetRolesWithHttpInfoAsync(application, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Gets a roles provisioning report for the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ProvisionReportItemList>> GroupProvisioningReportGetRolesWithHttpInfoAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetRoles");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetRoles");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisionReportItemList>("/groups/{groupId}/provisionReport/applications/{application}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        public DatabaseProvisionReportItemList GroupProvisioningReportGetScripts(string application, string groupId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = GroupProvisioningReportGetScriptsWithHttpInfo(application, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> GroupProvisioningReportGetScriptsWithHttpInfo(string application, string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetScripts");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetScripts");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatabaseProvisionReportItemList>("/groups/{groupId}/provisionReport/applications/{application}/scripts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<DatabaseProvisionReportItemList> GroupProvisioningReportGetScriptsAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = await GroupProvisioningReportGetScriptsWithHttpInfoAsync(application, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Gets a provisioning report about scripts for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="groupId">&lt;p&gt;Group ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList>> GroupProvisioningReportGetScriptsWithHttpInfoAsync(string application, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling GroupProvisioningReportApi->GroupProvisioningReportGetScripts");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupProvisioningReportApi->GroupProvisioningReportGetScripts");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", EssSharp.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupProvisioningReportApi.GroupProvisioningReportGetScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatabaseProvisionReportItemList>("/groups/{groupId}/provisionReport/applications/{application}/scripts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupProvisioningReportGetScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
