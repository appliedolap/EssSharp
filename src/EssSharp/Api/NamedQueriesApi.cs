/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamedQueriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NamedqueriesDeleteNamedQuery(string application, string database, string query, int operationIndex = 0);

        /// <summary>
        /// Delete MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NamedqueriesDeleteNamedQueryWithHttpInfo(string application, string database, string query, int operationIndex = 0);
        /// <summary>
        /// Update MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamedQuery</returns>
        NamedQuery NamedqueriesEditNamedQuery(string application, string database, string query, Query body = default(Query), int operationIndex = 0);

        /// <summary>
        /// Update MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamedQuery</returns>
        ApiResponse<NamedQuery> NamedqueriesEditNamedQueryWithHttpInfo(string application, string database, string query, Query body = default(Query), int operationIndex = 0);
        /// <summary>
        /// List MDX Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Queries</returns>
        Queries NamedqueriesGetNamedQueries(string application, string database, int operationIndex = 0);

        /// <summary>
        /// List MDX Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Queries</returns>
        ApiResponse<Queries> NamedqueriesGetNamedQueriesWithHttpInfo(string application, string database, int operationIndex = 0);
        /// <summary>
        /// Get MDX Report Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamedQuery</returns>
        NamedQuery NamedqueriesGetNamedQueryDetails(string application, string database, string query, int operationIndex = 0);

        /// <summary>
        /// Get MDX Report Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamedQuery</returns>
        ApiResponse<NamedQuery> NamedqueriesGetNamedQueryDetailsWithHttpInfo(string application, string database, string query, int operationIndex = 0);
        /// <summary>
        /// Save MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamedQuery</returns>
        NamedQuery NamedqueriesSaveNamedQuery(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0);

        /// <summary>
        /// Save MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamedQuery</returns>
        ApiResponse<NamedQuery> NamedqueriesSaveNamedQueryWithHttpInfo(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamedQueriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NamedqueriesDeleteNamedQueryAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NamedqueriesDeleteNamedQueryWithHttpInfoAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamedQuery</returns>
        System.Threading.Tasks.Task<NamedQuery> NamedqueriesEditNamedQueryAsync(string application, string database, string query, Query body = default(Query), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamedQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamedQuery>> NamedqueriesEditNamedQueryWithHttpInfoAsync(string application, string database, string query, Query body = default(Query), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List MDX Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Queries</returns>
        System.Threading.Tasks.Task<Queries> NamedqueriesGetNamedQueriesAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List MDX Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Queries)</returns>
        System.Threading.Tasks.Task<ApiResponse<Queries>> NamedqueriesGetNamedQueriesWithHttpInfoAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get MDX Report Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamedQuery</returns>
        System.Threading.Tasks.Task<NamedQuery> NamedqueriesGetNamedQueryDetailsAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get MDX Report Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamedQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamedQuery>> NamedqueriesGetNamedQueryDetailsWithHttpInfoAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamedQuery</returns>
        System.Threading.Tasks.Task<NamedQuery> NamedqueriesSaveNamedQueryAsync(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamedQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamedQuery>> NamedqueriesSaveNamedQueryWithHttpInfoAsync(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamedQueriesApi : INamedQueriesApiSync, INamedQueriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NamedQueriesApi : INamedQueriesApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NamedQueriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamedQueriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamedQueriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamedQueriesApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamedQueriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NamedQueriesApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamedQueriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NamedQueriesApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete MDX Report &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void NamedqueriesDeleteNamedQuery(string application, string database, string query, int operationIndex = 0)
        {
            NamedqueriesDeleteNamedQueryWithHttpInfo(application, database, query);
        }

        /// <summary>
        /// Delete MDX Report &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> NamedqueriesDeleteNamedQueryWithHttpInfo(string application, string database, string query, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesDeleteNamedQuery");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesDeleteNamedQuery");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'query' when calling NamedQueriesApi->NamedqueriesDeleteNamedQuery");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("query", EssSharp.Client.ClientUtils.ParameterToString(query)); // path parameter

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesDeleteNamedQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{application}/databases/{database}/queries/{query}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesDeleteNamedQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete MDX Report &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NamedqueriesDeleteNamedQueryAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NamedqueriesDeleteNamedQueryWithHttpInfoAsync(application, database, query, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete MDX Report &lt;p&gt;Delete the MDX report for specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> NamedqueriesDeleteNamedQueryWithHttpInfoAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesDeleteNamedQuery");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesDeleteNamedQuery");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'query' when calling NamedQueriesApi->NamedqueriesDeleteNamedQuery");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("query", EssSharp.Client.ClientUtils.ParameterToString(query)); // path parameter

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesDeleteNamedQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{application}/databases/{database}/queries/{query}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesDeleteNamedQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update MDX Report &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamedQuery</returns>
        public NamedQuery NamedqueriesEditNamedQuery(string application, string database, string query, Query body = default(Query), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<NamedQuery> localVarResponse = NamedqueriesEditNamedQueryWithHttpInfo(application, database, query, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update MDX Report &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamedQuery</returns>
        public EssSharp.Client.ApiResponse<NamedQuery> NamedqueriesEditNamedQueryWithHttpInfo(string application, string database, string query, Query body = default(Query), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesEditNamedQuery");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesEditNamedQuery");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'query' when calling NamedQueriesApi->NamedqueriesEditNamedQuery");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("query", EssSharp.Client.ClientUtils.ParameterToString(query)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesEditNamedQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<NamedQuery>("/applications/{application}/databases/{database}/queries/{query}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesEditNamedQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update MDX Report &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamedQuery</returns>
        public async System.Threading.Tasks.Task<NamedQuery> NamedqueriesEditNamedQueryAsync(string application, string database, string query, Query body = default(Query), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<NamedQuery> localVarResponse = await NamedqueriesEditNamedQueryWithHttpInfoAsync(application, database, query, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update MDX Report &lt;p&gt;Update the MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of MDX report to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamedQuery)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<NamedQuery>> NamedqueriesEditNamedQueryWithHttpInfoAsync(string application, string database, string query, Query body = default(Query), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesEditNamedQuery");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesEditNamedQuery");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'query' when calling NamedQueriesApi->NamedqueriesEditNamedQuery");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("query", EssSharp.Client.ClientUtils.ParameterToString(query)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesEditNamedQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<NamedQuery>("/applications/{application}/databases/{database}/queries/{query}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesEditNamedQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MDX Reports &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Queries</returns>
        public Queries NamedqueriesGetNamedQueries(string application, string database, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Queries> localVarResponse = NamedqueriesGetNamedQueriesWithHttpInfo(application, database);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List MDX Reports &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Queries</returns>
        public EssSharp.Client.ApiResponse<Queries> NamedqueriesGetNamedQueriesWithHttpInfo(string application, string database, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesGetNamedQueries");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesGetNamedQueries");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesGetNamedQueries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Queries>("/applications/{application}/databases/{database}/queries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesGetNamedQueries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MDX Reports &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Queries</returns>
        public async System.Threading.Tasks.Task<Queries> NamedqueriesGetNamedQueriesAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Queries> localVarResponse = await NamedqueriesGetNamedQueriesWithHttpInfoAsync(application, database, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List MDX Reports &lt;p&gt;List all the saved MDX reports for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Queries)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Queries>> NamedqueriesGetNamedQueriesWithHttpInfoAsync(string application, string database, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesGetNamedQueries");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesGetNamedQueries");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesGetNamedQueries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Queries>("/applications/{application}/databases/{database}/queries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesGetNamedQueries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MDX Report Details &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamedQuery</returns>
        public NamedQuery NamedqueriesGetNamedQueryDetails(string application, string database, string query, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<NamedQuery> localVarResponse = NamedqueriesGetNamedQueryDetailsWithHttpInfo(application, database, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MDX Report Details &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamedQuery</returns>
        public EssSharp.Client.ApiResponse<NamedQuery> NamedqueriesGetNamedQueryDetailsWithHttpInfo(string application, string database, string query, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesGetNamedQueryDetails");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesGetNamedQueryDetails");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'query' when calling NamedQueriesApi->NamedqueriesGetNamedQueryDetails");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("query", EssSharp.Client.ClientUtils.ParameterToString(query)); // path parameter

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesGetNamedQueryDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NamedQuery>("/applications/{application}/databases/{database}/queries/{query}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesGetNamedQueryDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MDX Report Details &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamedQuery</returns>
        public async System.Threading.Tasks.Task<NamedQuery> NamedqueriesGetNamedQueryDetailsAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<NamedQuery> localVarResponse = await NamedqueriesGetNamedQueryDetailsWithHttpInfoAsync(application, database, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MDX Report Details &lt;p&gt;Get the details for the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="query">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamedQuery)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<NamedQuery>> NamedqueriesGetNamedQueryDetailsWithHttpInfoAsync(string application, string database, string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesGetNamedQueryDetails");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesGetNamedQueryDetails");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'query' when calling NamedQueriesApi->NamedqueriesGetNamedQueryDetails");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("query", EssSharp.Client.ClientUtils.ParameterToString(query)); // path parameter

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesGetNamedQueryDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NamedQuery>("/applications/{application}/databases/{database}/queries/{query}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesGetNamedQueryDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save MDX Report &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamedQuery</returns>
        public NamedQuery NamedqueriesSaveNamedQuery(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<NamedQuery> localVarResponse = NamedqueriesSaveNamedQueryWithHttpInfo(application, database, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save MDX Report &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamedQuery</returns>
        public EssSharp.Client.ApiResponse<NamedQuery> NamedqueriesSaveNamedQueryWithHttpInfo(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesSaveNamedQuery");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesSaveNamedQuery");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesSaveNamedQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NamedQuery>("/applications/{application}/databases/{database}/queries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesSaveNamedQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save MDX Report &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamedQuery</returns>
        public async System.Threading.Tasks.Task<NamedQuery> NamedqueriesSaveNamedQueryAsync(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<NamedQuery> localVarResponse = await NamedqueriesSaveNamedQueryWithHttpInfoAsync(application, database, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save MDX Report &lt;p&gt;Saves an MDX report for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Details of query to be saved.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamedQuery)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<NamedQuery>> NamedqueriesSaveNamedQueryWithHttpInfoAsync(string application, string database, NamedQuery body = default(NamedQuery), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling NamedQueriesApi->NamedqueriesSaveNamedQuery");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling NamedQueriesApi->NamedqueriesSaveNamedQuery");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "NamedQueriesApi.NamedqueriesSaveNamedQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NamedQuery>("/applications/{application}/databases/{database}/queries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NamedqueriesSaveNamedQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
