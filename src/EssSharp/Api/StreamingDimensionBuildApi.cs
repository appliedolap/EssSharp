/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamingDimensionBuildApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// End Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessEndResponse</returns>
        StreamProcessEndResponse DimensionBuildEnd(string applicationName, string databaseName, string streamId, int operationIndex = 0);

        /// <summary>
        /// End Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessEndResponse</returns>
        ApiResponse<StreamProcessEndResponse> DimensionBuildEndWithHttpInfo(string applicationName, string databaseName, string streamId, int operationIndex = 0);
        /// <summary>
        /// End Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessEndResponse</returns>
        StreamProcessEndResponse DimensionBuildEndDimBuild(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0);

        /// <summary>
        /// End Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessEndResponse</returns>
        ApiResponse<StreamProcessEndResponse> DimensionBuildEndDimBuildWithHttpInfo(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0);
        /// <summary>
        /// Start Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessStartResponse</returns>
        StreamProcessStartResponse DimensionBuildStart(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0);

        /// <summary>
        /// Start Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessStartResponse</returns>
        ApiResponse<StreamProcessStartResponse> DimensionBuildStartWithHttpInfo(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0);
        /// <summary>
        /// Start Dimension Build&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessStartResponse</returns>
        StreamProcessStartResponse DimensionBuildStartDimBuild(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0);

        /// <summary>
        /// Start Dimension Build&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessStartResponse</returns>
        ApiResponse<StreamProcessStartResponse> DimensionBuildStartDimBuildWithHttpInfo(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0);
        /// <summary>
        /// Push Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessStartResponse</returns>
        StreamProcessStartResponse DimensionBuildStreamDimBuildData(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0);

        /// <summary>
        /// Push Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessStartResponse</returns>
        ApiResponse<StreamProcessStartResponse> DimensionBuildStreamDimBuildDataWithHttpInfo(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamingDimensionBuildApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// End Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessEndResponse</returns>
        System.Threading.Tasks.Task<StreamProcessEndResponse> DimensionBuildEndAsync(string applicationName, string databaseName, string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessEndResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamProcessEndResponse>> DimensionBuildEndWithHttpInfoAsync(string applicationName, string databaseName, string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessEndResponse</returns>
        System.Threading.Tasks.Task<StreamProcessEndResponse> DimensionBuildEndDimBuildAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessEndResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamProcessEndResponse>> DimensionBuildEndDimBuildWithHttpInfoAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessStartResponse</returns>
        System.Threading.Tasks.Task<StreamProcessStartResponse> DimensionBuildStartAsync(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Streaming Dimension Build
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessStartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamProcessStartResponse>> DimensionBuildStartWithHttpInfoAsync(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start Dimension Build&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessStartResponse</returns>
        System.Threading.Tasks.Task<StreamProcessStartResponse> DimensionBuildStartDimBuildAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Dimension Build&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessStartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamProcessStartResponse>> DimensionBuildStartDimBuildWithHttpInfoAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Push Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessStartResponse</returns>
        System.Threading.Tasks.Task<StreamProcessStartResponse> DimensionBuildStreamDimBuildDataAsync(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Push Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessStartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamProcessStartResponse>> DimensionBuildStreamDimBuildDataWithHttpInfoAsync(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamingDimensionBuildApi : IStreamingDimensionBuildApiSync, IStreamingDimensionBuildApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreamingDimensionBuildApi : IStreamingDimensionBuildApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamingDimensionBuildApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreamingDimensionBuildApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamingDimensionBuildApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreamingDimensionBuildApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamingDimensionBuildApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreamingDimensionBuildApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamingDimensionBuildApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StreamingDimensionBuildApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// End Streaming Dimension Build &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessEndResponse</returns>
        public StreamProcessEndResponse DimensionBuildEnd(string applicationName, string databaseName, string streamId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StreamProcessEndResponse> localVarResponse = DimensionBuildEndWithHttpInfo(applicationName, databaseName, streamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Streaming Dimension Build &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessEndResponse</returns>
        public EssSharp.Client.ApiResponse<StreamProcessEndResponse> DimensionBuildEndWithHttpInfo(string applicationName, string databaseName, string streamId, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildEnd");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildEnd");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildEnd");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildEnd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<StreamProcessEndResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildEnd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Streaming Dimension Build &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessEndResponse</returns>
        public async System.Threading.Tasks.Task<StreamProcessEndResponse> DimensionBuildEndAsync(string applicationName, string databaseName, string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StreamProcessEndResponse> localVarResponse = await DimensionBuildEndWithHttpInfoAsync(applicationName, databaseName, streamId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Streaming Dimension Build &lt;p&gt;Ends an incremental dimension build and triggers a restructuring of the cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessEndResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StreamProcessEndResponse>> DimensionBuildEndWithHttpInfoAsync(string applicationName, string databaseName, string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildEnd");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildEnd");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildEnd");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildEnd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<StreamProcessEndResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildEnd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Dimension Build &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessEndResponse</returns>
        public StreamProcessEndResponse DimensionBuildEndDimBuild(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StreamProcessEndResponse> localVarResponse = DimensionBuildEndDimBuildWithHttpInfo(applicationName, databaseName, streamId, ruleFileName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Dimension Build &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessEndResponse</returns>
        public EssSharp.Client.ApiResponse<StreamProcessEndResponse> DimensionBuildEndDimBuildWithHttpInfo(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }

            // verify the required parameter 'ruleFileName' is set
            if (ruleFileName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'ruleFileName' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleFileName", EssSharp.Client.ClientUtils.ParameterToString(ruleFileName)); // path parameter

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildEndDimBuild";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<StreamProcessEndResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}/{ruleFileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildEndDimBuild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Dimension Build &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessEndResponse</returns>
        public async System.Threading.Tasks.Task<StreamProcessEndResponse> DimensionBuildEndDimBuildAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StreamProcessEndResponse> localVarResponse = await DimensionBuildEndDimBuildWithHttpInfoAsync(applicationName, databaseName, streamId, ruleFileName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Dimension Build &lt;p&gt;Ends a dimension build with a rules file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rules file name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessEndResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StreamProcessEndResponse>> DimensionBuildEndDimBuildWithHttpInfoAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }

            // verify the required parameter 'ruleFileName' is set
            if (ruleFileName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'ruleFileName' when calling StreamingDimensionBuildApi->DimensionBuildEndDimBuild");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleFileName", EssSharp.Client.ClientUtils.ParameterToString(ruleFileName)); // path parameter

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildEndDimBuild";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<StreamProcessEndResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}/{ruleFileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildEndDimBuild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Streaming Dimension Build &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessStartResponse</returns>
        public StreamProcessStartResponse DimensionBuildStart(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StreamProcessStartResponse> localVarResponse = DimensionBuildStartWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Streaming Dimension Build &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessStartResponse</returns>
        public EssSharp.Client.ApiResponse<StreamProcessStartResponse> DimensionBuildStartWithHttpInfo(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildStart");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildStart");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StreamProcessStartResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Streaming Dimension Build &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessStartResponse</returns>
        public async System.Threading.Tasks.Task<StreamProcessStartResponse> DimensionBuildStartAsync(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StreamProcessStartResponse> localVarResponse = await DimensionBuildStartWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Streaming Dimension Build &lt;p&gt;Starts an incremental dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Dimension build attributes, such as the restructure option. If empty, the default value for restructure option is  &lt;code&gt;PRESERVE_ALL_DATA&lt;/code&gt;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessStartResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StreamProcessStartResponse>> DimensionBuildStartWithHttpInfoAsync(string applicationName, string databaseName, DimBuildStartPayload body = default(DimBuildStartPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildStart");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildStart");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StreamProcessStartResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Dimension Build&lt;/p&gt; &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessStartResponse</returns>
        public StreamProcessStartResponse DimensionBuildStartDimBuild(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StreamProcessStartResponse> localVarResponse = DimensionBuildStartDimBuildWithHttpInfo(applicationName, databaseName, streamId, ruleFileName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Dimension Build&lt;/p&gt; &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessStartResponse</returns>
        public EssSharp.Client.ApiResponse<StreamProcessStartResponse> DimensionBuildStartDimBuildWithHttpInfo(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }

            // verify the required parameter 'ruleFileName' is set
            if (ruleFileName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'ruleFileName' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleFileName", EssSharp.Client.ClientUtils.ParameterToString(ruleFileName)); // path parameter

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildStartDimBuild";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StreamProcessStartResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}/{ruleFileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildStartDimBuild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Dimension Build&lt;/p&gt; &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessStartResponse</returns>
        public async System.Threading.Tasks.Task<StreamProcessStartResponse> DimensionBuildStartDimBuildAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StreamProcessStartResponse> localVarResponse = await DimensionBuildStartDimBuildWithHttpInfoAsync(applicationName, databaseName, streamId, ruleFileName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Dimension Build&lt;/p&gt; &lt;p&gt;Starts a dimension build with a rule file.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="ruleFileName">&lt;p&gt;Rule File Name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessStartResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StreamProcessStartResponse>> DimensionBuildStartDimBuildWithHttpInfoAsync(string applicationName, string databaseName, string streamId, string ruleFileName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }

            // verify the required parameter 'ruleFileName' is set
            if (ruleFileName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'ruleFileName' when calling StreamingDimensionBuildApi->DimensionBuildStartDimBuild");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleFileName", EssSharp.Client.ClientUtils.ParameterToString(ruleFileName)); // path parameter

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildStartDimBuild";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StreamProcessStartResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}/{ruleFileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildStartDimBuild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push Dimensions &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamProcessStartResponse</returns>
        public StreamProcessStartResponse DimensionBuildStreamDimBuildData(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StreamProcessStartResponse> localVarResponse = DimensionBuildStreamDimBuildDataWithHttpInfo(applicationName, databaseName, streamId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Push Dimensions &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamProcessStartResponse</returns>
        public EssSharp.Client.ApiResponse<StreamProcessStartResponse> DimensionBuildStreamDimBuildDataWithHttpInfo(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildStreamDimBuildData");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildStreamDimBuildData");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildStreamDimBuildData");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain",
                "text/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildStreamDimBuildData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StreamProcessStartResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildStreamDimBuildData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push Dimensions &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamProcessStartResponse</returns>
        public async System.Threading.Tasks.Task<StreamProcessStartResponse> DimensionBuildStreamDimBuildDataAsync(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StreamProcessStartResponse> localVarResponse = await DimensionBuildStreamDimBuildDataWithHttpInfoAsync(applicationName, databaseName, streamId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Push Dimensions &lt;p&gt;Pushes data for streaming dimension build.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="streamId">&lt;p&gt;Stream ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;CSV data.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamProcessStartResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StreamProcessStartResponse>> DimensionBuildStreamDimBuildDataWithHttpInfoAsync(string applicationName, string databaseName, string streamId, string body = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling StreamingDimensionBuildApi->DimensionBuildStreamDimBuildData");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling StreamingDimensionBuildApi->DimensionBuildStreamDimBuildData");
            }

            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling StreamingDimensionBuildApi->DimensionBuildStreamDimBuildData");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain", 
                "text/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "StreamingDimensionBuildApi.DimensionBuildStreamDimBuildData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StreamProcessStartResponse>("/applications/{applicationName}/databases/{databaseName}/dimbuild/{streamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionBuildStreamDimBuildData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
