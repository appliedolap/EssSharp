/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDimensionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        GenerationLevel DimensionsEditDimGenerations(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0);

        /// <summary>
        /// Update Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        ApiResponse<GenerationLevel> DimensionsEditDimGenerationsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0);
        /// <summary>
        /// Update Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        GenerationLevel DimensionsEditDimLevels(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0);

        /// <summary>
        /// Update Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        ApiResponse<GenerationLevel> DimensionsEditDimLevelsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0);
        /// <summary>
        /// Get Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        GenerationLevel DimensionsGetDimGenerations(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0);

        /// <summary>
        /// Get Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        ApiResponse<GenerationLevel> DimensionsGetDimGenerationsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0);
        /// <summary>
        /// Get Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        GenerationLevel DimensionsGetDimLevels(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0);

        /// <summary>
        /// Get Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        ApiResponse<GenerationLevel> DimensionsGetDimLevelsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0);
        /// <summary>
        /// List Generations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevelList</returns>
        GenerationLevelList DimensionsListDimGenerations(string applicationName, string databaseName, string dimensionName, int operationIndex = 0);

        /// <summary>
        /// List Generations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevelList</returns>
        ApiResponse<GenerationLevelList> DimensionsListDimGenerationsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int operationIndex = 0);
        /// <summary>
        /// List Levels
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevelList</returns>
        GenerationLevelList DimensionsListDimLevels(string applicationName, string databaseName, string dimensionName, int operationIndex = 0);

        /// <summary>
        /// List Levels
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevelList</returns>
        ApiResponse<GenerationLevelList> DimensionsListDimLevelsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int operationIndex = 0);
        /// <summary>
        /// List Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DimensionList</returns>
        DimensionList DimensionsListDimensions(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// List Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DimensionList</returns>
        ApiResponse<DimensionList> DimensionsListDimensionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDimensionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Update Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        System.Threading.Tasks.Task<GenerationLevel> DimensionsEditDimGenerationsAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationLevel>> DimensionsEditDimGenerationsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        System.Threading.Tasks.Task<GenerationLevel> DimensionsEditDimLevelsAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationLevel>> DimensionsEditDimLevelsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        System.Threading.Tasks.Task<GenerationLevel> DimensionsGetDimGenerationsAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Generation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationLevel>> DimensionsGetDimGenerationsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        System.Threading.Tasks.Task<GenerationLevel> DimensionsGetDimLevelsAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Level
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationLevel>> DimensionsGetDimLevelsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Generations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevelList</returns>
        System.Threading.Tasks.Task<GenerationLevelList> DimensionsListDimGenerationsAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Generations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevelList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationLevelList>> DimensionsListDimGenerationsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Levels
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevelList</returns>
        System.Threading.Tasks.Task<GenerationLevelList> DimensionsListDimLevelsAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Levels
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevelList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationLevelList>> DimensionsListDimLevelsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DimensionList</returns>
        System.Threading.Tasks.Task<DimensionList> DimensionsListDimensionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Dimensions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DimensionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DimensionList>> DimensionsListDimensionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDimensionsApi : IDimensionsApiSync, IDimensionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DimensionsApi : IDimensionsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DimensionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DimensionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DimensionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DimensionsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DimensionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DimensionsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DimensionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DimensionsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Update Generation &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        public GenerationLevel DimensionsEditDimGenerations(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = DimensionsEditDimGenerationsWithHttpInfo(applicationName, databaseName, dimensionName, generationNumber, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Generation &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        public EssSharp.Client.ApiResponse<GenerationLevel> DimensionsEditDimGenerationsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsEditDimGenerations");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsEditDimGenerations");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsEditDimGenerations");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DimensionsApi->DimensionsEditDimGenerations");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("generationNumber", EssSharp.Client.ClientUtils.ParameterToString(generationNumber)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsEditDimGenerations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations/{generationNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsEditDimGenerations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Generation &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        public async System.Threading.Tasks.Task<GenerationLevel> DimensionsEditDimGenerationsAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = await DimensionsEditDimGenerationsWithHttpInfoAsync(applicationName, databaseName, dimensionName, generationNumber, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Generation &lt;p&gt;Updates and returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Generation details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<GenerationLevel>> DimensionsEditDimGenerationsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsEditDimGenerations");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsEditDimGenerations");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsEditDimGenerations");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DimensionsApi->DimensionsEditDimGenerations");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("generationNumber", EssSharp.Client.ClientUtils.ParameterToString(generationNumber)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsEditDimGenerations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations/{generationNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsEditDimGenerations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Level &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        public GenerationLevel DimensionsEditDimLevels(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = DimensionsEditDimLevelsWithHttpInfo(applicationName, databaseName, dimensionName, levelNumber, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Level &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        public EssSharp.Client.ApiResponse<GenerationLevel> DimensionsEditDimLevelsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsEditDimLevels");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsEditDimLevels");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsEditDimLevels");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DimensionsApi->DimensionsEditDimLevels");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("levelNumber", EssSharp.Client.ClientUtils.ParameterToString(levelNumber)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsEditDimLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels/{levelNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsEditDimLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Level &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        public async System.Threading.Tasks.Task<GenerationLevel> DimensionsEditDimLevelsAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = await DimensionsEditDimLevelsWithHttpInfoAsync(applicationName, databaseName, dimensionName, levelNumber, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Level &lt;p&gt;Updates and returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Level details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<GenerationLevel>> DimensionsEditDimLevelsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, GenerationLevel body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsEditDimLevels");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsEditDimLevels");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsEditDimLevels");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DimensionsApi->DimensionsEditDimLevels");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("levelNumber", EssSharp.Client.ClientUtils.ParameterToString(levelNumber)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsEditDimLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels/{levelNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsEditDimLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Generation &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        public GenerationLevel DimensionsGetDimGenerations(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = DimensionsGetDimGenerationsWithHttpInfo(applicationName, databaseName, dimensionName, generationNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Generation &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        public EssSharp.Client.ApiResponse<GenerationLevel> DimensionsGetDimGenerationsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsGetDimGenerations");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsGetDimGenerations");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsGetDimGenerations");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("generationNumber", EssSharp.Client.ClientUtils.ParameterToString(generationNumber)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsGetDimGenerations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations/{generationNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsGetDimGenerations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Generation &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        public async System.Threading.Tasks.Task<GenerationLevel> DimensionsGetDimGenerationsAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = await DimensionsGetDimGenerationsWithHttpInfoAsync(applicationName, databaseName, dimensionName, generationNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Generation &lt;p&gt;Returns generation details of a dimension, based on the specified generation number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="generationNumber">&lt;p&gt;Generation number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<GenerationLevel>> DimensionsGetDimGenerationsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int generationNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsGetDimGenerations");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsGetDimGenerations");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsGetDimGenerations");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("generationNumber", EssSharp.Client.ClientUtils.ParameterToString(generationNumber)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsGetDimGenerations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations/{generationNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsGetDimGenerations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Level &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevel</returns>
        public GenerationLevel DimensionsGetDimLevels(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = DimensionsGetDimLevelsWithHttpInfo(applicationName, databaseName, dimensionName, levelNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Level &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevel</returns>
        public EssSharp.Client.ApiResponse<GenerationLevel> DimensionsGetDimLevelsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsGetDimLevels");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsGetDimLevels");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsGetDimLevels");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("levelNumber", EssSharp.Client.ClientUtils.ParameterToString(levelNumber)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsGetDimLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels/{levelNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsGetDimLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Level &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevel</returns>
        public async System.Threading.Tasks.Task<GenerationLevel> DimensionsGetDimLevelsAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<GenerationLevel> localVarResponse = await DimensionsGetDimLevelsWithHttpInfoAsync(applicationName, databaseName, dimensionName, levelNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Level &lt;p&gt;Returns level details of a dimension, based on the specified level number, application, and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="levelNumber">&lt;p&gt;Level number.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevel)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<GenerationLevel>> DimensionsGetDimLevelsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int levelNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsGetDimLevels");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsGetDimLevels");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsGetDimLevels");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("levelNumber", EssSharp.Client.ClientUtils.ParameterToString(levelNumber)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsGetDimLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GenerationLevel>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels/{levelNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsGetDimLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Generations &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevelList</returns>
        public GenerationLevelList DimensionsListDimGenerations(string applicationName, string databaseName, string dimensionName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<GenerationLevelList> localVarResponse = DimensionsListDimGenerationsWithHttpInfo(applicationName, databaseName, dimensionName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Generations &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevelList</returns>
        public EssSharp.Client.ApiResponse<GenerationLevelList> DimensionsListDimGenerationsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsListDimGenerations");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsListDimGenerations");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsListDimGenerations");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsListDimGenerations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GenerationLevelList>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsListDimGenerations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Generations &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevelList</returns>
        public async System.Threading.Tasks.Task<GenerationLevelList> DimensionsListDimGenerationsAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<GenerationLevelList> localVarResponse = await DimensionsListDimGenerationsWithHttpInfoAsync(applicationName, databaseName, dimensionName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Generations &lt;p&gt;Returns all the generations of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevelList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<GenerationLevelList>> DimensionsListDimGenerationsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsListDimGenerations");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsListDimGenerations");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsListDimGenerations");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsListDimGenerations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GenerationLevelList>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/generations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsListDimGenerations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Levels &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationLevelList</returns>
        public GenerationLevelList DimensionsListDimLevels(string applicationName, string databaseName, string dimensionName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<GenerationLevelList> localVarResponse = DimensionsListDimLevelsWithHttpInfo(applicationName, databaseName, dimensionName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Levels &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationLevelList</returns>
        public EssSharp.Client.ApiResponse<GenerationLevelList> DimensionsListDimLevelsWithHttpInfo(string applicationName, string databaseName, string dimensionName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsListDimLevels");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsListDimLevels");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsListDimLevels");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsListDimLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GenerationLevelList>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsListDimLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Levels &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationLevelList</returns>
        public async System.Threading.Tasks.Task<GenerationLevelList> DimensionsListDimLevelsAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<GenerationLevelList> localVarResponse = await DimensionsListDimLevelsWithHttpInfoAsync(applicationName, databaseName, dimensionName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Levels &lt;p&gt;Returns all the levels of a dimension from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="dimensionName">&lt;p&gt;Dimension name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationLevelList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<GenerationLevelList>> DimensionsListDimLevelsWithHttpInfoAsync(string applicationName, string databaseName, string dimensionName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsListDimLevels");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsListDimLevels");
            }

            // verify the required parameter 'dimensionName' is set
            if (dimensionName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'dimensionName' when calling DimensionsApi->DimensionsListDimLevels");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("dimensionName", EssSharp.Client.ClientUtils.ParameterToString(dimensionName)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsListDimLevels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GenerationLevelList>("/applications/{applicationName}/databases/{databaseName}/dimensions/{dimensionName}/levels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsListDimLevels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Dimensions &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DimensionList</returns>
        public DimensionList DimensionsListDimensions(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<DimensionList> localVarResponse = DimensionsListDimensionsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Dimensions &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DimensionList</returns>
        public EssSharp.Client.ApiResponse<DimensionList> DimensionsListDimensionsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsListDimensions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsListDimensions");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsListDimensions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DimensionList>("/applications/{applicationName}/databases/{databaseName}/dimensions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsListDimensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Dimensions &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DimensionList</returns>
        public async System.Threading.Tasks.Task<DimensionList> DimensionsListDimensionsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<DimensionList> localVarResponse = await DimensionsListDimensionsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Dimensions &lt;p&gt;Returns all the dimensions from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DimensionList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<DimensionList>> DimensionsListDimensionsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DimensionsApi->DimensionsListDimensions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DimensionsApi->DimensionsListDimensions");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DimensionsApi.DimensionsListDimensions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DimensionList>("/applications/{applicationName}/databases/{databaseName}/dimensions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DimensionsListDimensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
