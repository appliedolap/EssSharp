/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScriptsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfo</returns>
        UserGroupProvisionInfo ScriptsAddScriptPermission(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0);

        /// <summary>
        /// Add Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfo</returns>
        ApiResponse<UserGroupProvisionInfo> ScriptsAddScriptPermissionWithHttpInfo(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0);
        /// <summary>
        /// Copy Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        Script ScriptsCopyScript(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0);

        /// <summary>
        /// Copy Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> ScriptsCopyScriptWithHttpInfo(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0);
        /// <summary>
        /// Create Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        Script ScriptsCreateScript(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> ScriptsCreateScriptWithHttpInfo(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScriptsDeleteScript(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScriptsDeleteScriptWithHttpInfo(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        Script ScriptsEditScript(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> ScriptsEditScriptWithHttpInfo(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Essbase Script RTSVs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RTSVList&gt;</returns>
        List<RTSVList> ScriptsGetRTSVsForScripts(string applicationName, string databaseName, string scriptName, int operationIndex = 0);

        /// <summary>
        /// Get Essbase Script RTSVs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RTSVList&gt;</returns>
        ApiResponse<List<RTSVList>> ScriptsGetRTSVsForScriptsWithHttpInfo(string applicationName, string databaseName, string scriptName, int operationIndex = 0);
        /// <summary>
        /// Get Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        Script ScriptsGetScript(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> ScriptsGetScriptWithHttpInfo(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Essbase Script Contents
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptContent</returns>
        ScriptContent ScriptsGetScriptContent(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Essbase Script Contents
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptContent</returns>
        ApiResponse<ScriptContent> ScriptsGetScriptContentWithHttpInfo(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserGroupProvisionInfoList&gt;</returns>
        List<UserGroupProvisionInfoList> ScriptsGetScriptPermissions(string applicationName, string databaseName, string scriptName, int operationIndex = 0);

        /// <summary>
        /// Get Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserGroupProvisionInfoList&gt;</returns>
        ApiResponse<List<UserGroupProvisionInfoList>> ScriptsGetScriptPermissionsWithHttpInfo(string applicationName, string databaseName, string scriptName, int operationIndex = 0);
        /// <summary>
        /// List Essbase Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptList</returns>
        ScriptList ScriptsListScripts(string applicationName, string databaseName, string file = default(string), int operationIndex = 0);

        /// <summary>
        /// List Essbase Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptList</returns>
        ApiResponse<ScriptList> ScriptsListScriptsWithHttpInfo(string applicationName, string databaseName, string file = default(string), int operationIndex = 0);
        /// <summary>
        /// Remove Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScriptsRemoveScriptPermission(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0);

        /// <summary>
        /// Remove Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScriptsRemoveScriptPermissionWithHttpInfo(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0);
        /// <summary>
        /// Rename Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        Script ScriptsRenameScript(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0);

        /// <summary>
        /// Rename Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> ScriptsRenameScriptWithHttpInfo(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0);
        /// <summary>
        /// Validate Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScriptsValidateScript(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0);

        /// <summary>
        /// Validate Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScriptsValidateScriptWithHttpInfo(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScriptsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfo</returns>
        System.Threading.Tasks.Task<UserGroupProvisionInfo> ScriptsAddScriptPermissionAsync(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroupProvisionInfo>> ScriptsAddScriptPermissionWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> ScriptsCopyScriptAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> ScriptsCopyScriptWithHttpInfoAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> ScriptsCreateScriptAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> ScriptsCreateScriptWithHttpInfoAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScriptsDeleteScriptAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScriptsDeleteScriptWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> ScriptsEditScriptAsync(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> ScriptsEditScriptWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Essbase Script RTSVs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RTSVList&gt;</returns>
        System.Threading.Tasks.Task<List<RTSVList>> ScriptsGetRTSVsForScriptsAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Essbase Script RTSVs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RTSVList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RTSVList>>> ScriptsGetRTSVsForScriptsWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> ScriptsGetScriptAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> ScriptsGetScriptWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Essbase Script Contents
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptContent</returns>
        System.Threading.Tasks.Task<ScriptContent> ScriptsGetScriptContentAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Essbase Script Contents
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScriptContent>> ScriptsGetScriptContentWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserGroupProvisionInfoList&gt;</returns>
        System.Threading.Tasks.Task<List<UserGroupProvisionInfoList>> ScriptsGetScriptPermissionsAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserGroupProvisionInfoList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserGroupProvisionInfoList>>> ScriptsGetScriptPermissionsWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Essbase Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptList</returns>
        System.Threading.Tasks.Task<ScriptList> ScriptsListScriptsAsync(string applicationName, string databaseName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Essbase Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScriptList>> ScriptsListScriptsWithHttpInfoAsync(string applicationName, string databaseName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScriptsRemoveScriptPermissionAsync(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Essbase Script Permissions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScriptsRemoveScriptPermissionWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rename Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> ScriptsRenameScriptAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rename Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> ScriptsRenameScriptWithHttpInfoAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScriptsValidateScriptAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Essbase Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScriptsValidateScriptWithHttpInfoAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScriptsApi : IScriptsApiSync, IScriptsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScriptsApi : IScriptsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScriptsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScriptsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScriptsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScriptsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Essbase Script Permissions &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfo</returns>
        public UserGroupProvisionInfo ScriptsAddScriptPermission(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfo> localVarResponse = ScriptsAddScriptPermissionWithHttpInfo(applicationName, databaseName, scriptName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Essbase Script Permissions &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfo</returns>
        public EssSharp.Client.ApiResponse<UserGroupProvisionInfo> ScriptsAddScriptPermissionWithHttpInfo(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsAddScriptPermission");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsAddScriptPermission");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsAddScriptPermission");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsAddScriptPermission");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsAddScriptPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserGroupProvisionInfo>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsAddScriptPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Essbase Script Permissions &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfo</returns>
        public async System.Threading.Tasks.Task<UserGroupProvisionInfo> ScriptsAddScriptPermissionAsync(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfo> localVarResponse = await ScriptsAddScriptPermissionWithHttpInfoAsync(applicationName, databaseName, scriptName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Essbase Script Permissions &lt;p&gt;Adds permissions to the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfo)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<UserGroupProvisionInfo>> ScriptsAddScriptPermissionWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, UserGroupProvisionInfo body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsAddScriptPermission");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsAddScriptPermission");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsAddScriptPermission");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsAddScriptPermission");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsAddScriptPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserGroupProvisionInfo>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsAddScriptPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Essbase Script &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        public Script ScriptsCopyScript(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = ScriptsCopyScriptWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Essbase Script &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        public EssSharp.Client.ApiResponse<Script> ScriptsCopyScriptWithHttpInfo(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsCopyScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsCopyScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsCopyScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsCopyScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsCopyScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Essbase Script &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> ScriptsCopyScriptAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = await ScriptsCopyScriptWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Essbase Script &lt;p&gt;Copies the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script copy details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Script>> ScriptsCopyScriptWithHttpInfoAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsCopyScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsCopyScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsCopyScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsCopyScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsCopyScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Essbase Script &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        public Script ScriptsCreateScript(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = ScriptsCreateScriptWithHttpInfo(applicationName, databaseName, body, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Essbase Script &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        public EssSharp.Client.ApiResponse<Script> ScriptsCreateScriptWithHttpInfo(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsCreateScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsCreateScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsCreateScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsCreateScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Script>("/applications/{applicationName}/databases/{databaseName}/scripts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsCreateScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Essbase Script &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> ScriptsCreateScriptAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = await ScriptsCreateScriptWithHttpInfoAsync(applicationName, databaseName, body, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Essbase Script &lt;p&gt;Creates the script in the specified application and database and returns the created script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Script>> ScriptsCreateScriptWithHttpInfoAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsCreateScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsCreateScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsCreateScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsCreateScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Script>("/applications/{applicationName}/databases/{databaseName}/scripts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsCreateScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Essbase Script &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScriptsDeleteScript(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0)
        {
            ScriptsDeleteScriptWithHttpInfo(applicationName, databaseName, scriptName, file);
        }

        /// <summary>
        /// Delete Essbase Script &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScriptsDeleteScriptWithHttpInfo(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsDeleteScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsDeleteScript");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsDeleteScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsDeleteScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsDeleteScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Essbase Script &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScriptsDeleteScriptAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScriptsDeleteScriptWithHttpInfoAsync(applicationName, databaseName, scriptName, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Essbase Script &lt;p&gt;Deletes the specified script in the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScriptsDeleteScriptWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsDeleteScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsDeleteScript");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsDeleteScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsDeleteScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsDeleteScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Essbase Script &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        public Script ScriptsEditScript(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = ScriptsEditScriptWithHttpInfo(applicationName, databaseName, scriptName, body, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Essbase Script &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        public EssSharp.Client.ApiResponse<Script> ScriptsEditScriptWithHttpInfo(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsEditScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsEditScript");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsEditScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsEditScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsEditScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsEditScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Essbase Script &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> ScriptsEditScriptAsync(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = await ScriptsEditScriptWithHttpInfoAsync(applicationName, databaseName, scriptName, body, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Essbase Script &lt;p&gt;Updates the specified script in the specified application and database and returns the updated script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Script>> ScriptsEditScriptWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsEditScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsEditScript");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsEditScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsEditScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsEditScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsEditScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script RTSVs &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RTSVList&gt;</returns>
        public List<RTSVList> ScriptsGetRTSVsForScripts(string applicationName, string databaseName, string scriptName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<List<RTSVList>> localVarResponse = ScriptsGetRTSVsForScriptsWithHttpInfo(applicationName, databaseName, scriptName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script RTSVs &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RTSVList&gt;</returns>
        public EssSharp.Client.ApiResponse<List<RTSVList>> ScriptsGetRTSVsForScriptsWithHttpInfo(string applicationName, string databaseName, string scriptName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetRTSVsForScripts");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetRTSVsForScripts");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetRTSVsForScripts");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetRTSVsForScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RTSVList>>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/rtsv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetRTSVsForScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script RTSVs &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RTSVList&gt;</returns>
        public async System.Threading.Tasks.Task<List<RTSVList>> ScriptsGetRTSVsForScriptsAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<List<RTSVList>> localVarResponse = await ScriptsGetRTSVsForScriptsWithHttpInfoAsync(applicationName, databaseName, scriptName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script RTSVs &lt;p&gt;Returns the runtime substitution variables used in the specified script name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RTSVList&gt;)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<List<RTSVList>>> ScriptsGetRTSVsForScriptsWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetRTSVsForScripts");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetRTSVsForScripts");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetRTSVsForScripts");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetRTSVsForScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RTSVList>>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/rtsv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetRTSVsForScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        public Script ScriptsGetScript(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = ScriptsGetScriptWithHttpInfo(applicationName, databaseName, scriptName, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        public EssSharp.Client.ApiResponse<Script> ScriptsGetScriptWithHttpInfo(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetScript");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> ScriptsGetScriptAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = await ScriptsGetScriptWithHttpInfoAsync(applicationName, databaseName, scriptName, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script &lt;p&gt;Returns the named script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Script>> ScriptsGetScriptWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetScript");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script Contents &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptContent</returns>
        public ScriptContent ScriptsGetScriptContent(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScriptContent> localVarResponse = ScriptsGetScriptContentWithHttpInfo(applicationName, databaseName, scriptName, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script Contents &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptContent</returns>
        public EssSharp.Client.ApiResponse<ScriptContent> ScriptsGetScriptContentWithHttpInfo(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetScriptContent");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetScriptContent");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetScriptContent");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetScriptContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScriptContent>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/content", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetScriptContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script Contents &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptContent</returns>
        public async System.Threading.Tasks.Task<ScriptContent> ScriptsGetScriptContentAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScriptContent> localVarResponse = await ScriptsGetScriptContentWithHttpInfoAsync(applicationName, databaseName, scriptName, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script Contents &lt;p&gt;Returns the contents of the specified script from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptContent)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScriptContent>> ScriptsGetScriptContentWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetScriptContent");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetScriptContent");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetScriptContent");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetScriptContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScriptContent>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetScriptContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script Permissions &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserGroupProvisionInfoList&gt;</returns>
        public List<UserGroupProvisionInfoList> ScriptsGetScriptPermissions(string applicationName, string databaseName, string scriptName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<List<UserGroupProvisionInfoList>> localVarResponse = ScriptsGetScriptPermissionsWithHttpInfo(applicationName, databaseName, scriptName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script Permissions &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserGroupProvisionInfoList&gt;</returns>
        public EssSharp.Client.ApiResponse<List<UserGroupProvisionInfoList>> ScriptsGetScriptPermissionsWithHttpInfo(string applicationName, string databaseName, string scriptName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetScriptPermissions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetScriptPermissions");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetScriptPermissions");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetScriptPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserGroupProvisionInfoList>>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetScriptPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Essbase Script Permissions &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserGroupProvisionInfoList&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserGroupProvisionInfoList>> ScriptsGetScriptPermissionsAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<List<UserGroupProvisionInfoList>> localVarResponse = await ScriptsGetScriptPermissionsWithHttpInfoAsync(applicationName, databaseName, scriptName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Essbase Script Permissions &lt;p&gt;Retrieves permissions for the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserGroupProvisionInfoList&gt;)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<List<UserGroupProvisionInfoList>>> ScriptsGetScriptPermissionsWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsGetScriptPermissions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsGetScriptPermissions");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsGetScriptPermissions");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsGetScriptPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserGroupProvisionInfoList>>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsGetScriptPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Essbase Scripts &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptList</returns>
        public ScriptList ScriptsListScripts(string applicationName, string databaseName, string file = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScriptList> localVarResponse = ScriptsListScriptsWithHttpInfo(applicationName, databaseName, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Essbase Scripts &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptList</returns>
        public EssSharp.Client.ApiResponse<ScriptList> ScriptsListScriptsWithHttpInfo(string applicationName, string databaseName, string file = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsListScripts");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsListScripts");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsListScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScriptList>("/applications/{applicationName}/databases/{databaseName}/scripts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsListScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Essbase Scripts &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptList</returns>
        public async System.Threading.Tasks.Task<ScriptList> ScriptsListScriptsAsync(string applicationName, string databaseName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScriptList> localVarResponse = await ScriptsListScriptsWithHttpInfoAsync(applicationName, databaseName, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Essbase Scripts &lt;p&gt;Returns all the scripts from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;Type of script file.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScriptList>> ScriptsListScriptsWithHttpInfoAsync(string applicationName, string databaseName, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsListScripts");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsListScripts");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsListScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScriptList>("/applications/{applicationName}/databases/{databaseName}/scripts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsListScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Essbase Script Permissions &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScriptsRemoveScriptPermission(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0)
        {
            ScriptsRemoveScriptPermissionWithHttpInfo(applicationName, databaseName, scriptName, userGroupId, group);
        }

        /// <summary>
        /// Remove Essbase Script Permissions &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScriptsRemoveScriptPermissionWithHttpInfo(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }

            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userGroupId", EssSharp.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsRemoveScriptPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions/{userGroupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsRemoveScriptPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Essbase Script Permissions &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScriptsRemoveScriptPermissionAsync(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScriptsRemoveScriptPermissionWithHttpInfoAsync(applicationName, databaseName, scriptName, userGroupId, group, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Essbase Script Permissions &lt;p&gt;Removes permissions from the specified script for the specified user or group. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="scriptName">&lt;p&gt;Script name.&lt;/p&gt;</param>
        /// <param name="userGroupId">&lt;p&gt;Id of the user or group.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;True if the userGroupId refers to a group.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScriptsRemoveScriptPermissionWithHttpInfoAsync(string applicationName, string databaseName, string scriptName, string userGroupId, bool group, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }

            // verify the required parameter 'scriptName' is set
            if (scriptName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptName' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }

            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling ScriptsApi->ScriptsRemoveScriptPermission");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptName", EssSharp.Client.ClientUtils.ParameterToString(scriptName)); // path parameter
            localVarRequestOptions.PathParameters.Add("userGroupId", EssSharp.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsRemoveScriptPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/databases/{databaseName}/scripts/{scriptName}/permissions/{userGroupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsRemoveScriptPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Essbase Script &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Script</returns>
        public Script ScriptsRenameScript(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = ScriptsRenameScriptWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename Essbase Script &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Script</returns>
        public EssSharp.Client.ApiResponse<Script> ScriptsRenameScriptWithHttpInfo(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsRenameScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsRenameScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsRenameScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsRenameScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/rename", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsRenameScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Essbase Script &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> ScriptsRenameScriptAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Script> localVarResponse = await ScriptsRenameScriptWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename Essbase Script &lt;p&gt;Renames the script in the specified application and database and returns the created script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script rename details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Script>> ScriptsRenameScriptWithHttpInfoAsync(string applicationName, string databaseName, ScriptCopy body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsRenameScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsRenameScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsRenameScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsRenameScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Script>("/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsRenameScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Essbase Script &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScriptsValidateScript(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0)
        {
            ScriptsValidateScriptWithHttpInfo(applicationName, databaseName, body, file);
        }

        /// <summary>
        /// Validate Essbase Script &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScriptsValidateScriptWithHttpInfo(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsValidateScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsValidateScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsValidateScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsValidateScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsValidateScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Essbase Script &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScriptsValidateScriptAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScriptsValidateScriptWithHttpInfoAsync(applicationName, databaseName, body, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate Essbase Script &lt;p&gt;Validates the specified script. Applicable only for calculation scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt;</param>
        /// <param name="file">&lt;p&gt;File.&lt;/p&gt; (optional, default to &quot;calc&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScriptsValidateScriptWithHttpInfoAsync(string applicationName, string databaseName, Script body, string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ScriptsApi->ScriptsValidateScript");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling ScriptsApi->ScriptsValidateScript");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ScriptsApi->ScriptsValidateScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "file", file));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScriptsApi.ScriptsValidateScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/scripts/scriptops/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScriptsValidateScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
