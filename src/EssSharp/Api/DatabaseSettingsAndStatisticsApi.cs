/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatabaseSettingsAndStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export Query Tracking
        /// </summary>
        /// <remarks>
        /// Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DatabaseSettingsStatisticsExportQueryData(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0);

        /// <summary>
        /// Export Query Tracking
        /// </summary>
        /// <remarks>
        /// Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DatabaseSettingsStatisticsExportQueryDataWithHttpInfo(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0);
        /// <summary>
        /// Get Buffer Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BufferSettings</returns>
        BufferSettings DatabaseSettingsStatisticsGetBuffersSettings(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Buffer Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BufferSettings</returns>
        ApiResponse<BufferSettings> DatabaseSettingsStatisticsGetBuffersSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Cache Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheSettings</returns>
        CacheSettings DatabaseSettingsStatisticsGetCachesSettings(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Cache Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheSettings</returns>
        ApiResponse<CacheSettings> DatabaseSettingsStatisticsGetCachesSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Calculation Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalculationSettings</returns>
        CalculationSettings DatabaseSettingsStatisticsGetCalculationSettings(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Calculation Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalculationSettings</returns>
        ApiResponse<CalculationSettings> DatabaseSettingsStatisticsGetCalculationSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Compression Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompressionSettings</returns>
        CompressionSettings DatabaseSettingsStatisticsGetCompressSettings(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Compression Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompressionSettings</returns>
        ApiResponse<CompressionSettings> DatabaseSettingsStatisticsGetCompressSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Attribute Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeOutlineSettings</returns>
        AttributeOutlineSettings DatabaseSettingsStatisticsGetOutlineAttributesSettings(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Attribute Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeOutlineSettings</returns>
        ApiResponse<AttributeOutlineSettings> DatabaseSettingsStatisticsGetOutlineAttributesSettingsWithHttpInfo(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutlineSettingsList</returns>
        OutlineSettingsList DatabaseSettingsStatisticsGetOutlineSettings(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutlineSettingsList</returns>
        ApiResponse<OutlineSettingsList> DatabaseSettingsStatisticsGetOutlineSettingsWithHttpInfo(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Date Formats
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutlineDateFormat</returns>
        OutlineDateFormat DatabaseSettingsStatisticsGetOutlineSettingsDateFormats(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Date Formats
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutlineDateFormat</returns>
        ApiResponse<OutlineDateFormat> DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Runtime Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeStatistics</returns>
        RuntimeStatistics DatabaseSettingsStatisticsGetRuntimeStats(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Runtime Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeStatistics</returns>
        ApiResponse<RuntimeStatistics> DatabaseSettingsStatisticsGetRuntimeStatsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsList</returns>
        SettingsList DatabaseSettingsStatisticsGetSettings(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsList</returns>
        ApiResponse<SettingsList> DatabaseSettingsStatisticsGetSettingsWithHttpInfo(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartupSettings</returns>
        StartupSettings DatabaseSettingsStatisticsGetStartupSettings(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartupSettings</returns>
        ApiResponse<StartupSettings> DatabaseSettingsStatisticsGetStartupSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get General Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatisticsList</returns>
        StatisticsList DatabaseSettingsStatisticsGetStatistics(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get General Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatisticsList</returns>
        ApiResponse<StatisticsList> DatabaseSettingsStatisticsGetStatisticsWithHttpInfo(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Storage Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StorageStatistics</returns>
        StorageStatistics DatabaseSettingsStatisticsGetStorageStats(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Storage Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StorageStatistics</returns>
        ApiResponse<StorageStatistics> DatabaseSettingsStatisticsGetStorageStatsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Get Transaction Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionSettings</returns>
        TransactionSettings DatabaseSettingsStatisticsGetTransSettings(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Transaction Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionSettings</returns>
        ApiResponse<TransactionSettings> DatabaseSettingsStatisticsGetTransSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Import Query Tracking
        /// </summary>
        /// <remarks>
        /// Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DatabaseSettingsStatisticsImportQueryData(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0);

        /// <summary>
        /// Import Query Tracking
        /// </summary>
        /// <remarks>
        /// Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DatabaseSettingsStatisticsImportQueryDataWithHttpInfo(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0);
        /// <summary>
        /// Update Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DatabaseSettingsStatisticsUpdateOutlineSettings(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0);

        /// <summary>
        /// Update Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DatabaseSettingsStatisticsUpdateOutlineSettingsWithHttpInfo(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0);
        /// <summary>
        /// Update Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DatabaseSettingsStatisticsUpdateSettings(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0);

        /// <summary>
        /// Update Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DatabaseSettingsStatisticsUpdateSettingsWithHttpInfo(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatabaseSettingsAndStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Export Query Tracking
        /// </summary>
        /// <remarks>
        /// Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DatabaseSettingsStatisticsExportQueryDataAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Query Tracking
        /// </summary>
        /// <remarks>
        /// Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DatabaseSettingsStatisticsExportQueryDataWithHttpInfoAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Buffer Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BufferSettings</returns>
        System.Threading.Tasks.Task<BufferSettings> DatabaseSettingsStatisticsGetBuffersSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Buffer Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BufferSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<BufferSettings>> DatabaseSettingsStatisticsGetBuffersSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Cache Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheSettings</returns>
        System.Threading.Tasks.Task<CacheSettings> DatabaseSettingsStatisticsGetCachesSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Cache Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheSettings>> DatabaseSettingsStatisticsGetCachesSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Calculation Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationSettings</returns>
        System.Threading.Tasks.Task<CalculationSettings> DatabaseSettingsStatisticsGetCalculationSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Calculation Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculationSettings>> DatabaseSettingsStatisticsGetCalculationSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Compression Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompressionSettings</returns>
        System.Threading.Tasks.Task<CompressionSettings> DatabaseSettingsStatisticsGetCompressSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Compression Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompressionSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompressionSettings>> DatabaseSettingsStatisticsGetCompressSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Attribute Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeOutlineSettings</returns>
        System.Threading.Tasks.Task<AttributeOutlineSettings> DatabaseSettingsStatisticsGetOutlineAttributesSettingsAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Attribute Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeOutlineSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeOutlineSettings>> DatabaseSettingsStatisticsGetOutlineAttributesSettingsWithHttpInfoAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutlineSettingsList</returns>
        System.Threading.Tasks.Task<OutlineSettingsList> DatabaseSettingsStatisticsGetOutlineSettingsAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutlineSettingsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutlineSettingsList>> DatabaseSettingsStatisticsGetOutlineSettingsWithHttpInfoAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Date Formats
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutlineDateFormat</returns>
        System.Threading.Tasks.Task<OutlineDateFormat> DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Date Formats
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutlineDateFormat)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutlineDateFormat>> DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Runtime Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeStatistics</returns>
        System.Threading.Tasks.Task<RuntimeStatistics> DatabaseSettingsStatisticsGetRuntimeStatsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Runtime Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuntimeStatistics>> DatabaseSettingsStatisticsGetRuntimeStatsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsList</returns>
        System.Threading.Tasks.Task<SettingsList> DatabaseSettingsStatisticsGetSettingsAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get General Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsList>> DatabaseSettingsStatisticsGetSettingsWithHttpInfoAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartupSettings</returns>
        System.Threading.Tasks.Task<StartupSettings> DatabaseSettingsStatisticsGetStartupSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Startup Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartupSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartupSettings>> DatabaseSettingsStatisticsGetStartupSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get General Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsList</returns>
        System.Threading.Tasks.Task<StatisticsList> DatabaseSettingsStatisticsGetStatisticsAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get General Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsList>> DatabaseSettingsStatisticsGetStatisticsWithHttpInfoAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Storage Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageStatistics</returns>
        System.Threading.Tasks.Task<StorageStatistics> DatabaseSettingsStatisticsGetStorageStatsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Storage Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageStatistics>> DatabaseSettingsStatisticsGetStorageStatsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transaction Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionSettings</returns>
        System.Threading.Tasks.Task<TransactionSettings> DatabaseSettingsStatisticsGetTransSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transaction Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionSettings>> DatabaseSettingsStatisticsGetTransSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Query Tracking
        /// </summary>
        /// <remarks>
        /// Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DatabaseSettingsStatisticsImportQueryDataAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Query Tracking
        /// </summary>
        /// <remarks>
        /// Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DatabaseSettingsStatisticsImportQueryDataWithHttpInfoAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DatabaseSettingsStatisticsUpdateOutlineSettingsAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Outline Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DatabaseSettingsStatisticsUpdateOutlineSettingsWithHttpInfoAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DatabaseSettingsStatisticsUpdateSettingsAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Settings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DatabaseSettingsStatisticsUpdateSettingsWithHttpInfoAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatabaseSettingsAndStatisticsApi : IDatabaseSettingsAndStatisticsApiSync, IDatabaseSettingsAndStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatabaseSettingsAndStatisticsApi : IDatabaseSettingsAndStatisticsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseSettingsAndStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatabaseSettingsAndStatisticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseSettingsAndStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatabaseSettingsAndStatisticsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseSettingsAndStatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatabaseSettingsAndStatisticsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseSettingsAndStatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatabaseSettingsAndStatisticsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Export Query Tracking Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DatabaseSettingsStatisticsExportQueryData(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0)
        {
            DatabaseSettingsStatisticsExportQueryDataWithHttpInfo(applicationName, databaseName, body);
        }

        /// <summary>
        /// Export Query Tracking Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> DatabaseSettingsStatisticsExportQueryDataWithHttpInfo(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsExportQueryData");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsExportQueryData");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsExportQueryData");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsExportQueryData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/settings/querytracking/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsExportQueryData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Query Tracking Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DatabaseSettingsStatisticsExportQueryDataAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DatabaseSettingsStatisticsExportQueryDataWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Export Query Tracking Export query data from an aggregate storage database to a text file. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> DatabaseSettingsStatisticsExportQueryDataWithHttpInfoAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsExportQueryData");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsExportQueryData");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsExportQueryData");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsExportQueryData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/settings/querytracking/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsExportQueryData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Buffer Settings &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BufferSettings</returns>
        public BufferSettings DatabaseSettingsStatisticsGetBuffersSettings(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<BufferSettings> localVarResponse = DatabaseSettingsStatisticsGetBuffersSettingsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Buffer Settings &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BufferSettings</returns>
        public EssSharp.Client.ApiResponse<BufferSettings> DatabaseSettingsStatisticsGetBuffersSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetBuffersSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetBuffersSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetBuffersSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BufferSettings>("/applications/{applicationName}/databases/{databaseName}/settings/buffers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetBuffersSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Buffer Settings &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BufferSettings</returns>
        public async System.Threading.Tasks.Task<BufferSettings> DatabaseSettingsStatisticsGetBuffersSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<BufferSettings> localVarResponse = await DatabaseSettingsStatisticsGetBuffersSettingsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Buffer Settings &lt;p&gt;Returns buffer settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BufferSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<BufferSettings>> DatabaseSettingsStatisticsGetBuffersSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetBuffersSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetBuffersSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetBuffersSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BufferSettings>("/applications/{applicationName}/databases/{databaseName}/settings/buffers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetBuffersSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cache Settings &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheSettings</returns>
        public CacheSettings DatabaseSettingsStatisticsGetCachesSettings(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CacheSettings> localVarResponse = DatabaseSettingsStatisticsGetCachesSettingsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cache Settings &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheSettings</returns>
        public EssSharp.Client.ApiResponse<CacheSettings> DatabaseSettingsStatisticsGetCachesSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCachesSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCachesSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetCachesSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CacheSettings>("/applications/{applicationName}/databases/{databaseName}/settings/caches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetCachesSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cache Settings &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheSettings</returns>
        public async System.Threading.Tasks.Task<CacheSettings> DatabaseSettingsStatisticsGetCachesSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CacheSettings> localVarResponse = await DatabaseSettingsStatisticsGetCachesSettingsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cache Settings &lt;p&gt;Returns cache settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CacheSettings>> DatabaseSettingsStatisticsGetCachesSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCachesSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCachesSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetCachesSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CacheSettings>("/applications/{applicationName}/databases/{databaseName}/settings/caches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetCachesSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Calculation Settings &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CalculationSettings</returns>
        public CalculationSettings DatabaseSettingsStatisticsGetCalculationSettings(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CalculationSettings> localVarResponse = DatabaseSettingsStatisticsGetCalculationSettingsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Calculation Settings &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CalculationSettings</returns>
        public EssSharp.Client.ApiResponse<CalculationSettings> DatabaseSettingsStatisticsGetCalculationSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCalculationSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCalculationSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetCalculationSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CalculationSettings>("/applications/{applicationName}/databases/{databaseName}/settings/calculation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetCalculationSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Calculation Settings &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationSettings</returns>
        public async System.Threading.Tasks.Task<CalculationSettings> DatabaseSettingsStatisticsGetCalculationSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CalculationSettings> localVarResponse = await DatabaseSettingsStatisticsGetCalculationSettingsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Calculation Settings &lt;p&gt;Returns calculation settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CalculationSettings>> DatabaseSettingsStatisticsGetCalculationSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCalculationSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCalculationSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetCalculationSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CalculationSettings>("/applications/{applicationName}/databases/{databaseName}/settings/calculation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetCalculationSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Compression Settings &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompressionSettings</returns>
        public CompressionSettings DatabaseSettingsStatisticsGetCompressSettings(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CompressionSettings> localVarResponse = DatabaseSettingsStatisticsGetCompressSettingsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Compression Settings &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompressionSettings</returns>
        public EssSharp.Client.ApiResponse<CompressionSettings> DatabaseSettingsStatisticsGetCompressSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCompressSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCompressSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetCompressSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CompressionSettings>("/applications/{applicationName}/databases/{databaseName}/settings/compression", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetCompressSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Compression Settings &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompressionSettings</returns>
        public async System.Threading.Tasks.Task<CompressionSettings> DatabaseSettingsStatisticsGetCompressSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CompressionSettings> localVarResponse = await DatabaseSettingsStatisticsGetCompressSettingsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Compression Settings &lt;p&gt;Returns compression settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompressionSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CompressionSettings>> DatabaseSettingsStatisticsGetCompressSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCompressSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetCompressSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetCompressSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompressionSettings>("/applications/{applicationName}/databases/{databaseName}/settings/compression", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetCompressSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Attribute Settings &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeOutlineSettings</returns>
        public AttributeOutlineSettings DatabaseSettingsStatisticsGetOutlineAttributesSettings(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<AttributeOutlineSettings> localVarResponse = DatabaseSettingsStatisticsGetOutlineAttributesSettingsWithHttpInfo(applicationName, databaseName, connectionName, applicationNameForConnection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Attribute Settings &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeOutlineSettings</returns>
        public EssSharp.Client.ApiResponse<AttributeOutlineSettings> DatabaseSettingsStatisticsGetOutlineAttributesSettingsWithHttpInfo(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineAttributesSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineAttributesSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetOutlineAttributesSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AttributeOutlineSettings>("/applications/{applicationName}/databases/{databaseName}/settings/outline/attributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetOutlineAttributesSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Attribute Settings &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeOutlineSettings</returns>
        public async System.Threading.Tasks.Task<AttributeOutlineSettings> DatabaseSettingsStatisticsGetOutlineAttributesSettingsAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<AttributeOutlineSettings> localVarResponse = await DatabaseSettingsStatisticsGetOutlineAttributesSettingsWithHttpInfoAsync(applicationName, databaseName, connectionName, applicationNameForConnection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Attribute Settings &lt;p&gt;Returns attribute settings of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeOutlineSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<AttributeOutlineSettings>> DatabaseSettingsStatisticsGetOutlineAttributesSettingsWithHttpInfoAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineAttributesSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineAttributesSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetOutlineAttributesSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AttributeOutlineSettings>("/applications/{applicationName}/databases/{databaseName}/settings/outline/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetOutlineAttributesSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Outline Settings &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutlineSettingsList</returns>
        public OutlineSettingsList DatabaseSettingsStatisticsGetOutlineSettings(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<OutlineSettingsList> localVarResponse = DatabaseSettingsStatisticsGetOutlineSettingsWithHttpInfo(applicationName, databaseName, connectionName, applicationNameForConnection, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Outline Settings &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutlineSettingsList</returns>
        public EssSharp.Client.ApiResponse<OutlineSettingsList> DatabaseSettingsStatisticsGetOutlineSettingsWithHttpInfo(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetOutlineSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OutlineSettingsList>("/applications/{applicationName}/databases/{databaseName}/settings/outline", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetOutlineSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Outline Settings &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutlineSettingsList</returns>
        public async System.Threading.Tasks.Task<OutlineSettingsList> DatabaseSettingsStatisticsGetOutlineSettingsAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<OutlineSettingsList> localVarResponse = await DatabaseSettingsStatisticsGetOutlineSettingsWithHttpInfoAsync(applicationName, databaseName, connectionName, applicationNameForConnection, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Outline Settings &lt;p&gt;Returns outline settings of the specified database. Additional settings can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connectionName">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general outline settings (this is the default). Other options available are &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutlineSettingsList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<OutlineSettingsList>> DatabaseSettingsStatisticsGetOutlineSettingsWithHttpInfoAsync(string applicationName, string databaseName, string connectionName = default(string), string applicationNameForConnection = default(string), string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (connectionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connectionName", connectionName));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetOutlineSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutlineSettingsList>("/applications/{applicationName}/databases/{databaseName}/settings/outline", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetOutlineSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Date Formats &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutlineDateFormat</returns>
        public OutlineDateFormat DatabaseSettingsStatisticsGetOutlineSettingsDateFormats(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<OutlineDateFormat> localVarResponse = DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Date Formats &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutlineDateFormat</returns>
        public EssSharp.Client.ApiResponse<OutlineDateFormat> DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettingsDateFormats");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettingsDateFormats");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetOutlineSettingsDateFormats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OutlineDateFormat>("/applications/{applicationName}/databases/{databaseName}/settings/outline/dateformats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetOutlineSettingsDateFormats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Date Formats &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutlineDateFormat</returns>
        public async System.Threading.Tasks.Task<OutlineDateFormat> DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<OutlineDateFormat> localVarResponse = await DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Date Formats &lt;p&gt;Returns date formats of the outline from the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutlineDateFormat)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<OutlineDateFormat>> DatabaseSettingsStatisticsGetOutlineSettingsDateFormatsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettingsDateFormats");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetOutlineSettingsDateFormats");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetOutlineSettingsDateFormats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutlineDateFormat>("/applications/{applicationName}/databases/{databaseName}/settings/outline/dateformats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetOutlineSettingsDateFormats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Runtime Statistics &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuntimeStatistics</returns>
        public RuntimeStatistics DatabaseSettingsStatisticsGetRuntimeStats(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<RuntimeStatistics> localVarResponse = DatabaseSettingsStatisticsGetRuntimeStatsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Runtime Statistics &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuntimeStatistics</returns>
        public EssSharp.Client.ApiResponse<RuntimeStatistics> DatabaseSettingsStatisticsGetRuntimeStatsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetRuntimeStats");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetRuntimeStats");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetRuntimeStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuntimeStatistics>("/applications/{applicationName}/databases/{databaseName}/statistics/runtime", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetRuntimeStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Runtime Statistics &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeStatistics</returns>
        public async System.Threading.Tasks.Task<RuntimeStatistics> DatabaseSettingsStatisticsGetRuntimeStatsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<RuntimeStatistics> localVarResponse = await DatabaseSettingsStatisticsGetRuntimeStatsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Runtime Statistics &lt;p&gt;Returns runtime statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeStatistics)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<RuntimeStatistics>> DatabaseSettingsStatisticsGetRuntimeStatsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetRuntimeStats");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetRuntimeStats");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetRuntimeStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuntimeStatistics>("/applications/{applicationName}/databases/{databaseName}/statistics/runtime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetRuntimeStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get General Settings &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsList</returns>
        public SettingsList DatabaseSettingsStatisticsGetSettings(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<SettingsList> localVarResponse = DatabaseSettingsStatisticsGetSettingsWithHttpInfo(applicationName, databaseName, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get General Settings &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsList</returns>
        public EssSharp.Client.ApiResponse<SettingsList> DatabaseSettingsStatisticsGetSettingsWithHttpInfo(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SettingsList>("/applications/{applicationName}/databases/{databaseName}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get General Settings &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsList</returns>
        public async System.Threading.Tasks.Task<SettingsList> DatabaseSettingsStatisticsGetSettingsAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<SettingsList> localVarResponse = await DatabaseSettingsStatisticsGetSettingsWithHttpInfoAsync(applicationName, databaseName, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get General Settings &lt;p&gt;Returns general settings of the specified database. Additional groups of settings can be expanded using the &lt;code&gt;expand&lt;/code&gt; parameter. If &lt;code&gt;expand&lt;/code&gt; is none, links are returned for the additional groups of settings.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general settings, with links for other grouped settings. Other expansion options available: &lt;ul&gt;&lt;li&gt;&lt;code&gt;startup&lt;/code&gt; (block storage cubes only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;calculation&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;caches&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; (block storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;compression&lt;/code&gt; (aggregate storage only)&lt;/li&gt;&lt;li&gt;&lt;code&gt;all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<SettingsList>> DatabaseSettingsStatisticsGetSettingsWithHttpInfoAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SettingsList>("/applications/{applicationName}/databases/{databaseName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Startup Settings &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartupSettings</returns>
        public StartupSettings DatabaseSettingsStatisticsGetStartupSettings(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StartupSettings> localVarResponse = DatabaseSettingsStatisticsGetStartupSettingsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Startup Settings &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartupSettings</returns>
        public EssSharp.Client.ApiResponse<StartupSettings> DatabaseSettingsStatisticsGetStartupSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStartupSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStartupSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetStartupSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StartupSettings>("/applications/{applicationName}/databases/{databaseName}/settings/startup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetStartupSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Startup Settings &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartupSettings</returns>
        public async System.Threading.Tasks.Task<StartupSettings> DatabaseSettingsStatisticsGetStartupSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StartupSettings> localVarResponse = await DatabaseSettingsStatisticsGetStartupSettingsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Startup Settings &lt;p&gt;Returns startup settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartupSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StartupSettings>> DatabaseSettingsStatisticsGetStartupSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStartupSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStartupSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetStartupSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StartupSettings>("/applications/{applicationName}/databases/{databaseName}/settings/startup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetStartupSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get General Statistics &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatisticsList</returns>
        public StatisticsList DatabaseSettingsStatisticsGetStatistics(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StatisticsList> localVarResponse = DatabaseSettingsStatisticsGetStatisticsWithHttpInfo(applicationName, databaseName, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get General Statistics &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatisticsList</returns>
        public EssSharp.Client.ApiResponse<StatisticsList> DatabaseSettingsStatisticsGetStatisticsWithHttpInfo(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStatistics");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStatistics");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StatisticsList>("/applications/{applicationName}/databases/{databaseName}/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get General Statistics &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsList</returns>
        public async System.Threading.Tasks.Task<StatisticsList> DatabaseSettingsStatisticsGetStatisticsAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StatisticsList> localVarResponse = await DatabaseSettingsStatisticsGetStatisticsWithHttpInfoAsync(applicationName, databaseName, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get General Statistics &lt;p&gt;Returns general statistics of the specified database. Additional statistics can be retrieved using the &lt;code&gt;expand&lt;/code&gt; parameter.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Use &lt;code&gt;none&lt;/code&gt; to show only general statistics (this is the default). Other options available: &lt;code&gt;storage&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; (optional, default to none)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StatisticsList>> DatabaseSettingsStatisticsGetStatisticsWithHttpInfoAsync(string applicationName, string databaseName, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStatistics");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStatistics");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatisticsList>("/applications/{applicationName}/databases/{databaseName}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Storage Statistics &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StorageStatistics</returns>
        public StorageStatistics DatabaseSettingsStatisticsGetStorageStats(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<StorageStatistics> localVarResponse = DatabaseSettingsStatisticsGetStorageStatsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Storage Statistics &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StorageStatistics</returns>
        public EssSharp.Client.ApiResponse<StorageStatistics> DatabaseSettingsStatisticsGetStorageStatsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStorageStats");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStorageStats");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetStorageStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageStatistics>("/applications/{applicationName}/databases/{databaseName}/statistics/storage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetStorageStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Storage Statistics &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageStatistics</returns>
        public async System.Threading.Tasks.Task<StorageStatistics> DatabaseSettingsStatisticsGetStorageStatsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<StorageStatistics> localVarResponse = await DatabaseSettingsStatisticsGetStorageStatsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Storage Statistics &lt;p&gt;Returns storage statistics of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageStatistics)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<StorageStatistics>> DatabaseSettingsStatisticsGetStorageStatsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStorageStats");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetStorageStats");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetStorageStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StorageStatistics>("/applications/{applicationName}/databases/{databaseName}/statistics/storage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetStorageStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Settings &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionSettings</returns>
        public TransactionSettings DatabaseSettingsStatisticsGetTransSettings(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<TransactionSettings> localVarResponse = DatabaseSettingsStatisticsGetTransSettingsWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Settings &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionSettings</returns>
        public EssSharp.Client.ApiResponse<TransactionSettings> DatabaseSettingsStatisticsGetTransSettingsWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetTransSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetTransSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetTransSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionSettings>("/applications/{applicationName}/databases/{databaseName}/settings/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetTransSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Settings &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionSettings</returns>
        public async System.Threading.Tasks.Task<TransactionSettings> DatabaseSettingsStatisticsGetTransSettingsAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<TransactionSettings> localVarResponse = await DatabaseSettingsStatisticsGetTransSettingsWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Settings &lt;p&gt;Returns transaction settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionSettings)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<TransactionSettings>> DatabaseSettingsStatisticsGetTransSettingsWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetTransSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsGetTransSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsGetTransSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionSettings>("/applications/{applicationName}/databases/{databaseName}/settings/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsGetTransSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Query Tracking Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DatabaseSettingsStatisticsImportQueryData(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0)
        {
            DatabaseSettingsStatisticsImportQueryDataWithHttpInfo(applicationName, databaseName, body);
        }

        /// <summary>
        /// Import Query Tracking Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> DatabaseSettingsStatisticsImportQueryDataWithHttpInfo(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsImportQueryData");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsImportQueryData");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsImportQueryData");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsImportQueryData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/settings/querytracking/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsImportQueryData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Query Tracking Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DatabaseSettingsStatisticsImportQueryDataAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DatabaseSettingsStatisticsImportQueryDataWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Import Query Tracking Import query data, which was previously exported from an aggregate storage database to a text file, to an aggregate storage database. To do this operation query tracking must be enabled for given aggregate storage database.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">Application name</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="body">File Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> DatabaseSettingsStatisticsImportQueryDataWithHttpInfoAsync(string applicationName, string databaseName, QueryTrackingInputs body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsImportQueryData");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsImportQueryData");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsImportQueryData");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsImportQueryData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/settings/querytracking/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsImportQueryData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Outline Settings &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DatabaseSettingsStatisticsUpdateOutlineSettings(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0)
        {
            DatabaseSettingsStatisticsUpdateOutlineSettingsWithHttpInfo(applicationName, databaseName, body);
        }

        /// <summary>
        /// Update Outline Settings &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> DatabaseSettingsStatisticsUpdateOutlineSettingsWithHttpInfo(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateOutlineSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateOutlineSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateOutlineSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsUpdateOutlineSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/applications/{applicationName}/databases/{databaseName}/settings/outline", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsUpdateOutlineSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Outline Settings &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DatabaseSettingsStatisticsUpdateOutlineSettingsAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DatabaseSettingsStatisticsUpdateOutlineSettingsWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Outline Settings &lt;p&gt;Updates the outline settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Outline settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> DatabaseSettingsStatisticsUpdateOutlineSettingsWithHttpInfoAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateOutlineSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateOutlineSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateOutlineSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsUpdateOutlineSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/applications/{applicationName}/databases/{databaseName}/settings/outline", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsUpdateOutlineSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Settings &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DatabaseSettingsStatisticsUpdateSettings(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0)
        {
            DatabaseSettingsStatisticsUpdateSettingsWithHttpInfo(applicationName, databaseName, body);
        }

        /// <summary>
        /// Update Settings &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> DatabaseSettingsStatisticsUpdateSettingsWithHttpInfo(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateSettings");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsUpdateSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/applications/{applicationName}/databases/{databaseName}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsUpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Settings &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DatabaseSettingsStatisticsUpdateSettingsAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DatabaseSettingsStatisticsUpdateSettingsWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Settings &lt;p&gt;Updates the settings of the specified database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Database settings patch list.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> DatabaseSettingsStatisticsUpdateSettingsWithHttpInfoAsync(string applicationName, string databaseName, List<PatchElement> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateSettings");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling DatabaseSettingsAndStatisticsApi->DatabaseSettingsStatisticsUpdateSettings");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DatabaseSettingsAndStatisticsApi.DatabaseSettingsStatisticsUpdateSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/applications/{applicationName}/databases/{databaseName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DatabaseSettingsStatisticsUpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
