/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExecuteMDXApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Run MDX Query
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MDXExecuteMDX(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0);

        /// <summary>
        /// Run MDX Query
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MDXExecuteMDXWithHttpInfo(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0);
        /// <summary>
        /// Run MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MDXExecutenq(string application, string database, string name, string format = default(string), int operationIndex = 0);

        /// <summary>
        /// Run MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MDXExecutenqWithHttpInfo(string application, string database, string name, string format = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExecuteMDXApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Run MDX Query
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MDXExecuteMDXAsync(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run MDX Query
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MDXExecuteMDXWithHttpInfoAsync(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MDXExecutenqAsync(string application, string database, string name, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MDXExecutenqWithHttpInfoAsync(string application, string database, string name, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExecuteMDXApi : IExecuteMDXApiSync, IExecuteMDXApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExecuteMDXApi : IExecuteMDXApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExecuteMDXApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExecuteMDXApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExecuteMDXApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExecuteMDXApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExecuteMDXApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExecuteMDXApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExecuteMDXApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExecuteMDXApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Run MDX Query &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MDXExecuteMDX(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Object> localVarResponse = MDXExecuteMDXWithHttpInfo(application, database, format, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run MDX Query &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public EssSharp.Client.ApiResponse<Object> MDXExecuteMDXWithHttpInfo(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling ExecuteMDXApi->MDXExecuteMDX");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling ExecuteMDXApi->MDXExecuteMDX");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "text/html"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ExecuteMDXApi.MDXExecuteMDX";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{application}/databases/{database}/mdx", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MDXExecuteMDX", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run MDX Query &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MDXExecuteMDXAsync(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Object> localVarResponse = await MDXExecuteMDXWithHttpInfoAsync(application, database, format, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run MDX Query &lt;p&gt;Runs an MDX query, returning the results in the selected format (JSON, HTML, Excel, or CSV).&lt;/p&gt; &lt;p&gt;Results are an MDX output set in the requested format (the default is JSON). The output set contains metadata (including page, column, and row tuples) followed by data (a tuple for each row).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="body">&lt;p&gt;MDX query and preferences.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> MDXExecuteMDXWithHttpInfoAsync(string application, string database, string format = default(string), MDXInput body = default(MDXInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling ExecuteMDXApi->MDXExecuteMDX");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling ExecuteMDXApi->MDXExecuteMDX");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "text/html"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ExecuteMDXApi.MDXExecuteMDX";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{application}/databases/{database}/mdx", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MDXExecuteMDX", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run MDX Report &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MDXExecutenq(string application, string database, string name, string format = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Object> localVarResponse = MDXExecutenqWithHttpInfo(application, database, name, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run MDX Report &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public EssSharp.Client.ApiResponse<Object> MDXExecutenqWithHttpInfo(string application, string database, string name, string format = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling ExecuteMDXApi->MDXExecutenq");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling ExecuteMDXApi->MDXExecutenq");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'name' when calling ExecuteMDXApi->MDXExecutenq");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", EssSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "ExecuteMDXApi.MDXExecutenq";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/applications/{application}/databases/{database}/mdx/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MDXExecutenq", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run MDX Report &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MDXExecutenqAsync(string application, string database, string name, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Object> localVarResponse = await MDXExecutenqWithHttpInfoAsync(application, database, name, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run MDX Report &lt;p&gt;Runs an MDX report, returning the results in the selected format (JSON, HTML, Excel, or CSV). An MDX report is saved in the cube context.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="name">&lt;p&gt;MDX report name.&lt;/p&gt;</param>
        /// <param name="format">&lt;p&gt;Result format.&lt;/p&gt; (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> MDXExecutenqWithHttpInfoAsync(string application, string database, string name, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling ExecuteMDXApi->MDXExecutenq");
            }

            // verify the required parameter 'database' is set
            if (database == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'database' when calling ExecuteMDXApi->MDXExecutenq");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'name' when calling ExecuteMDXApi->MDXExecutenq");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("database", EssSharp.Client.ClientUtils.ParameterToString(database)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", EssSharp.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "ExecuteMDXApi.MDXExecutenq";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/applications/{application}/databases/{database}/mdx/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MDXExecutenq", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
