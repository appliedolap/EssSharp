/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutlineViewerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Text Lists
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void OutlineGetAllSmartList(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Text Lists
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OutlineGetAllSmartListWithHttpInfo(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Member Ancestors
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberBean</returns>
        MemberBean OutlineGetAncestorsMemberInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Member Ancestors
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberBean</returns>
        ApiResponse<MemberBean> OutlineGetAncestorsMemberInfoWithHttpInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Descendants Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        int OutlineGetDescendantsCount(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Descendants Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> OutlineGetDescendantsCountWithHttpInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Member Info
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberBean</returns>
        MemberBean OutlineGetMemberInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Member Info
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberBean</returns>
        ApiResponse<MemberBean> OutlineGetMemberInfoWithHttpInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Dimensions, Children, or Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestCollectionResponse</returns>
        RestCollectionResponse OutlineGetMembers(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Dimensions, Children, or Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestCollectionResponse</returns>
        ApiResponse<RestCollectionResponse> OutlineGetMembersWithHttpInfo(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Export Outline to XML
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void OutlineGetOutlineXML(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0);

        /// <summary>
        /// Export Outline to XML
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OutlineGetOutlineXMLWithHttpInfo(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutlineViewerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Text Lists
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OutlineGetAllSmartListAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Text Lists
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OutlineGetAllSmartListWithHttpInfoAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Member Ancestors
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberBean</returns>
        System.Threading.Tasks.Task<MemberBean> OutlineGetAncestorsMemberInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Member Ancestors
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberBean>> OutlineGetAncestorsMemberInfoWithHttpInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Descendants Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> OutlineGetDescendantsCountAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Descendants Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> OutlineGetDescendantsCountWithHttpInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Member Info
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberBean</returns>
        System.Threading.Tasks.Task<MemberBean> OutlineGetMemberInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Member Info
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberBean>> OutlineGetMemberInfoWithHttpInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Dimensions, Children, or Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestCollectionResponse</returns>
        System.Threading.Tasks.Task<RestCollectionResponse> OutlineGetMembersAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Dimensions, Children, or Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestCollectionResponse>> OutlineGetMembersWithHttpInfoAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Outline to XML
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OutlineGetOutlineXMLAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Outline to XML
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OutlineGetOutlineXMLWithHttpInfoAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutlineViewerApi : IOutlineViewerApiSync, IOutlineViewerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OutlineViewerApi : IOutlineViewerApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OutlineViewerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OutlineViewerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutlineViewerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OutlineViewerApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutlineViewerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OutlineViewerApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutlineViewerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OutlineViewerApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Text Lists &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void OutlineGetAllSmartList(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0)
        {
            OutlineGetAllSmartListWithHttpInfo(app, cube, connection, applicationNameForConnection, accept);
        }

        /// <summary>
        /// Get Text Lists &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> OutlineGetAllSmartListWithHttpInfo(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetAllSmartList");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetAllSmartList");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("accept", EssSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetAllSmartList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/outline/{app}/{cube}/settings/smartlist", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetAllSmartList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Text Lists &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OutlineGetAllSmartListAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await OutlineGetAllSmartListWithHttpInfoAsync(app, cube, connection, applicationNameForConnection, accept, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Text Lists &lt;p&gt;Returns all text lists associated with the database outline.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="cube"></param>
        /// <param name="connection"> (optional)</param>
        /// <param name="applicationNameForConnection"> (optional)</param>
        /// <param name="accept"> (optional, default to &quot;application/json&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> OutlineGetAllSmartListWithHttpInfoAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string accept = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetAllSmartList");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetAllSmartList");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("accept", EssSharp.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetAllSmartList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/outline/{app}/{cube}/settings/smartlist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetAllSmartList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Ancestors &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberBean</returns>
        public MemberBean OutlineGetAncestorsMemberInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<MemberBean> localVarResponse = OutlineGetAncestorsMemberInfoWithHttpInfo(app, cube, memberUniqueName, connection, applicationNameForConnection, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Ancestors &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberBean</returns>
        public EssSharp.Client.ApiResponse<MemberBean> OutlineGetAncestorsMemberInfoWithHttpInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetAncestorsMemberInfo");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetAncestorsMemberInfo");
            }

            // verify the required parameter 'memberUniqueName' is set
            if (memberUniqueName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'memberUniqueName' when calling OutlineViewerApi->OutlineGetAncestorsMemberInfo");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberUniqueName", EssSharp.Client.ClientUtils.ParameterToString(memberUniqueName)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetAncestorsMemberInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberBean>("/outline/{app}/{cube}/ancestors/{memberUniqueName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetAncestorsMemberInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Ancestors &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberBean</returns>
        public async System.Threading.Tasks.Task<MemberBean> OutlineGetAncestorsMemberInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<MemberBean> localVarResponse = await OutlineGetAncestorsMemberInfoWithHttpInfoAsync(app, cube, memberUniqueName, connection, applicationNameForConnection, fields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Ancestors &lt;p&gt;Returns all ancestors of the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<MemberBean>> OutlineGetAncestorsMemberInfoWithHttpInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetAncestorsMemberInfo");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetAncestorsMemberInfo");
            }

            // verify the required parameter 'memberUniqueName' is set
            if (memberUniqueName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'memberUniqueName' when calling OutlineViewerApi->OutlineGetAncestorsMemberInfo");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberUniqueName", EssSharp.Client.ClientUtils.ParameterToString(memberUniqueName)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetAncestorsMemberInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberBean>("/outline/{app}/{cube}/ancestors/{memberUniqueName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetAncestorsMemberInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Descendants Count &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        public int OutlineGetDescendantsCount(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<int> localVarResponse = OutlineGetDescendantsCountWithHttpInfo(app, cube, memberUniqueName, connection, applicationNameForConnection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Descendants Count &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        public EssSharp.Client.ApiResponse<int> OutlineGetDescendantsCountWithHttpInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetDescendantsCount");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetDescendantsCount");
            }

            // verify the required parameter 'memberUniqueName' is set
            if (memberUniqueName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'memberUniqueName' when calling OutlineViewerApi->OutlineGetDescendantsCount");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberUniqueName", EssSharp.Client.ClientUtils.ParameterToString(memberUniqueName)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetDescendantsCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/outline/{app}/{cube}/descendantsCount/{memberUniqueName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetDescendantsCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Descendants Count &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> OutlineGetDescendantsCountAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<int> localVarResponse = await OutlineGetDescendantsCountWithHttpInfoAsync(app, cube, memberUniqueName, connection, applicationNameForConnection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Descendants Count &lt;p&gt;Returns descendants count for the requested member.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name).&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<int>> OutlineGetDescendantsCountWithHttpInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetDescendantsCount");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetDescendantsCount");
            }

            // verify the required parameter 'memberUniqueName' is set
            if (memberUniqueName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'memberUniqueName' when calling OutlineViewerApi->OutlineGetDescendantsCount");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberUniqueName", EssSharp.Client.ClientUtils.ParameterToString(memberUniqueName)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetDescendantsCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/outline/{app}/{cube}/descendantsCount/{memberUniqueName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetDescendantsCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Info &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberBean</returns>
        public MemberBean OutlineGetMemberInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<MemberBean> localVarResponse = OutlineGetMemberInfoWithHttpInfo(app, cube, memberUniqueName, connection, applicationNameForConnection, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Info &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberBean</returns>
        public EssSharp.Client.ApiResponse<MemberBean> OutlineGetMemberInfoWithHttpInfo(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetMemberInfo");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetMemberInfo");
            }

            // verify the required parameter 'memberUniqueName' is set
            if (memberUniqueName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'memberUniqueName' when calling OutlineViewerApi->OutlineGetMemberInfo");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberUniqueName", EssSharp.Client.ClientUtils.ParameterToString(memberUniqueName)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetMemberInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberBean>("/outline/{app}/{cube}/{memberUniqueName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetMemberInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Info &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberBean</returns>
        public async System.Threading.Tasks.Task<MemberBean> OutlineGetMemberInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<MemberBean> localVarResponse = await OutlineGetMemberInfoWithHttpInfoAsync(app, cube, memberUniqueName, connection, applicationNameForConnection, fields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Info &lt;p&gt;Returns either all member properties, or requested member properties.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="memberUniqueName">&lt;p&gt;Unique member name (fully qualified name). Can be a member name, a member ID, or an alias. If the member name is non unique (in a duplicate member enabled outline), use a fully qualified member name or use the member ID.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<MemberBean>> OutlineGetMemberInfoWithHttpInfoAsync(string app, string cube, string memberUniqueName, string connection = default(string), string applicationNameForConnection = default(string), string fields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetMemberInfo");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetMemberInfo");
            }

            // verify the required parameter 'memberUniqueName' is set
            if (memberUniqueName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'memberUniqueName' when calling OutlineViewerApi->OutlineGetMemberInfo");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberUniqueName", EssSharp.Client.ClientUtils.ParameterToString(memberUniqueName)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetMemberInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberBean>("/outline/{app}/{cube}/{memberUniqueName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetMemberInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dimensions, Children, or Search &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestCollectionResponse</returns>
        public RestCollectionResponse OutlineGetMembers(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<RestCollectionResponse> localVarResponse = OutlineGetMembersWithHttpInfo(app, cube, connection, applicationNameForConnection, keyword, matchWholeWord, parent, parentUniqueName, isMbrId, fields, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dimensions, Children, or Search &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestCollectionResponse</returns>
        public EssSharp.Client.ApiResponse<RestCollectionResponse> OutlineGetMembersWithHttpInfo(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetMembers");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetMembers");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (matchWholeWord != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "matchWholeWord", matchWholeWord));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (parentUniqueName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "parentUniqueName", parentUniqueName));
            }
            if (isMbrId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "isMbrId", isMbrId));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RestCollectionResponse>("/outline/{app}/{cube}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dimensions, Children, or Search &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestCollectionResponse</returns>
        public async System.Threading.Tasks.Task<RestCollectionResponse> OutlineGetMembersAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<RestCollectionResponse> localVarResponse = await OutlineGetMembersWithHttpInfoAsync(app, cube, connection, applicationNameForConnection, keyword, matchWholeWord, parent, parentUniqueName, isMbrId, fields, offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dimensions, Children, or Search &lt;p&gt;Returns a list of dimensions when no parameters are provided. Returns a list of child members when &lt;i&gt;parent&lt;/i&gt; or &lt;i&gt;parentUniqueName&lt;/i&gt; parameters are provided. Returns search results when a search keyword parameter is used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="cube">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="connection">&lt;p&gt;Essbase connection name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationNameForConnection">&lt;p&gt;Application name for connection.&lt;/p&gt; (optional)</param>
        /// <param name="keyword">&lt;p&gt;Keyword to search for member.&lt;/p&gt; (optional)</param>
        /// <param name="matchWholeWord">&lt;p&gt;Match member name with keyword.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="parent">&lt;p&gt;Parent name.&lt;/p&gt; (optional)</param>
        /// <param name="parentUniqueName">&lt;p&gt;Parent unique name (fully qualified).&lt;/p&gt; (optional)</param>
        /// <param name="isMbrId">&lt;p&gt;Parent ID.&lt;/p&gt; (optional)</param>
        /// <param name="fields">&lt;p&gt;Comma-separated list of member properties to fetch.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of members to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of members to return.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<RestCollectionResponse>> OutlineGetMembersWithHttpInfoAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), string keyword = default(string), bool? matchWholeWord = default(bool?), string parent = default(string), string parentUniqueName = default(string), string isMbrId = default(string), string fields = default(string), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetMembers");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetMembers");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (matchWholeWord != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "matchWholeWord", matchWholeWord));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (parentUniqueName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "parentUniqueName", parentUniqueName));
            }
            if (isMbrId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "isMbrId", isMbrId));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestCollectionResponse>("/outline/{app}/{cube}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Outline to XML &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void OutlineGetOutlineXML(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0)
        {
            OutlineGetOutlineXMLWithHttpInfo(app, cube, connection, applicationNameForConnection, body);
        }

        /// <summary>
        /// Export Outline to XML &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> OutlineGetOutlineXMLWithHttpInfo(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetOutlineXML");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetOutlineXML");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetOutlineXML";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/outline/{app}/{cube}/xml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetOutlineXML", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Outline to XML &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OutlineGetOutlineXMLAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await OutlineGetOutlineXMLWithHttpInfoAsync(app, cube, connection, applicationNameForConnection, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Export Outline to XML &lt;p&gt;Exports the outline to XML. If tree is true, then aliasTable will be ignored. Tree mode exports only member names. If aliasTable is provided, then only alias values of the members for the specified alias table will be exported.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">Application name.</param>
        /// <param name="cube">Database name.</param>
        /// <param name="connection">Essbase connection name. (optional)</param>
        /// <param name="applicationNameForConnection">Application name for connection. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> OutlineGetOutlineXMLWithHttpInfoAsync(string app, string cube, string connection = default(string), string applicationNameForConnection = default(string), ExportOptions body = default(ExportOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling OutlineViewerApi->OutlineGetOutlineXML");
            }

            // verify the required parameter 'cube' is set
            if (cube == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'cube' when calling OutlineViewerApi->OutlineGetOutlineXML");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("cube", EssSharp.Client.ClientUtils.ParameterToString(cube)); // path parameter
            if (connection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "connection", connection));
            }
            if (applicationNameForConnection != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationNameForConnection", applicationNameForConnection));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OutlineViewerApi.OutlineGetOutlineXML";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/outline/{app}/{cube}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutlineGetOutlineXML", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
