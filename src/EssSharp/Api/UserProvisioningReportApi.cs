/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserProvisioningReportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        DatabaseProvisionReportItemList UserProvisioningReportGetFilters(string application, string userId, int operationIndex = 0);

        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        ApiResponse<DatabaseProvisionReportItemList> UserProvisioningReportGetFiltersWithHttpInfo(string application, string userId, int operationIndex = 0);
        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MainProvisionReport</returns>
        MainProvisionReport UserProvisioningReportGetFullReport(string userId, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MainProvisionReport</returns>
        ApiResponse<MainProvisionReport> UserProvisioningReportGetFullReportWithHttpInfo(string userId, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Applications Provisioning Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItemList</returns>
        ApplicationProvisionReportItemList UserProvisioningReportGetReportForAllApplications(string userId, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Applications Provisioning Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItemList</returns>
        ApiResponse<ApplicationProvisionReportItemList> UserProvisioningReportGetReportForAllApplicationsWithHttpInfo(string userId, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItem</returns>
        ApplicationProvisionReportItem UserProvisioningReportGetReportForApplication(string application, string userId, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItem</returns>
        ApiResponse<ApplicationProvisionReportItem> UserProvisioningReportGetReportForApplicationWithHttpInfo(string application, string userId, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisionReportItemList</returns>
        ProvisionReportItemList UserProvisioningReportGetRoles(string application, string userId, int operationIndex = 0);

        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisionReportItemList</returns>
        ApiResponse<ProvisionReportItemList> UserProvisioningReportGetRolesWithHttpInfo(string application, string userId, int operationIndex = 0);
        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        DatabaseProvisionReportItemList UserProvisioningReportGetScripts(string application, string userId, int operationIndex = 0);

        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        ApiResponse<DatabaseProvisionReportItemList> UserProvisioningReportGetScriptsWithHttpInfo(string application, string userId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserProvisioningReportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        System.Threading.Tasks.Task<DatabaseProvisionReportItemList> UserProvisioningReportGetFiltersAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Filters Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatabaseProvisionReportItemList>> UserProvisioningReportGetFiltersWithHttpInfoAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MainProvisionReport</returns>
        System.Threading.Tasks.Task<MainProvisionReport> UserProvisioningReportGetFullReportAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Full Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MainProvisionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainProvisionReport>> UserProvisioningReportGetFullReportWithHttpInfoAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Applications Provisioning Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItemList</returns>
        System.Threading.Tasks.Task<ApplicationProvisionReportItemList> UserProvisioningReportGetReportForAllApplicationsAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Applications Provisioning Reports
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationProvisionReportItemList>> UserProvisioningReportGetReportForAllApplicationsWithHttpInfoAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItem</returns>
        System.Threading.Tasks.Task<ApplicationProvisionReportItem> UserProvisioningReportGetReportForApplicationAsync(string application, string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationProvisionReportItem>> UserProvisioningReportGetReportForApplicationWithHttpInfoAsync(string application, string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisionReportItemList</returns>
        System.Threading.Tasks.Task<ProvisionReportItemList> UserProvisioningReportGetRolesAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Roles Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvisionReportItemList>> UserProvisioningReportGetRolesWithHttpInfoAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        System.Threading.Tasks.Task<DatabaseProvisionReportItemList> UserProvisioningReportGetScriptsAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scripts Provisioning Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatabaseProvisionReportItemList>> UserProvisioningReportGetScriptsWithHttpInfoAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserProvisioningReportApi : IUserProvisioningReportApiSync, IUserProvisioningReportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserProvisioningReportApi : IUserProvisioningReportApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProvisioningReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserProvisioningReportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProvisioningReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserProvisioningReportApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProvisioningReportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserProvisioningReportApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProvisioningReportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserProvisioningReportApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        public DatabaseProvisionReportItemList UserProvisioningReportGetFilters(string application, string userId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = UserProvisioningReportGetFiltersWithHttpInfo(application, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> UserProvisioningReportGetFiltersWithHttpInfo(string application, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetFilters");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetFilters");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetFilters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatabaseProvisionReportItemList>("/users/{userId}/provisionReport/applications/{application}/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<DatabaseProvisionReportItemList> UserProvisioningReportGetFiltersAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = await UserProvisioningReportGetFiltersWithHttpInfoAsync(application, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filters Provisioning Report &lt;p&gt;Gets a filters provisioning report for the specified application. The logged in user must have at least Database Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList>> UserProvisioningReportGetFiltersWithHttpInfoAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetFilters");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetFilters");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetFilters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatabaseProvisionReportItemList>("/users/{userId}/provisionReport/applications/{application}/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MainProvisionReport</returns>
        public MainProvisionReport UserProvisioningReportGetFullReport(string userId, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<MainProvisionReport> localVarResponse = UserProvisioningReportGetFullReportWithHttpInfo(userId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MainProvisionReport</returns>
        public EssSharp.Client.ApiResponse<MainProvisionReport> UserProvisioningReportGetFullReportWithHttpInfo(string userId, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetFullReport");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetFullReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MainProvisionReport>("/users/{userId}/provisionReport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetFullReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MainProvisionReport</returns>
        public async System.Threading.Tasks.Task<MainProvisionReport> UserProvisioningReportGetFullReportAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<MainProvisionReport> localVarResponse = await UserProvisioningReportGetFullReportWithHttpInfoAsync(userId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Full Provisioning Report &lt;p&gt;Gets a full provisioning report. Service roles are included in the response only if the logged in user has Service Administrator role. The logged in user must have at least Database Manager role for an application to get its provisioning report. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MainProvisionReport)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<MainProvisionReport>> UserProvisioningReportGetFullReportWithHttpInfoAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetFullReport");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetFullReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MainProvisionReport>("/users/{userId}/provisionReport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetFullReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Applications Provisioning Reports &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItemList</returns>
        public ApplicationProvisionReportItemList UserProvisioningReportGetReportForAllApplications(string userId, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList> localVarResponse = UserProvisioningReportGetReportForAllApplicationsWithHttpInfo(userId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Applications Provisioning Reports &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList> UserProvisioningReportGetReportForAllApplicationsWithHttpInfo(string userId, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetReportForAllApplications");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetReportForAllApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationProvisionReportItemList>("/users/{userId}/provisionReport/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetReportForAllApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Applications Provisioning Reports &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<ApplicationProvisionReportItemList> UserProvisioningReportGetReportForAllApplicationsAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList> localVarResponse = await UserProvisioningReportGetReportForAllApplicationsWithHttpInfoAsync(userId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Applications Provisioning Reports &lt;p&gt;Gets a provisioning report for all the applications. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to applications are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all applications is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationProvisionReportItemList>> UserProvisioningReportGetReportForAllApplicationsWithHttpInfoAsync(string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetReportForAllApplications");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetReportForAllApplications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationProvisionReportItemList>("/users/{userId}/provisionReport/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetReportForAllApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationProvisionReportItem</returns>
        public ApplicationProvisionReportItem UserProvisioningReportGetReportForApplication(string application, string userId, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItem> localVarResponse = UserProvisioningReportGetReportForApplicationWithHttpInfo(application, userId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationProvisionReportItem</returns>
        public EssSharp.Client.ApiResponse<ApplicationProvisionReportItem> UserProvisioningReportGetReportForApplicationWithHttpInfo(string application, string userId, string expand = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetReportForApplication");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetReportForApplication");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetReportForApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationProvisionReportItem>("/users/{userId}/provisionReport/applications/{application}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetReportForApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationProvisionReportItem</returns>
        public async System.Threading.Tasks.Task<ApplicationProvisionReportItem> UserProvisioningReportGetReportForApplicationAsync(string application, string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationProvisionReportItem> localVarResponse = await UserProvisioningReportGetReportForApplicationWithHttpInfoAsync(application, userId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Provisioning Report &lt;p&gt;Gets a provisioning report for the specified application. The logged in user must have at least Database Manager role for the application. Application roles are included in the report only if the logged in user has at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links to roles, filters, and scripts are returned. If &lt;code&gt;all&lt;/code&gt; is specified, provisioning information for all roles, filters, and scripts in the application is returned.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationProvisionReportItem)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationProvisionReportItem>> UserProvisioningReportGetReportForApplicationWithHttpInfoAsync(string application, string userId, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetReportForApplication");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetReportForApplication");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetReportForApplication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationProvisionReportItem>("/users/{userId}/provisionReport/applications/{application}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetReportForApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProvisionReportItemList</returns>
        public ProvisionReportItemList UserProvisioningReportGetRoles(string application, string userId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ProvisionReportItemList> localVarResponse = UserProvisioningReportGetRolesWithHttpInfo(application, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<ProvisionReportItemList> UserProvisioningReportGetRolesWithHttpInfo(string application, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetRoles");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetRoles");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProvisionReportItemList>("/users/{userId}/provisionReport/applications/{application}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<ProvisionReportItemList> UserProvisioningReportGetRolesAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ProvisionReportItemList> localVarResponse = await UserProvisioningReportGetRolesWithHttpInfoAsync(application, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Roles Provisioning Report &lt;p&gt;Get a roles provisioning report for the specified application. The logged in user must have at least Application Manager role for the application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ProvisionReportItemList>> UserProvisioningReportGetRolesWithHttpInfoAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetRoles");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetRoles");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProvisionReportItemList>("/users/{userId}/provisionReport/applications/{application}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatabaseProvisionReportItemList</returns>
        public DatabaseProvisionReportItemList UserProvisioningReportGetScripts(string application, string userId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = UserProvisioningReportGetScriptsWithHttpInfo(application, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatabaseProvisionReportItemList</returns>
        public EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> UserProvisioningReportGetScriptsWithHttpInfo(string application, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetScripts");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetScripts");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatabaseProvisionReportItemList>("/users/{userId}/provisionReport/applications/{application}/scripts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatabaseProvisionReportItemList</returns>
        public async System.Threading.Tasks.Task<DatabaseProvisionReportItemList> UserProvisioningReportGetScriptsAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList> localVarResponse = await UserProvisioningReportGetScriptsWithHttpInfoAsync(application, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scripts Provisioning Report &lt;p&gt;Get a scripts provisioning report for the specified application. The logged in user must have at least Database Manager role for the application to get a provisioning report.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;User ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatabaseProvisionReportItemList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<DatabaseProvisionReportItemList>> UserProvisioningReportGetScriptsWithHttpInfoAsync(string application, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'application' when calling UserProvisioningReportApi->UserProvisioningReportGetScripts");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling UserProvisioningReportApi->UserProvisioningReportGetScripts");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("application", EssSharp.Client.ClientUtils.ParameterToString(application)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserProvisioningReportApi.UserProvisioningReportGetScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatabaseProvisionReportItemList>("/users/{userId}/provisionReport/applications/{application}/scripts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProvisioningReportGetScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
