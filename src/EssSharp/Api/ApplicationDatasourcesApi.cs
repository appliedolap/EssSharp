/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationDatasourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationDatasourcesCreateDatasource(string applicationName, Datasource body = default(Datasource), int operationIndex = 0);

        /// <summary>
        /// Create Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationDatasourcesCreateDatasourceWithHttpInfo(string applicationName, Datasource body = default(Datasource), int operationIndex = 0);
        /// <summary>
        /// Delete Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationDatasourcesDeleteDatasource(string applicationName, string datasourceName, int operationIndex = 0);

        /// <summary>
        /// Delete Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationDatasourcesDeleteDatasourceWithHttpInfo(string applicationName, string datasourceName, int operationIndex = 0);
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationDatasourcesGetDataStream(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationDatasourcesGetDataStreamWithHttpInfo(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);
        /// <summary>
        /// Get Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        Datasource ApplicationDatasourcesGetDatasourceDetails(string applicationName, string datasouceName, int operationIndex = 0);

        /// <summary>
        /// Get Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        ApiResponse<Datasource> ApplicationDatasourcesGetDatasourceDetailsWithHttpInfo(string applicationName, string datasouceName, int operationIndex = 0);
        /// <summary>
        /// Get Application Datasources
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasourcesList</returns>
        DatasourcesList ApplicationDatasourcesGetDatasources(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Application Datasources
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasourcesList</returns>
        ApiResponse<DatasourcesList> ApplicationDatasourcesGetDatasourcesWithHttpInfo(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        Datasource ApplicationDatasourcesUpdateDatasource(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0);

        /// <summary>
        /// Update Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        ApiResponse<Datasource> ApplicationDatasourcesUpdateDatasourceWithHttpInfo(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationDatasourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationDatasourcesCreateDatasourceAsync(string applicationName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDatasourcesCreateDatasourceWithHttpInfoAsync(string applicationName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationDatasourcesDeleteDatasourceAsync(string applicationName, string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDatasourcesDeleteDatasourceWithHttpInfoAsync(string applicationName, string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationDatasourcesGetDataStreamAsync(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationDatasourcesGetDataStreamWithHttpInfoAsync(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        System.Threading.Tasks.Task<Datasource> ApplicationDatasourcesGetDatasourceDetailsAsync(string applicationName, string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Datasource>> ApplicationDatasourcesGetDatasourceDetailsWithHttpInfoAsync(string applicationName, string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Datasources
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasourcesList</returns>
        System.Threading.Tasks.Task<DatasourcesList> ApplicationDatasourcesGetDatasourcesAsync(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Datasources
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasourcesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasourcesList>> ApplicationDatasourcesGetDatasourcesWithHttpInfoAsync(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        System.Threading.Tasks.Task<Datasource> ApplicationDatasourcesUpdateDatasourceAsync(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Application Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Datasource>> ApplicationDatasourcesUpdateDatasourceWithHttpInfoAsync(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationDatasourcesApi : IApplicationDatasourcesApiSync, IApplicationDatasourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationDatasourcesApi : IApplicationDatasourcesApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDatasourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationDatasourcesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDatasourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationDatasourcesApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDatasourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationDatasourcesApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDatasourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationDatasourcesApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Application Datasource &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationDatasourcesCreateDatasource(string applicationName, Datasource body = default(Datasource), int operationIndex = 0)
        {
            ApplicationDatasourcesCreateDatasourceWithHttpInfo(applicationName, body);
        }

        /// <summary>
        /// Create Application Datasource &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationDatasourcesCreateDatasourceWithHttpInfo(string applicationName, Datasource body = default(Datasource), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesCreateDatasource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesCreateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/datasources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesCreateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Application Datasource &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationDatasourcesCreateDatasourceAsync(string applicationName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationDatasourcesCreateDatasourceWithHttpInfoAsync(applicationName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Application Datasource &lt;p&gt;Creates an application-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationDatasourcesCreateDatasourceWithHttpInfoAsync(string applicationName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesCreateDatasource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesCreateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/datasources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesCreateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Datasource &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationDatasourcesDeleteDatasource(string applicationName, string datasourceName, int operationIndex = 0)
        {
            ApplicationDatasourcesDeleteDatasourceWithHttpInfo(applicationName, datasourceName);
        }

        /// <summary>
        /// Delete Application Datasource &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationDatasourcesDeleteDatasourceWithHttpInfo(string applicationName, string datasourceName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesDeleteDatasource");
            }

            // verify the required parameter 'datasourceName' is set
            if (datasourceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasourceName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesDeleteDatasource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("datasourceName", EssSharp.Client.ClientUtils.ParameterToString(datasourceName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesDeleteDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/datasources/{datasourceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesDeleteDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Datasource &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationDatasourcesDeleteDatasourceAsync(string applicationName, string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationDatasourcesDeleteDatasourceWithHttpInfoAsync(applicationName, datasourceName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Application Datasource &lt;p&gt;Deletes the named application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationDatasourcesDeleteDatasourceWithHttpInfoAsync(string applicationName, string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesDeleteDatasource");
            }

            // verify the required parameter 'datasourceName' is set
            if (datasourceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasourceName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesDeleteDatasource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("datasourceName", EssSharp.Client.ClientUtils.ParameterToString(datasourceName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesDeleteDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/datasources/{datasourceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesDeleteDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationDatasourcesGetDataStream(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            ApplicationDatasourcesGetDataStreamWithHttpInfo(applicationName, includeHeaders, metaDataOnly, body);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationDatasourcesGetDataStreamWithHttpInfo(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDataStream");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (includeHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "includeHeaders", includeHeaders));
            }
            if (metaDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "metaDataOnly", metaDataOnly));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesGetDataStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/datasources/query/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesGetDataStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationDatasourcesGetDataStreamAsync(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationDatasourcesGetDataStreamWithHttpInfoAsync(applicationName, includeHeaders, metaDataOnly, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from an application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationDatasourcesGetDataStreamWithHttpInfoAsync(string applicationName, bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDataStream");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (includeHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "includeHeaders", includeHeaders));
            }
            if (metaDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "metaDataOnly", metaDataOnly));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesGetDataStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/datasources/query/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesGetDataStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Datasource &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        public Datasource ApplicationDatasourcesGetDatasourceDetails(string applicationName, string datasouceName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = ApplicationDatasourcesGetDatasourceDetailsWithHttpInfo(applicationName, datasouceName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Datasource &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        public EssSharp.Client.ApiResponse<Datasource> ApplicationDatasourcesGetDatasourceDetailsWithHttpInfo(string applicationName, string datasouceName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDatasourceDetails");
            }

            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDatasourceDetails");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesGetDatasourceDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Datasource>("/applications/{applicationName}/datasources/{datasouceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesGetDatasourceDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Datasource &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        public async System.Threading.Tasks.Task<Datasource> ApplicationDatasourcesGetDatasourceDetailsAsync(string applicationName, string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = await ApplicationDatasourcesGetDatasourceDetailsWithHttpInfoAsync(applicationName, datasouceName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Datasource &lt;p&gt;Returns details about the specified application-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Datasource>> ApplicationDatasourcesGetDatasourceDetailsWithHttpInfoAsync(string applicationName, string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDatasourceDetails");
            }

            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDatasourceDetails");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesGetDatasourceDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Datasource>("/applications/{applicationName}/datasources/{datasouceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesGetDatasourceDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Datasources &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasourcesList</returns>
        public DatasourcesList ApplicationDatasourcesGetDatasources(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<DatasourcesList> localVarResponse = ApplicationDatasourcesGetDatasourcesWithHttpInfo(applicationName, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Datasources &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasourcesList</returns>
        public EssSharp.Client.ApiResponse<DatasourcesList> ApplicationDatasourcesGetDatasourcesWithHttpInfo(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDatasources");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesGetDatasources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatasourcesList>("/applications/{applicationName}/datasources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesGetDatasources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Datasources &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasourcesList</returns>
        public async System.Threading.Tasks.Task<DatasourcesList> ApplicationDatasourcesGetDatasourcesAsync(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<DatasourcesList> localVarResponse = await ApplicationDatasourcesGetDatasourcesWithHttpInfoAsync(applicationName, offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Datasources &lt;p&gt;Returns a list of application-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasourcesList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<DatasourcesList>> ApplicationDatasourcesGetDatasourcesWithHttpInfoAsync(string applicationName, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesGetDatasources");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesGetDatasources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatasourcesList>("/applications/{applicationName}/datasources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesGetDatasources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Datasource &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        public Datasource ApplicationDatasourcesUpdateDatasource(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = ApplicationDatasourcesUpdateDatasourceWithHttpInfo(applicationName, datasouceName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Datasource &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        public EssSharp.Client.ApiResponse<Datasource> ApplicationDatasourcesUpdateDatasourceWithHttpInfo(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesUpdateDatasource");
            }

            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesUpdateDatasource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesUpdateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Datasource>("/applications/{applicationName}/datasources/{datasouceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesUpdateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Datasource &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        public async System.Threading.Tasks.Task<Datasource> ApplicationDatasourcesUpdateDatasourceAsync(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = await ApplicationDatasourcesUpdateDatasourceWithHttpInfoAsync(applicationName, datasouceName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Datasource &lt;p&gt;Update the named application-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasource. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Datasource>> ApplicationDatasourcesUpdateDatasourceWithHttpInfoAsync(string applicationName, string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesUpdateDatasource");
            }

            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling ApplicationDatasourcesApi->ApplicationDatasourcesUpdateDatasource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationDatasourcesApi.ApplicationDatasourcesUpdateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Datasource>("/applications/{applicationName}/datasources/{datasouceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationDatasourcesUpdateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
