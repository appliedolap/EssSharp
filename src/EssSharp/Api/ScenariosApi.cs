/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenariosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosAddApprover(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0);

        /// <summary>
        /// Add Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosAddApproverWithHttpInfo(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0);
        /// <summary>
        /// Add Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommentBean</returns>
        CommentBean ScenariosAddComment(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0);

        /// <summary>
        /// Add Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommentBean</returns>
        ApiResponse<CommentBean> ScenariosAddCommentWithHttpInfo(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0);
        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosAddParticipant(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0);

        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosAddParticipantWithHttpInfo(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0);
        /// <summary>
        /// Create Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        ScenarioBean ScenariosCreate(ScenarioBean body = default(ScenarioBean), int operationIndex = 0);

        /// <summary>
        /// Create Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        ApiResponse<ScenarioBean> ScenariosCreateWithHttpInfo(ScenarioBean body = default(ScenarioBean), int operationIndex = 0);
        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosDelete(long id, int operationIndex = 0);

        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosDeleteWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Delete Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosDeleteApprover(long scenarioId, string userId, int operationIndex = 0);

        /// <summary>
        /// Delete Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosDeleteApproverWithHttpInfo(long scenarioId, string userId, int operationIndex = 0);
        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosDeleteComment(long scenarioId, long commentId, int operationIndex = 0);

        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosDeleteCommentWithHttpInfo(long scenarioId, long commentId, int operationIndex = 0);
        /// <summary>
        /// Delete Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosDeleteParticipant(long scenarioId, string userId, int operationIndex = 0);

        /// <summary>
        /// Delete Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosDeleteParticipantWithHttpInfo(long scenarioId, string userId, int operationIndex = 0);
        /// <summary>
        /// Get Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        ScenarioBean ScenariosGet(long id, string expand = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        ApiResponse<ScenarioBean> ScenariosGetWithHttpInfo(long id, string expand = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Approvers
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApproverListResponse</returns>
        ApproverListResponse ScenariosGetApprovers(long scenarioId, int operationIndex = 0);

        /// <summary>
        /// Get Approvers
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApproverListResponse</returns>
        ApiResponse<ApproverListResponse> ScenariosGetApproversWithHttpInfo(long scenarioId, int operationIndex = 0);
        /// <summary>
        /// Get Changes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioChangesListResponse</returns>
        ScenarioChangesListResponse ScenariosGetChangeData(long id, int operationIndex = 0);

        /// <summary>
        /// Get Changes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioChangesListResponse</returns>
        ApiResponse<ScenarioChangesListResponse> ScenariosGetChangeDataWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommentBean</returns>
        CommentBean ScenariosGetComment(long scenarioId, long commentId, int operationIndex = 0);

        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommentBean</returns>
        ApiResponse<CommentBean> ScenariosGetCommentWithHttpInfo(long scenarioId, long commentId, int operationIndex = 0);
        /// <summary>
        /// Get Comments
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommentListResponse</returns>
        CommentListResponse ScenariosGetComments(long scenarioId, int operationIndex = 0);

        /// <summary>
        /// Get Comments
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommentListResponse</returns>
        ApiResponse<CommentListResponse> ScenariosGetCommentsWithHttpInfo(long scenarioId, int operationIndex = 0);
        /// <summary>
        /// Get Participants
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParticipantListResponse</returns>
        ParticipantListResponse ScenariosGetParticipants(long scenarioId, int operationIndex = 0);

        /// <summary>
        /// Get Participants
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParticipantListResponse</returns>
        ApiResponse<ParticipantListResponse> ScenariosGetParticipantsWithHttpInfo(long scenarioId, int operationIndex = 0);
        /// <summary>
        /// Get Scenario-Enabled Cubes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioCubesList</returns>
        ScenarioCubesList ScenariosGetRegisteredCubes(int operationIndex = 0);

        /// <summary>
        /// Get Scenario-Enabled Cubes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioCubesList</returns>
        ApiResponse<ScenarioCubesList> ScenariosGetRegisteredCubesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Scenarios
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioCollectionResponse</returns>
        ScenarioCollectionResponse ScenariosGetScenarios(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Scenarios
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioCollectionResponse</returns>
        ApiResponse<ScenarioCollectionResponse> ScenariosGetScenariosWithHttpInfo(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Scenario Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptListResponse</returns>
        ScriptListResponse ScenariosGetScripts(long scenarioId, int operationIndex = 0);

        /// <summary>
        /// Get Scenario Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptListResponse</returns>
        ApiResponse<ScriptListResponse> ScenariosGetScriptsWithHttpInfo(long scenarioId, int operationIndex = 0);
        /// <summary>
        /// Update Scenario Partially
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        ScenarioBean ScenariosPatch(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0);

        /// <summary>
        /// Update Scenario Partially
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        ApiResponse<ScenarioBean> ScenariosPatchWithHttpInfo(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0);
        /// <summary>
        /// Perform Scenario Action
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        ScenarioBean ScenariosPerformAction(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0);

        /// <summary>
        /// Perform Scenario Action
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        ApiResponse<ScenarioBean> ScenariosPerformActionWithHttpInfo(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0);
        /// <summary>
        /// Update Scenario Fully
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        ScenarioBean ScenariosUpdate(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0);

        /// <summary>
        /// Update Scenario Fully
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        ApiResponse<ScenarioBean> ScenariosUpdateWithHttpInfo(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0);
        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosUpdateComment(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0);

        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosUpdateCommentWithHttpInfo(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0);
        /// <summary>
        /// Update Scenario with Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScenariosUpdateScript(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0);

        /// <summary>
        /// Update Scenario with Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScenariosUpdateScriptWithHttpInfo(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenariosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosAddApproverAsync(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosAddApproverWithHttpInfoAsync(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommentBean</returns>
        System.Threading.Tasks.Task<CommentBean> ScenariosAddCommentAsync(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommentBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentBean>> ScenariosAddCommentWithHttpInfoAsync(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosAddParticipantAsync(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosAddParticipantWithHttpInfoAsync(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        System.Threading.Tasks.Task<ScenarioBean> ScenariosCreateAsync(ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioBean>> ScenariosCreateWithHttpInfoAsync(ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosDeleteAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosDeleteWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosDeleteApproverAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Approver
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosDeleteApproverWithHttpInfoAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosDeleteCommentAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosDeleteCommentWithHttpInfoAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosDeleteParticipantAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Participant
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosDeleteParticipantWithHttpInfoAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        System.Threading.Tasks.Task<ScenarioBean> ScenariosGetAsync(long id, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scenario
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioBean>> ScenariosGetWithHttpInfoAsync(long id, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Approvers
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApproverListResponse</returns>
        System.Threading.Tasks.Task<ApproverListResponse> ScenariosGetApproversAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Approvers
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApproverListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApproverListResponse>> ScenariosGetApproversWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Changes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioChangesListResponse</returns>
        System.Threading.Tasks.Task<ScenarioChangesListResponse> ScenariosGetChangeDataAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Changes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioChangesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioChangesListResponse>> ScenariosGetChangeDataWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommentBean</returns>
        System.Threading.Tasks.Task<CommentBean> ScenariosGetCommentAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommentBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentBean>> ScenariosGetCommentWithHttpInfoAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Comments
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommentListResponse</returns>
        System.Threading.Tasks.Task<CommentListResponse> ScenariosGetCommentsAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Comments
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentListResponse>> ScenariosGetCommentsWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Participants
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParticipantListResponse</returns>
        System.Threading.Tasks.Task<ParticipantListResponse> ScenariosGetParticipantsAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Participants
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParticipantListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParticipantListResponse>> ScenariosGetParticipantsWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scenario-Enabled Cubes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioCubesList</returns>
        System.Threading.Tasks.Task<ScenarioCubesList> ScenariosGetRegisteredCubesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scenario-Enabled Cubes
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioCubesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioCubesList>> ScenariosGetRegisteredCubesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scenarios
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioCollectionResponse</returns>
        System.Threading.Tasks.Task<ScenarioCollectionResponse> ScenariosGetScenariosAsync(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scenarios
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioCollectionResponse>> ScenariosGetScenariosWithHttpInfoAsync(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scenario Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptListResponse</returns>
        System.Threading.Tasks.Task<ScriptListResponse> ScenariosGetScriptsAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scenario Scripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScriptListResponse>> ScenariosGetScriptsWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Scenario Partially
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        System.Threading.Tasks.Task<ScenarioBean> ScenariosPatchAsync(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Scenario Partially
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioBean>> ScenariosPatchWithHttpInfoAsync(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Perform Scenario Action
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        System.Threading.Tasks.Task<ScenarioBean> ScenariosPerformActionAsync(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Perform Scenario Action
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioBean>> ScenariosPerformActionWithHttpInfoAsync(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Scenario Fully
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        System.Threading.Tasks.Task<ScenarioBean> ScenariosUpdateAsync(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Scenario Fully
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScenarioBean>> ScenariosUpdateWithHttpInfoAsync(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosUpdateCommentAsync(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosUpdateCommentWithHttpInfoAsync(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Scenario with Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScenariosUpdateScriptAsync(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Scenario with Script
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScenariosUpdateScriptWithHttpInfoAsync(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenariosApi : IScenariosApiSync, IScenariosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScenariosApi : IScenariosApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScenariosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScenariosApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScenariosApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenariosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScenariosApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Approver &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosAddApprover(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0)
        {
            ScenariosAddApproverWithHttpInfo(scenarioId, body);
        }

        /// <summary>
        /// Add Approver &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosAddApproverWithHttpInfo(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosAddApprover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/scenarios/{scenarioId}/approvers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosAddApprover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Approver &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosAddApproverAsync(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosAddApproverWithHttpInfoAsync(scenarioId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Approver &lt;p&gt;Adds a scenario approver. Approvers are optional, and must have Database Access or higher role. They monitor and approve or reject scenarios. If a scenario has multiple approvers, each one must approve before it can be submitted.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Approver details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosAddApproverWithHttpInfoAsync(long scenarioId, ApproverBean body = default(ApproverBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosAddApprover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/scenarios/{scenarioId}/approvers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosAddApprover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Comment &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommentBean</returns>
        public CommentBean ScenariosAddComment(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CommentBean> localVarResponse = ScenariosAddCommentWithHttpInfo(scenarioId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Comment &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommentBean</returns>
        public EssSharp.Client.ApiResponse<CommentBean> ScenariosAddCommentWithHttpInfo(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosAddComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommentBean>("/scenarios/{scenarioId}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosAddComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Comment &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommentBean</returns>
        public async System.Threading.Tasks.Task<CommentBean> ScenariosAddCommentAsync(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CommentBean> localVarResponse = await ScenariosAddCommentWithHttpInfoAsync(scenarioId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Comment &lt;p&gt;Adds a comment to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommentBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CommentBean>> ScenariosAddCommentWithHttpInfoAsync(long scenarioId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosAddComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommentBean>("/scenarios/{scenarioId}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosAddComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Participant &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosAddParticipant(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0)
        {
            ScenariosAddParticipantWithHttpInfo(scenarioId, body);
        }

        /// <summary>
        /// Add Participant &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosAddParticipantWithHttpInfo(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosAddParticipant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/scenarios/{scenarioId}/participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosAddParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Participant &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosAddParticipantAsync(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosAddParticipantWithHttpInfoAsync(scenarioId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Participant &lt;p&gt;Adds a scenario participant to the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Participant details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosAddParticipantWithHttpInfoAsync(long scenarioId, ParticipantBean body = default(ParticipantBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosAddParticipant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/scenarios/{scenarioId}/participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosAddParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Scenario &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        public ScenarioBean ScenariosCreate(ScenarioBean body = default(ScenarioBean), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = ScenariosCreateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Scenario &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        public EssSharp.Client.ApiResponse<ScenarioBean> ScenariosCreateWithHttpInfo(ScenarioBean body = default(ScenarioBean), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScenarioBean>("/scenarios", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Scenario &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        public async System.Threading.Tasks.Task<ScenarioBean> ScenariosCreateAsync(ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = await ScenariosCreateWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Scenario &lt;p&gt;Creates a new scenario. A scenario is a private work area in which you can model different assumptions within the data without affecting the existing data.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioBean>> ScenariosCreateWithHttpInfoAsync(ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScenarioBean>("/scenarios", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt; &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosDelete(long id, int operationIndex = 0)
        {
            ScenariosDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt; &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosDeleteWithHttpInfo(long id, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/scenarios/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt; &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosDeleteAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt; &lt;p&gt;Deletes a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosDeleteWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/scenarios/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Approver &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosDeleteApprover(long scenarioId, string userId, int operationIndex = 0)
        {
            ScenariosDeleteApproverWithHttpInfo(scenarioId, userId);
        }

        /// <summary>
        /// Delete Approver &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosDeleteApproverWithHttpInfo(long scenarioId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling ScenariosApi->ScenariosDeleteApprover");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDeleteApprover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/scenarios/{scenarioId}/approvers/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDeleteApprover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Approver &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosDeleteApproverAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosDeleteApproverWithHttpInfoAsync(scenarioId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Approver &lt;p&gt;Deletes a scenario approver.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Approver ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosDeleteApproverWithHttpInfoAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling ScenariosApi->ScenariosDeleteApprover");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDeleteApprover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/scenarios/{scenarioId}/approvers/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDeleteApprover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Comment &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosDeleteComment(long scenarioId, long commentId, int operationIndex = 0)
        {
            ScenariosDeleteCommentWithHttpInfo(scenarioId, commentId);
        }

        /// <summary>
        /// Delete Comment &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosDeleteCommentWithHttpInfo(long scenarioId, long commentId, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("commentId", EssSharp.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDeleteComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/scenarios/{scenarioId}/comments/{commentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDeleteComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Comment &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosDeleteCommentAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosDeleteCommentWithHttpInfoAsync(scenarioId, commentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Comment &lt;p&gt;Deletes a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosDeleteCommentWithHttpInfoAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("commentId", EssSharp.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDeleteComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/scenarios/{scenarioId}/comments/{commentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDeleteComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Participant &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosDeleteParticipant(long scenarioId, string userId, int operationIndex = 0)
        {
            ScenariosDeleteParticipantWithHttpInfo(scenarioId, userId);
        }

        /// <summary>
        /// Delete Participant &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosDeleteParticipantWithHttpInfo(long scenarioId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling ScenariosApi->ScenariosDeleteParticipant");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDeleteParticipant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/scenarios/{scenarioId}/participants/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDeleteParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Participant &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosDeleteParticipantAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosDeleteParticipantWithHttpInfoAsync(scenarioId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Participant &lt;p&gt;Deletes a scenario participant.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="userId">&lt;p&gt;Participant ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosDeleteParticipantWithHttpInfoAsync(long scenarioId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling ScenariosApi->ScenariosDeleteParticipant");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosDeleteParticipant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/scenarios/{scenarioId}/participants/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosDeleteParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenario &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        public ScenarioBean ScenariosGet(long id, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = ScenariosGetWithHttpInfo(id, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenario &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        public EssSharp.Client.ApiResponse<ScenarioBean> ScenariosGetWithHttpInfo(long id, string expand = default(string), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenario &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        public async System.Threading.Tasks.Task<ScenarioBean> ScenariosGetAsync(long id, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = await ScenariosGetWithHttpInfoAsync(id, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenario &lt;p&gt;Gets a scenario by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="expand">&lt;p&gt;Value can be &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default value is &lt;code&gt;none&lt;/code&gt;, meaning only links are returned. If &lt;code&gt;all&lt;/code&gt; is specified, then approvers, participants and scripts are included in the response.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioBean>> ScenariosGetWithHttpInfoAsync(long id, string expand = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Approvers &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApproverListResponse</returns>
        public ApproverListResponse ScenariosGetApprovers(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApproverListResponse> localVarResponse = ScenariosGetApproversWithHttpInfo(scenarioId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Approvers &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApproverListResponse</returns>
        public EssSharp.Client.ApiResponse<ApproverListResponse> ScenariosGetApproversWithHttpInfo(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetApprovers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApproverListResponse>("/scenarios/{scenarioId}/approvers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetApprovers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Approvers &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApproverListResponse</returns>
        public async System.Threading.Tasks.Task<ApproverListResponse> ScenariosGetApproversAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApproverListResponse> localVarResponse = await ScenariosGetApproversWithHttpInfoAsync(scenarioId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Approvers &lt;p&gt;Gets scenario approvers.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApproverListResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApproverListResponse>> ScenariosGetApproversWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetApprovers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApproverListResponse>("/scenarios/{scenarioId}/approvers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetApprovers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Changes &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioChangesListResponse</returns>
        public ScenarioChangesListResponse ScenariosGetChangeData(long id, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioChangesListResponse> localVarResponse = ScenariosGetChangeDataWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Changes &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioChangesListResponse</returns>
        public EssSharp.Client.ApiResponse<ScenarioChangesListResponse> ScenariosGetChangeDataWithHttpInfo(long id, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetChangeData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScenarioChangesListResponse>("/scenarios/{id}/changes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetChangeData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Changes &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioChangesListResponse</returns>
        public async System.Threading.Tasks.Task<ScenarioChangesListResponse> ScenariosGetChangeDataAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioChangesListResponse> localVarResponse = await ScenariosGetChangeDataWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Changes &lt;p&gt;Gets scenario data changes. If you are the owner, approver, or participant for a given scenario, you can compare scenario and base models.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioChangesListResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioChangesListResponse>> ScenariosGetChangeDataWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetChangeData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScenarioChangesListResponse>("/scenarios/{id}/changes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetChangeData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comment &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommentBean</returns>
        public CommentBean ScenariosGetComment(long scenarioId, long commentId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CommentBean> localVarResponse = ScenariosGetCommentWithHttpInfo(scenarioId, commentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comment &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommentBean</returns>
        public EssSharp.Client.ApiResponse<CommentBean> ScenariosGetCommentWithHttpInfo(long scenarioId, long commentId, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("commentId", EssSharp.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CommentBean>("/scenarios/{scenarioId}/comments/{commentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comment &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommentBean</returns>
        public async System.Threading.Tasks.Task<CommentBean> ScenariosGetCommentAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CommentBean> localVarResponse = await ScenariosGetCommentWithHttpInfoAsync(scenarioId, commentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comment &lt;p&gt;Gets a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommentBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CommentBean>> ScenariosGetCommentWithHttpInfoAsync(long scenarioId, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("commentId", EssSharp.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CommentBean>("/scenarios/{scenarioId}/comments/{commentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comments &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommentListResponse</returns>
        public CommentListResponse ScenariosGetComments(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CommentListResponse> localVarResponse = ScenariosGetCommentsWithHttpInfo(scenarioId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comments &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommentListResponse</returns>
        public EssSharp.Client.ApiResponse<CommentListResponse> ScenariosGetCommentsWithHttpInfo(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetComments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CommentListResponse>("/scenarios/{scenarioId}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetComments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comments &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommentListResponse</returns>
        public async System.Threading.Tasks.Task<CommentListResponse> ScenariosGetCommentsAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CommentListResponse> localVarResponse = await ScenariosGetCommentsWithHttpInfoAsync(scenarioId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comments &lt;p&gt;Gets comments for the specified scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommentListResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CommentListResponse>> ScenariosGetCommentsWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetComments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CommentListResponse>("/scenarios/{scenarioId}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetComments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Participants &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParticipantListResponse</returns>
        public ParticipantListResponse ScenariosGetParticipants(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ParticipantListResponse> localVarResponse = ScenariosGetParticipantsWithHttpInfo(scenarioId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Participants &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParticipantListResponse</returns>
        public EssSharp.Client.ApiResponse<ParticipantListResponse> ScenariosGetParticipantsWithHttpInfo(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ParticipantListResponse>("/scenarios/{scenarioId}/participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Participants &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParticipantListResponse</returns>
        public async System.Threading.Tasks.Task<ParticipantListResponse> ScenariosGetParticipantsAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ParticipantListResponse> localVarResponse = await ScenariosGetParticipantsWithHttpInfoAsync(scenarioId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Participants &lt;p&gt;Gets scenario participants by scenario ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParticipantListResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ParticipantListResponse>> ScenariosGetParticipantsWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ParticipantListResponse>("/scenarios/{scenarioId}/participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenario-Enabled Cubes &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioCubesList</returns>
        public ScenarioCubesList ScenariosGetRegisteredCubes(int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioCubesList> localVarResponse = ScenariosGetRegisteredCubesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenario-Enabled Cubes &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioCubesList</returns>
        public EssSharp.Client.ApiResponse<ScenarioCubesList> ScenariosGetRegisteredCubesWithHttpInfo(int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetRegisteredCubes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScenarioCubesList>("/scenarios/databases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetRegisteredCubes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenario-Enabled Cubes &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioCubesList</returns>
        public async System.Threading.Tasks.Task<ScenarioCubesList> ScenariosGetRegisteredCubesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioCubesList> localVarResponse = await ScenariosGetRegisteredCubesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenario-Enabled Cubes &lt;p&gt;Gets information about all the databases registered for scenario management.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioCubesList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioCubesList>> ScenariosGetRegisteredCubesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetRegisteredCubes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScenarioCubesList>("/scenarios/databases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetRegisteredCubes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenarios &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioCollectionResponse</returns>
        public ScenarioCollectionResponse ScenariosGetScenarios(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioCollectionResponse> localVarResponse = ScenariosGetScenariosWithHttpInfo(filter, role, overdue, state, application, database, approvalPending, offset, limit, orderBy, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenarios &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioCollectionResponse</returns>
        public EssSharp.Client.ApiResponse<ScenarioCollectionResponse> ScenariosGetScenariosWithHttpInfo(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (overdue != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overdue", overdue));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (application != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "application", application));
            }
            if (database != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "database", database));
            }
            if (approvalPending != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "approvalPending", approvalPending));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetScenarios";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScenarioCollectionResponse>("/scenarios", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetScenarios", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenarios &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioCollectionResponse</returns>
        public async System.Threading.Tasks.Task<ScenarioCollectionResponse> ScenariosGetScenariosAsync(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioCollectionResponse> localVarResponse = await ScenariosGetScenariosWithHttpInfoAsync(filter, role, overdue, state, application, database, approvalPending, offset, limit, orderBy, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenarios &lt;p&gt;Get scenarios matching search criteria. Response includes links to all basic scenario attributes, excluding approvers, participants, comments, and scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Scenario name wildcard pattern.&lt;/p&gt; (optional)</param>
        /// <param name="role">&lt;p&gt;Optional user role by which to filter the scenario list. Value can be &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;participant&lt;/code&gt;, or &lt;code&gt;approver&lt;/code&gt;. If role is specified as &lt;code&gt;approver&lt;/code&gt;, this API returns all scenarios for which the logged in user is the approver. By default, all scenarios are returned for which the logged in user is either an owner, a participant, or an approver.&lt;/p&gt; (optional)</param>
        /// <param name="overdue">&lt;p&gt;If true, returns all scenarios past the due date. Default is false, meaning all scenarios are returned.&lt;/p&gt; (optional)</param>
        /// <param name="state">&lt;p&gt;Scenario state.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="approvalPending">&lt;p&gt;Scenario is in submitted state, and approval is pending from logged in user.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="offset">&lt;p&gt;Number of scenarios to omit from the start of the result set. Default is 0.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of scenarios to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="orderBy">&lt;p&gt;Order-by field and order for the result set. The value of this parameter must follow the format of &lt;code&gt;&lt;i&gt;fieldName&lt;/i&gt;:asc|desc&lt;/code&gt;. For example: &lt;code&gt;name:asc&lt;/code&gt;. Default value is &lt;code&gt;createdTime:desc&lt;/code&gt;, meaning that scenarios are listed with the most recently created scenarios first.&lt;/p&gt; (optional, default to &quot;createdTime:desc&quot;)</param>
        /// <param name="count">&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, response contains only the count of scenarios, and not actual scenarios.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioCollectionResponse>> ScenariosGetScenariosWithHttpInfoAsync(string filter = default(string), string role = default(string), bool? overdue = default(bool?), string state = default(string), string application = default(string), string database = default(string), bool? approvalPending = default(bool?), long? offset = default(long?), long? limit = default(long?), string orderBy = default(string), bool? count = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (overdue != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overdue", overdue));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (application != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "application", application));
            }
            if (database != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "database", database));
            }
            if (approvalPending != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "approvalPending", approvalPending));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetScenarios";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScenarioCollectionResponse>("/scenarios", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetScenarios", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenario Scripts &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptListResponse</returns>
        public ScriptListResponse ScenariosGetScripts(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScriptListResponse> localVarResponse = ScenariosGetScriptsWithHttpInfo(scenarioId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenario Scripts &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptListResponse</returns>
        public EssSharp.Client.ApiResponse<ScriptListResponse> ScenariosGetScriptsWithHttpInfo(long scenarioId, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScriptListResponse>("/scenarios/{scenarioId}/scripts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scenario Scripts &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptListResponse</returns>
        public async System.Threading.Tasks.Task<ScriptListResponse> ScenariosGetScriptsAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScriptListResponse> localVarResponse = await ScenariosGetScriptsWithHttpInfoAsync(scenarioId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scenario Scripts &lt;p&gt;Gets scenario scripts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptListResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScriptListResponse>> ScenariosGetScriptsWithHttpInfoAsync(long scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosGetScripts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScriptListResponse>("/scenarios/{scenarioId}/scripts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosGetScripts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Scenario Partially &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        public ScenarioBean ScenariosPatch(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = ScenariosPatchWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Scenario Partially &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        public EssSharp.Client.ApiResponse<ScenarioBean> ScenariosPatchWithHttpInfo(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Scenario Partially &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        public async System.Threading.Tasks.Task<ScenarioBean> ScenariosPatchAsync(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = await ScenariosPatchWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Scenario Partially &lt;p&gt;Updates basic information about a scenario, including description, due date, priority, and owner.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details. Set only those fields which need to be updated.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioBean>> ScenariosPatchWithHttpInfoAsync(long id, ScenarioEditBean body = default(ScenarioEditBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform Scenario Action &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        public ScenarioBean ScenariosPerformAction(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = ScenariosPerformActionWithHttpInfo(id, action, overwrite, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Scenario Action &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        public EssSharp.Client.ApiResponse<ScenarioBean> ScenariosPerformActionWithHttpInfo(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosPerformAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosPerformAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform Scenario Action &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        public async System.Threading.Tasks.Task<ScenarioBean> ScenariosPerformActionAsync(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = await ScenariosPerformActionWithHttpInfoAsync(id, action, overwrite, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Scenario Action &lt;p&gt;Performs the specified scenario workflow action. Common actions are &lt;code&gt;submit&lt;/code&gt; to submit a scenario for approval, &lt;code&gt;approve&lt;/code&gt; to approve a scenario, &lt;code&gt;reject&lt;/code&gt; to reject it, and &lt;code&gt;apply&lt;/code&gt; to overwrite the base data with the scenario data. Additional actions include &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="action">&lt;p&gt;Valid values are &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;approve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;Optional overwrite parameter, applicable only when &lt;i&gt;action&lt;/i&gt; is &lt;code&gt;refresh&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, when the base and scenario data have different values, the base value overwrites the scenario changes. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Action parameters. Copy options are applicable only in case of copy. Comment is applicable only for workflow actions.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioBean>> ScenariosPerformActionWithHttpInfoAsync(long id, string action = default(string), bool? overwrite = default(bool?), ScenarioActionPayload body = default(ScenarioActionPayload), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosPerformAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosPerformAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Scenario Fully &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScenarioBean</returns>
        public ScenarioBean ScenariosUpdate(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = ScenariosUpdateWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Scenario Fully &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScenarioBean</returns>
        public EssSharp.Client.ApiResponse<ScenarioBean> ScenariosUpdateWithHttpInfo(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Scenario Fully &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScenarioBean</returns>
        public async System.Threading.Tasks.Task<ScenarioBean> ScenariosUpdateAsync(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ScenarioBean> localVarResponse = await ScenariosUpdateWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Scenario Fully &lt;p&gt;Updates full details about a scenario.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Scenario details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScenarioBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ScenarioBean>> ScenariosUpdateWithHttpInfoAsync(long id, ScenarioBean body = default(ScenarioBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ScenarioBean>("/scenarios/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Comment &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosUpdateComment(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0)
        {
            ScenariosUpdateCommentWithHttpInfo(scenarioId, commentId, body);
        }

        /// <summary>
        /// Update Comment &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosUpdateCommentWithHttpInfo(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("commentId", EssSharp.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosUpdateComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/scenarios/{scenarioId}/comments/{commentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosUpdateComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Comment &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosUpdateCommentAsync(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosUpdateCommentWithHttpInfoAsync(scenarioId, commentId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Comment &lt;p&gt;Updates a scenario comment by ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="commentId">&lt;p&gt;Comment ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Comment details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosUpdateCommentWithHttpInfoAsync(long scenarioId, long commentId, CommentBean body = default(CommentBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("commentId", EssSharp.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosUpdateComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/scenarios/{scenarioId}/comments/{commentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosUpdateComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Scenario with Script &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScenariosUpdateScript(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0)
        {
            ScenariosUpdateScriptWithHttpInfo(scenarioId, scriptType, body);
        }

        /// <summary>
        /// Update Scenario with Script &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ScenariosUpdateScriptWithHttpInfo(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0)
        {
            // verify the required parameter 'scriptType' is set
            if (scriptType == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptType' when calling ScenariosApi->ScenariosUpdateScript");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptType", EssSharp.Client.ClientUtils.ParameterToString(scriptType)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosUpdateScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/scenarios/{scenarioId}/scripts/{scriptType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosUpdateScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Scenario with Script &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScenariosUpdateScriptAsync(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScenariosUpdateScriptWithHttpInfoAsync(scenarioId, scriptType, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Scenario with Script &lt;p&gt;Updates scenario using script of specified type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">&lt;p&gt;Scenario ID.&lt;/p&gt;</param>
        /// <param name="scriptType">&lt;p&gt;Script type. Valid values are: &lt;code&gt;refresh&lt;/code&gt; to revert to base, &lt;code&gt;apply&lt;/code&gt; to commit to base, and &lt;code&gt;clear&lt;/code&gt; to set to #Missing.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Script details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ScenariosUpdateScriptWithHttpInfoAsync(long scenarioId, string scriptType, ScriptBean body = default(ScriptBean), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scriptType' is set
            if (scriptType == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'scriptType' when calling ScenariosApi->ScenariosUpdateScript");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", EssSharp.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scriptType", EssSharp.Client.ClientUtils.ParameterToString(scriptType)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ScenariosApi.ScenariosUpdateScript";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/scenarios/{scenarioId}/scripts/{scriptType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScenariosUpdateScript", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
