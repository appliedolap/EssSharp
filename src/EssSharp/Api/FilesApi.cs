/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Abort File Upload
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FilesAbortUpload(string path, string uploadId, int operationIndex = 0);

        /// <summary>
        /// Abort File Upload
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesAbortUploadWithHttpInfo(string path, string uploadId, int operationIndex = 0);
        /// <summary>
        /// Upload File or Create Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericEntity</returns>
        GenericEntity FilesAddFile(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Upload File or Create Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericEntity</returns>
        ApiResponse<GenericEntity> FilesAddFileWithHttpInfo(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Copy File
        /// </summary>
        /// <remarks>
        /// Copy a file from source to destination.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FilesCopyResource(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Copy File
        /// </summary>
        /// <remarks>
        /// Copy a file from source to destination.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesCopyResourceWithHttpInfo(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Create Upload
        /// </summary>
        /// <remarks>
        /// Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFilePartUploadResponse</returns>
        CreateFilePartUploadResponse FilesCreateUpload(string path, bool overwrite, bool append, int operationIndex = 0);

        /// <summary>
        /// Create Upload
        /// </summary>
        /// <remarks>
        /// Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFilePartUploadResponse</returns>
        ApiResponse<CreateFilePartUploadResponse> FilesCreateUploadWithHttpInfo(string path, bool overwrite, bool append, int operationIndex = 0);
        /// <summary>
        /// Delete File or Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FilesDeleteFile(string path, int operationIndex = 0);

        /// <summary>
        /// Delete File or Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesDeleteFileWithHttpInfo(string path, int operationIndex = 0);
        /// <summary>
        /// Extract Zip File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FilesExtract(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Extract Zip File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesExtractWithHttpInfo(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Shared Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string FilesGetSharedPath(int operationIndex = 0);

        /// <summary>
        /// Get Shared Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FilesGetSharedPathWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Home Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string FilesGetUserHomePath(int operationIndex = 0);

        /// <summary>
        /// Get Home Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FilesGetUserHomePathWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List or Download Files
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileCollectionResponse</returns>
        FileCollectionResponse FilesListFiles(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List or Download Files
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileCollectionResponse</returns>
        ApiResponse<FileCollectionResponse> FilesListFilesWithHttpInfo(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List Root Folders
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileCollectionResponse</returns>
        FileCollectionResponse FilesListRootFolders(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Root Folders
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileCollectionResponse</returns>
        ApiResponse<FileCollectionResponse> FilesListRootFoldersWithHttpInfo(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Move or Rename File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FilesMoveResource(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Move or Rename File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesMoveResourceWithHttpInfo(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Upload Commit
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommitFilePartUploadResponse</returns>
        CommitFilePartUploadResponse FilesUploadCommit(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0);

        /// <summary>
        /// Upload Commit
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommitFilePartUploadResponse</returns>
        ApiResponse<CommitFilePartUploadResponse> FilesUploadCommitWithHttpInfo(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0);
        /// <summary>
        /// Upload the part
        /// </summary>
        /// <remarks>
        /// Upload Part request for each object part upload. It should contain upload ID.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadFilePartResponse</returns>
        UploadFilePartResponse FilesUploadPart(string path, int partNum, string uploadId, int operationIndex = 0);

        /// <summary>
        /// Upload the part
        /// </summary>
        /// <remarks>
        /// Upload Part request for each object part upload. It should contain upload ID.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadFilePartResponse</returns>
        ApiResponse<UploadFilePartResponse> FilesUploadPartWithHttpInfo(string path, int partNum, string uploadId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetUploadConfig(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUploadConfigWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Abort File Upload
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesAbortUploadAsync(string path, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Abort File Upload
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesAbortUploadWithHttpInfoAsync(string path, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload File or Create Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericEntity</returns>
        System.Threading.Tasks.Task<GenericEntity> FilesAddFileAsync(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload File or Create Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericEntity>> FilesAddFileWithHttpInfoAsync(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy File
        /// </summary>
        /// <remarks>
        /// Copy a file from source to destination.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesCopyResourceAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy File
        /// </summary>
        /// <remarks>
        /// Copy a file from source to destination.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesCopyResourceWithHttpInfoAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Upload
        /// </summary>
        /// <remarks>
        /// Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFilePartUploadResponse</returns>
        System.Threading.Tasks.Task<CreateFilePartUploadResponse> FilesCreateUploadAsync(string path, bool overwrite, bool append, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Upload
        /// </summary>
        /// <remarks>
        /// Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFilePartUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFilePartUploadResponse>> FilesCreateUploadWithHttpInfoAsync(string path, bool overwrite, bool append, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete File or Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesDeleteFileAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete File or Folder
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesDeleteFileWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract Zip File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesExtractAsync(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract Zip File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesExtractWithHttpInfoAsync(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Shared Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FilesGetSharedPathAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shared Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FilesGetSharedPathWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Home Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FilesGetUserHomePathAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Home Path
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FilesGetUserHomePathWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List or Download Files
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileCollectionResponse</returns>
        System.Threading.Tasks.Task<FileCollectionResponse> FilesListFilesAsync(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List or Download Files
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileCollectionResponse>> FilesListFilesWithHttpInfoAsync(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Root Folders
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileCollectionResponse</returns>
        System.Threading.Tasks.Task<FileCollectionResponse> FilesListRootFoldersAsync(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Root Folders
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileCollectionResponse>> FilesListRootFoldersWithHttpInfoAsync(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Move or Rename File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesMoveResourceAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Move or Rename File
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesMoveResourceWithHttpInfoAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload Commit
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommitFilePartUploadResponse</returns>
        System.Threading.Tasks.Task<CommitFilePartUploadResponse> FilesUploadCommitAsync(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload Commit
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommitFilePartUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommitFilePartUploadResponse>> FilesUploadCommitWithHttpInfoAsync(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload the part
        /// </summary>
        /// <remarks>
        /// Upload Part request for each object part upload. It should contain upload ID.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadFilePartResponse</returns>
        System.Threading.Tasks.Task<UploadFilePartResponse> FilesUploadPartAsync(string path, int partNum, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload the part
        /// </summary>
        /// <remarks>
        /// Upload Part request for each object part upload. It should contain upload ID.
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadFilePartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadFilePartResponse>> FilesUploadPartWithHttpInfoAsync(string path, int partNum, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUploadConfigAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUploadConfigWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiSync, IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilesApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Abort File Upload &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FilesAbortUpload(string path, string uploadId, int operationIndex = 0)
        {
            FilesAbortUploadWithHttpInfo(path, uploadId);
        }

        /// <summary>
        /// Abort File Upload &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> FilesAbortUploadWithHttpInfo(string path, string uploadId, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesAbortUpload");
            }

            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'uploadId' when calling FilesApi->FilesAbortUpload");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));

            localVarRequestOptions.Operation = "FilesApi.FilesAbortUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/files/abort/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesAbortUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Abort File Upload &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesAbortUploadAsync(string path, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FilesAbortUploadWithHttpInfoAsync(path, uploadId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Abort File Upload &lt;p&gt;Abort file upload api , abort the upload operation of a file and delete all the uploaded parts.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;File Path to abort&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id of file to abort&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> FilesAbortUploadWithHttpInfoAsync(string path, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesAbortUpload");
            }

            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'uploadId' when calling FilesApi->FilesAbortUpload");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));

            localVarRequestOptions.Operation = "FilesApi.FilesAbortUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/files/abort/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesAbortUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File or Create Folder &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericEntity</returns>
        public GenericEntity FilesAddFile(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<GenericEntity> localVarResponse = FilesAddFileWithHttpInfo(path, overwrite, stream, append);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File or Create Folder &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericEntity</returns>
        public EssSharp.Client.ApiResponse<GenericEntity> FilesAddFileWithHttpInfo(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesAddFile");
            }

            // verify the required parameter 'stream' is set
            if (stream == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'stream' when calling FilesApi->FilesAddFile");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            if (append != null)
            {
                localVarRequestOptions.HeaderParameters.Add("append", EssSharp.Client.ClientUtils.ParameterToString(append)); // header parameter
            }
            localVarRequestOptions.Data = stream;

            localVarRequestOptions.Operation = "FilesApi.FilesAddFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GenericEntity>("/files/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesAddFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File or Create Folder &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericEntity</returns>
        public async System.Threading.Tasks.Task<GenericEntity> FilesAddFileAsync(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<GenericEntity> localVarResponse = await FilesAddFileWithHttpInfoAsync(path, overwrite, stream, append, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File or Create Folder &lt;p&gt;Uploads a file to Essbase.&lt;/p&gt;&lt;p&gt;Supported file types include text files, rules files, calculation script files, and MaxL script files.&lt;/p&gt; &lt;p&gt;If there is no content type, and a folder name is specified in the URL, a folder is created.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path. If &lt;code&gt;Content-Type&#x3D;application/octet-stream&lt;/code&gt;, this is a file name. Otherwise, it is a folder name.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Applicable only for adding a file. Overwriting folders is not supported.&lt;/p&gt;</param>
        /// <param name="stream">&lt;p&gt;Applicable only for adding a file. Provides the stream to upload.&lt;/p&gt;</param>
        /// <param name="append">append (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericEntity)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<GenericEntity>> FilesAddFileWithHttpInfoAsync(string path, bool overwrite, System.IO.Stream stream, bool? append = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesAddFile");
            }

            // verify the required parameter 'stream' is set
            if (stream == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'stream' when calling FilesApi->FilesAddFile");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            if (append != null)
            {
                localVarRequestOptions.HeaderParameters.Add("append", EssSharp.Client.ClientUtils.ParameterToString(append)); // header parameter
            }
            localVarRequestOptions.Data = stream;

            localVarRequestOptions.Operation = "FilesApi.FilesAddFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GenericEntity>("/files/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesAddFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy File Copy a file from source to destination.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FilesCopyResource(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            FilesCopyResourceWithHttpInfo(body, overwrite);
        }

        /// <summary>
        /// Copy File Copy a file from source to destination.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> FilesCopyResourceWithHttpInfo(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->FilesCopyResource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesCopyResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/files/actions/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesCopyResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy File Copy a file from source to destination.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesCopyResourceAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FilesCopyResourceWithHttpInfoAsync(body, overwrite, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Copy File Copy a file from source to destination.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> FilesCopyResourceWithHttpInfoAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->FilesCopyResource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesCopyResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/files/actions/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesCopyResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Upload Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFilePartUploadResponse</returns>
        public CreateFilePartUploadResponse FilesCreateUpload(string path, bool overwrite, bool append, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CreateFilePartUploadResponse> localVarResponse = FilesCreateUploadWithHttpInfo(path, overwrite, append);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Upload Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFilePartUploadResponse</returns>
        public EssSharp.Client.ApiResponse<CreateFilePartUploadResponse> FilesCreateUploadWithHttpInfo(string path, bool overwrite, bool append, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesCreateUpload");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            localVarRequestOptions.HeaderParameters.Add("append", EssSharp.Client.ClientUtils.ParameterToString(append)); // header parameter

            localVarRequestOptions.Operation = "FilesApi.FilesCreateUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateFilePartUploadResponse>("/files/upload-create/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesCreateUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Upload Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFilePartUploadResponse</returns>
        public async System.Threading.Tasks.Task<CreateFilePartUploadResponse> FilesCreateUploadAsync(string path, bool overwrite, bool append, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CreateFilePartUploadResponse> localVarResponse = await FilesCreateUploadWithHttpInfoAsync(path, overwrite, append, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Upload Initialize file upload in parts by registering the file, it returns unique upload id , which must be included in any request related to this file part upload.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite the file&lt;/p&gt;</param>
        /// <param name="append">&lt;p&gt;Append&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFilePartUploadResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CreateFilePartUploadResponse>> FilesCreateUploadWithHttpInfoAsync(string path, bool overwrite, bool append, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesCreateUpload");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            localVarRequestOptions.HeaderParameters.Add("append", EssSharp.Client.ClientUtils.ParameterToString(append)); // header parameter

            localVarRequestOptions.Operation = "FilesApi.FilesCreateUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateFilePartUploadResponse>("/files/upload-create/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesCreateUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File or Folder &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FilesDeleteFile(string path, int operationIndex = 0)
        {
            FilesDeleteFileWithHttpInfo(path);
        }

        /// <summary>
        /// Delete File or Folder &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> FilesDeleteFileWithHttpInfo(string path, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesDeleteFile");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.FilesDeleteFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/files/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesDeleteFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File or Folder &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesDeleteFileAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FilesDeleteFileWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete File or Folder &lt;p&gt;Delete the file or folder specified in the path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of file/folder to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> FilesDeleteFileWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesDeleteFile");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "FilesApi.FilesDeleteFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/files/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesDeleteFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Zip File &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FilesExtract(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            FilesExtractWithHttpInfo(body, overwrite);
        }

        /// <summary>
        /// Extract Zip File &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> FilesExtractWithHttpInfo(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->FilesExtract");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesExtract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/files/actions/extract", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesExtract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Zip File &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesExtractAsync(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FilesExtractWithHttpInfoAsync(body, overwrite, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Extract Zip File &lt;p&gt;Extract a zip file on same location. Supported for applications, users and shared folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Zip file path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Not applicable for folder.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> FilesExtractWithHttpInfoAsync(ZipFileDetails body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->FilesExtract");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesExtract";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/files/actions/extract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesExtract", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shared Path &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string FilesGetSharedPath(int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = FilesGetSharedPathWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shared Path &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> FilesGetSharedPathWithHttpInfo(int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FilesApi.FilesGetSharedPath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/files/sharedpath", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesGetSharedPath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shared Path &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FilesGetSharedPathAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await FilesGetSharedPathWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shared Path &lt;p&gt;Get user shared path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> FilesGetSharedPathWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FilesApi.FilesGetSharedPath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/files/sharedpath", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesGetSharedPath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Home Path &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string FilesGetUserHomePath(int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = FilesGetUserHomePathWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Home Path &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public EssSharp.Client.ApiResponse<string> FilesGetUserHomePathWithHttpInfo(int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FilesApi.FilesGetUserHomePath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/files/homepath", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesGetUserHomePath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Home Path &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FilesGetUserHomePathAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<string> localVarResponse = await FilesGetUserHomePathWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Home Path &lt;p&gt;Get user home path.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<string>> FilesGetUserHomePathWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FilesApi.FilesGetUserHomePath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/files/homepath", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesGetUserHomePath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List or Download Files &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileCollectionResponse</returns>
        public FileCollectionResponse FilesListFiles(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<FileCollectionResponse> localVarResponse = FilesListFilesWithHttpInfo(path, offset, limit, type, overwrite, action, fileSize, filter, recursive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List or Download Files &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileCollectionResponse</returns>
        public EssSharp.Client.ApiResponse<FileCollectionResponse> FilesListFilesWithHttpInfo(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesListFiles");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (fileSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fileSize", fileSize));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (recursive != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "recursive", recursive));
            }

            localVarRequestOptions.Operation = "FilesApi.FilesListFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileCollectionResponse>("/files/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesListFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List or Download Files &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileCollectionResponse</returns>
        public async System.Threading.Tasks.Task<FileCollectionResponse> FilesListFilesAsync(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<FileCollectionResponse> localVarResponse = await FilesListFilesWithHttpInfoAsync(path, offset, limit, type, overwrite, action, fileSize, filter, recursive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List or Download Files &lt;p&gt;Returns a list of files, or downloads the specified file. To list files, use &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; for the Accept header. To download, use &lt;code&gt;Accept&#x3D;&#39;application/octet-stream&#39;&lt;/code&gt; for the Accept header.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog path, starting with &lt;code&gt;applications&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, or &lt;code&gt;users&lt;/code&gt;. If listing files, this is the folder path. If downloading files, this is the file path.&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;applications/sample&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;users/ksmith&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="offset">&lt;p&gt;Number of items to omit from the start of the result set. Default value is 0. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of files to return. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="type">&lt;p&gt;List files by type. If type is not specified, returns all files. Applicable only for listing files.&lt;/p&gt; (optional)</param>
        /// <param name="overwrite">&lt;p&gt;If true, overwrite files. If false, any existing file is validated but not overwritten. Applicable only with query parameters  &lt;code&gt;action&#x3D;validateUpload&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt; . Default value is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="action">&lt;p&gt;Validates the upload. Supported action values are &lt;code&gt;validateUpload&lt;/code&gt; and &lt;code&gt;&#39;Accept&#x3D;application/json&#39;&lt;/code&gt; or &lt;code&gt;&#39;Accept&#x3D;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="fileSize">&lt;p&gt;Validates whether enough free space is available. Applicable only with query parameters &lt;code&gt;action&#x3D;&#39;validateUpload&#39;&lt;/code&gt; and &lt;code&gt;Accept&#x3D;&#39;application/json&#39;&lt;/code&gt; or &lt;code&gt;Accept&#x3D;&#39;application/xml&#39;&lt;/code&gt;.&lt;/p&gt; (optional)</param>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Recursive param to get search result as recursive.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<FileCollectionResponse>> FilesListFilesWithHttpInfoAsync(string path, int? offset = default(int?), int? limit = default(int?), string type = default(string), bool? overwrite = default(bool?), string action = default(string), long? fileSize = default(long?), string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesListFiles");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (fileSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fileSize", fileSize));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (recursive != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "recursive", recursive));
            }

            localVarRequestOptions.Operation = "FilesApi.FilesListFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileCollectionResponse>("/files/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesListFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Root Folders &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileCollectionResponse</returns>
        public FileCollectionResponse FilesListRootFolders(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<FileCollectionResponse> localVarResponse = FilesListRootFoldersWithHttpInfo(filter, recursive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Root Folders &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileCollectionResponse</returns>
        public EssSharp.Client.ApiResponse<FileCollectionResponse> FilesListRootFoldersWithHttpInfo(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (recursive != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "recursive", recursive));
            }

            localVarRequestOptions.Operation = "FilesApi.FilesListRootFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileCollectionResponse>("/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesListRootFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Root Folders &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileCollectionResponse</returns>
        public async System.Threading.Tasks.Task<FileCollectionResponse> FilesListRootFoldersAsync(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<FileCollectionResponse> localVarResponse = await FilesListRootFoldersWithHttpInfoAsync(filter, recursive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Root Folders &lt;p&gt;List catalog root folders.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">&lt;p&gt;Filter the list of files.&lt;/p&gt; (optional)</param>
        /// <param name="recursive">&lt;p&gt;Return search results recursively.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<FileCollectionResponse>> FilesListRootFoldersWithHttpInfoAsync(string filter = default(string), bool? recursive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (recursive != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "recursive", recursive));
            }

            localVarRequestOptions.Operation = "FilesApi.FilesListRootFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileCollectionResponse>("/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesListRootFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move or Rename File &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FilesMoveResource(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            FilesMoveResourceWithHttpInfo(body, overwrite);
        }

        /// <summary>
        /// Move or Rename File &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> FilesMoveResourceWithHttpInfo(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->FilesMoveResource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesMoveResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/files/actions/move", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesMoveResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move or Rename File &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesMoveResourceAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FilesMoveResourceWithHttpInfoAsync(body, overwrite, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Move or Rename File &lt;p&gt;Either moves a file from source to destination, or renames a file or folder. Moving a folder is not supported. Renaming a folder is supported only if the folder is not in the applications directory.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;File path details.&lt;/p&gt;</param>
        /// <param name="overwrite">&lt;p&gt;Overwrite existing file. Only applicable for moving or renaming a file.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> FilesMoveResourceWithHttpInfoAsync(FilePathDetail body, bool? overwrite = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->FilesMoveResource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (overwrite != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "overwrite", overwrite));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesMoveResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/files/actions/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesMoveResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Commit &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommitFilePartUploadResponse</returns>
        public CommitFilePartUploadResponse FilesUploadCommit(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<CommitFilePartUploadResponse> localVarResponse = FilesUploadCommitWithHttpInfo(path, uploadId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Commit &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommitFilePartUploadResponse</returns>
        public EssSharp.Client.ApiResponse<CommitFilePartUploadResponse> FilesUploadCommitWithHttpInfo(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesUploadCommit");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesUploadCommit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommitFilePartUploadResponse>("/files/upload-commit/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesUploadCommit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Commit &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommitFilePartUploadResponse</returns>
        public async System.Threading.Tasks.Task<CommitFilePartUploadResponse> FilesUploadCommitAsync(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<CommitFilePartUploadResponse> localVarResponse = await FilesUploadCommitWithHttpInfoAsync(path, uploadId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Commit &lt;p&gt;Commit the upload. Include the part number and corresponding ETag value for each part.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommitFilePartUploadResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<CommitFilePartUploadResponse>> FilesUploadCommitWithHttpInfoAsync(string path, string uploadId = default(string), Dictionary<string, string> body = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesUploadCommit");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FilesApi.FilesUploadCommit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommitFilePartUploadResponse>("/files/upload-commit/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesUploadCommit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload the part Upload Part request for each object part upload. It should contain upload ID.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadFilePartResponse</returns>
        public UploadFilePartResponse FilesUploadPart(string path, int partNum, string uploadId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<UploadFilePartResponse> localVarResponse = FilesUploadPartWithHttpInfo(path, partNum, uploadId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload the part Upload Part request for each object part upload. It should contain upload ID.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadFilePartResponse</returns>
        public EssSharp.Client.ApiResponse<UploadFilePartResponse> FilesUploadPartWithHttpInfo(string path, int partNum, string uploadId, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesUploadPart");
            }

            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'uploadId' when calling FilesApi->FilesUploadPart");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "partNum", partNum));
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));

            localVarRequestOptions.Operation = "FilesApi.FilesUploadPart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UploadFilePartResponse>("/files/upload-part/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesUploadPart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload the part Upload Part request for each object part upload. It should contain upload ID.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadFilePartResponse</returns>
        public async System.Threading.Tasks.Task<UploadFilePartResponse> FilesUploadPartAsync(string path, int partNum, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<UploadFilePartResponse> localVarResponse = await FilesUploadPartWithHttpInfoAsync(path, partNum, uploadId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload the part Upload Part request for each object part upload. It should contain upload ID.
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">&lt;p&gt;Catalog Path &lt;/p&gt;</param>
        /// <param name="partNum">&lt;p&gt;Part Number&lt;/p&gt;</param>
        /// <param name="uploadId">&lt;p&gt;Upload Id&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadFilePartResponse)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<UploadFilePartResponse>> FilesUploadPartWithHttpInfoAsync(string path, int partNum, string uploadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'path' when calling FilesApi->FilesUploadPart");
            }

            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'uploadId' when calling FilesApi->FilesUploadPart");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", EssSharp.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "partNum", partNum));
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "uploadId", uploadId));

            localVarRequestOptions.Operation = "FilesApi.FilesUploadPart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UploadFilePartResponse>("/files/upload-part/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesUploadPart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetUploadConfig(int operationIndex = 0)
        {
            GetUploadConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GetUploadConfigWithHttpInfo(int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FilesApi.GetUploadConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/files/uploadconfig", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUploadConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUploadConfigAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetUploadConfigWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GetUploadConfigWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FilesApi.GetUploadConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/files/uploadconfig", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUploadConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
