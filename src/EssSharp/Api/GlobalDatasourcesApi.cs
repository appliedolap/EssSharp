/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalDatasourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalDatasourcesCreateDatasource(Datasource body = default(Datasource), int operationIndex = 0);

        /// <summary>
        /// Create Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalDatasourcesCreateDatasourceWithHttpInfo(Datasource body = default(Datasource), int operationIndex = 0);
        /// <summary>
        /// Delete Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalDatasourcesDeleteDatasource(string datasourceName, int operationIndex = 0);

        /// <summary>
        /// Delete Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalDatasourcesDeleteDatasourceWithHttpInfo(string datasourceName, int operationIndex = 0);
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalDatasourcesGetData(string streamId, int operationIndex = 0);

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalDatasourcesGetDataWithHttpInfo(string streamId, int operationIndex = 0);
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalDatasourcesGetDataStream(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalDatasourcesGetDataStreamWithHttpInfo(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);
        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        Datasource GlobalDatasourcesGetDatasourceDetails(string datasouceName, int operationIndex = 0);

        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        ApiResponse<Datasource> GlobalDatasourcesGetDatasourceDetailsWithHttpInfo(string datasouceName, int operationIndex = 0);
        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasourcesList</returns>
        DatasourcesList GlobalDatasourcesGetDatasources(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasourcesList</returns>
        ApiResponse<DatasourcesList> GlobalDatasourcesGetDatasourcesWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GlobalDatasourcesGetDelimitedDataStream(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlobalDatasourcesGetDelimitedDataStreamWithHttpInfo(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);
        /// <summary>
        /// Stream Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResultBean</returns>
        ResultBean GlobalDatasourcesGetResults(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);

        /// <summary>
        /// Stream Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResultBean</returns>
        ApiResponse<ResultBean> GlobalDatasourcesGetResultsWithHttpInfo(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0);
        /// <summary>
        /// Update Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        Datasource GlobalDatasourcesUpdateDatasource(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0);

        /// <summary>
        /// Update Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        ApiResponse<Datasource> GlobalDatasourcesUpdateDatasourceWithHttpInfo(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalDatasourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalDatasourcesCreateDatasourceAsync(Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalDatasourcesCreateDatasourceWithHttpInfoAsync(Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalDatasourcesDeleteDatasourceAsync(string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalDatasourcesDeleteDatasourceWithHttpInfoAsync(string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalDatasourcesGetDataAsync(string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalDatasourcesGetDataWithHttpInfoAsync(string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalDatasourcesGetDataStreamAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalDatasourcesGetDataStreamWithHttpInfoAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        System.Threading.Tasks.Task<Datasource> GlobalDatasourcesGetDatasourceDetailsAsync(string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Datasource>> GlobalDatasourcesGetDatasourceDetailsWithHttpInfoAsync(string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasourcesList</returns>
        System.Threading.Tasks.Task<DatasourcesList> GlobalDatasourcesGetDatasourcesAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasourcesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DatasourcesList>> GlobalDatasourcesGetDatasourcesWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlobalDatasourcesGetDelimitedDataStreamAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Streamed Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlobalDatasourcesGetDelimitedDataStreamWithHttpInfoAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stream Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResultBean</returns>
        System.Threading.Tasks.Task<ResultBean> GlobalDatasourcesGetResultsAsync(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stream Datasource Results
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResultBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultBean>> GlobalDatasourcesGetResultsWithHttpInfoAsync(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        System.Threading.Tasks.Task<Datasource> GlobalDatasourcesUpdateDatasourceAsync(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Global Datasource
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Datasource>> GlobalDatasourcesUpdateDatasourceWithHttpInfoAsync(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalDatasourcesApi : IGlobalDatasourcesApiSync, IGlobalDatasourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalDatasourcesApi : IGlobalDatasourcesApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalDatasourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalDatasourcesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalDatasourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalDatasourcesApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalDatasourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalDatasourcesApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalDatasourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GlobalDatasourcesApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Global Datasource &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalDatasourcesCreateDatasource(Datasource body = default(Datasource), int operationIndex = 0)
        {
            GlobalDatasourcesCreateDatasourceWithHttpInfo(body);
        }

        /// <summary>
        /// Create Global Datasource &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalDatasourcesCreateDatasourceWithHttpInfo(Datasource body = default(Datasource), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesCreateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/datasources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesCreateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Global Datasource &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalDatasourcesCreateDatasourceAsync(Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalDatasourcesCreateDatasourceWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Global Datasource &lt;p&gt;Creates a global-level Datasource based on specified inputs. &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;connection&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">&lt;p&gt;Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalDatasourcesCreateDatasourceWithHttpInfoAsync(Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesCreateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/datasources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesCreateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Global Datasource &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalDatasourcesDeleteDatasource(string datasourceName, int operationIndex = 0)
        {
            GlobalDatasourcesDeleteDatasourceWithHttpInfo(datasourceName);
        }

        /// <summary>
        /// Delete Global Datasource &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalDatasourcesDeleteDatasourceWithHttpInfo(string datasourceName, int operationIndex = 0)
        {
            // verify the required parameter 'datasourceName' is set
            if (datasourceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasourceName' when calling GlobalDatasourcesApi->GlobalDatasourcesDeleteDatasource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasourceName", EssSharp.Client.ClientUtils.ParameterToString(datasourceName)); // path parameter

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesDeleteDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/datasources/{datasourceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesDeleteDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Global Datasource &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalDatasourcesDeleteDatasourceAsync(string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalDatasourcesDeleteDatasourceWithHttpInfoAsync(datasourceName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Global Datasource &lt;p&gt;Deletes the named global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalDatasourcesDeleteDatasourceWithHttpInfoAsync(string datasourceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasourceName' is set
            if (datasourceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasourceName' when calling GlobalDatasourcesApi->GlobalDatasourcesDeleteDatasource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasourceName", EssSharp.Client.ClientUtils.ParameterToString(datasourceName)); // path parameter

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesDeleteDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/datasources/{datasourceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesDeleteDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalDatasourcesGetData(string streamId, int operationIndex = 0)
        {
            GlobalDatasourcesGetDataWithHttpInfo(streamId);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalDatasourcesGetDataWithHttpInfo(string streamId, int operationIndex = 0)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling GlobalDatasourcesApi->GlobalDatasourcesGetData");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/datasources/query/data/{streamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalDatasourcesGetDataAsync(string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalDatasourcesGetDataWithHttpInfoAsync(streamId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results from a global-level Datasource associated with the specified stream id.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">&lt;p&gt;Stream id.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalDatasourcesGetDataWithHttpInfoAsync(string streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'streamId' when calling GlobalDatasourcesApi->GlobalDatasourcesGetData");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("streamId", EssSharp.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/datasources/query/data/{streamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalDatasourcesGetDataStream(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            GlobalDatasourcesGetDataStreamWithHttpInfo(includeHeaders, metaDataOnly, body);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalDatasourcesGetDataStreamWithHttpInfo(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "includeHeaders", includeHeaders));
            }
            if (metaDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "metaDataOnly", metaDataOnly));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDataStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/datasources/query/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDataStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalDatasourcesGetDataStreamAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalDatasourcesGetDataStreamWithHttpInfoAsync(includeHeaders, metaDataOnly, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalDatasourcesGetDataStreamWithHttpInfoAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "includeHeaders", includeHeaders));
            }
            if (metaDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "metaDataOnly", metaDataOnly));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDataStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/datasources/query/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDataStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        public Datasource GlobalDatasourcesGetDatasourceDetails(string datasouceName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = GlobalDatasourcesGetDatasourceDetailsWithHttpInfo(datasouceName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        public EssSharp.Client.ApiResponse<Datasource> GlobalDatasourcesGetDatasourceDetailsWithHttpInfo(string datasouceName, int operationIndex = 0)
        {
            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling GlobalDatasourcesApi->GlobalDatasourcesGetDatasourceDetails");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDatasourceDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Datasource>("/datasources/{datasouceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDatasourceDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        public async System.Threading.Tasks.Task<Datasource> GlobalDatasourcesGetDatasourceDetailsAsync(string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = await GlobalDatasourcesGetDatasourceDetailsWithHttpInfoAsync(datasouceName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns details about the specified global Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Datasource>> GlobalDatasourcesGetDatasourceDetailsWithHttpInfoAsync(string datasouceName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling GlobalDatasourcesApi->GlobalDatasourcesGetDatasourceDetails");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDatasourceDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Datasource>("/datasources/{datasouceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDatasourceDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DatasourcesList</returns>
        public DatasourcesList GlobalDatasourcesGetDatasources(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<DatasourcesList> localVarResponse = GlobalDatasourcesGetDatasourcesWithHttpInfo(offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DatasourcesList</returns>
        public EssSharp.Client.ApiResponse<DatasourcesList> GlobalDatasourcesGetDatasourcesWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDatasources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DatasourcesList>("/datasources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDatasources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DatasourcesList</returns>
        public async System.Threading.Tasks.Task<DatasourcesList> GlobalDatasourcesGetDatasourcesAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<DatasourcesList> localVarResponse = await GlobalDatasourcesGetDatasourcesWithHttpInfoAsync(offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Global Datasource &lt;p&gt;Returns a list of global-level Datasources, including details such as name, description, connection, and type.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">&lt;p&gt;Number of Datasources to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of Datasources to return. Default is 50.&lt;/p&gt; (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DatasourcesList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<DatasourcesList>> GlobalDatasourcesGetDatasourcesWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDatasources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DatasourcesList>("/datasources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDatasources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GlobalDatasourcesGetDelimitedDataStream(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            GlobalDatasourcesGetDelimitedDataStreamWithHttpInfo(includeHeaders, metaDataOnly, body);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> GlobalDatasourcesGetDelimitedDataStreamWithHttpInfo(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "includeHeaders", includeHeaders));
            }
            if (metaDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "metaDataOnly", metaDataOnly));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDelimitedDataStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/datasources/customdelimited/query/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDelimitedDataStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlobalDatasourcesGetDelimitedDataStreamAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GlobalDatasourcesGetDelimitedDataStreamWithHttpInfoAsync(includeHeaders, metaDataOnly, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Streamed Datasource Results &lt;p&gt;Returns results in stream from a global-level Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeHeaders">&lt;p&gt;Include headers.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="metaDataOnly">&lt;p&gt;Metadata Only.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> GlobalDatasourcesGetDelimitedDataStreamWithHttpInfoAsync(bool? includeHeaders = default(bool?), bool? metaDataOnly = default(bool?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "includeHeaders", includeHeaders));
            }
            if (metaDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "metaDataOnly", metaDataOnly));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetDelimitedDataStream";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/datasources/customdelimited/query/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetDelimitedDataStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream Datasource Results &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResultBean</returns>
        public ResultBean GlobalDatasourcesGetResults(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ResultBean> localVarResponse = GlobalDatasourcesGetResultsWithHttpInfo(pageSize, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream Datasource Results &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResultBean</returns>
        public EssSharp.Client.ApiResponse<ResultBean> GlobalDatasourcesGetResultsWithHttpInfo(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResultBean>("/datasources/query", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream Datasource Results &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResultBean</returns>
        public async System.Threading.Tasks.Task<ResultBean> GlobalDatasourcesGetResultsAsync(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ResultBean> localVarResponse = await GlobalDatasourcesGetResultsWithHttpInfoAsync(pageSize, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream Datasource Results &lt;p&gt;Returns column headers of the Datasource, and a link to fetch the streamed results in CSV (comma-separated) or TSV (tab-separated) formats.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">&lt;p&gt;Number of records to return. If not passed, all records are returned.&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="body">&lt;p&gt;Query information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResultBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ResultBean>> GlobalDatasourcesGetResultsWithHttpInfoAsync(int? pageSize = default(int?), DatasourceQueryInfo body = default(DatasourceQueryInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesGetResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResultBean>("/datasources/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesGetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Global Datasource &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Datasource</returns>
        public Datasource GlobalDatasourcesUpdateDatasource(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = GlobalDatasourcesUpdateDatasourceWithHttpInfo(datasouceName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Global Datasource &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Datasource</returns>
        public EssSharp.Client.ApiResponse<Datasource> GlobalDatasourcesUpdateDatasourceWithHttpInfo(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0)
        {
            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling GlobalDatasourcesApi->GlobalDatasourcesUpdateDatasource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesUpdateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Datasource>("/datasources/{datasouceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesUpdateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Global Datasource &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Datasource</returns>
        public async System.Threading.Tasks.Task<Datasource> GlobalDatasourcesUpdateDatasourceAsync(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Datasource> localVarResponse = await GlobalDatasourcesUpdateDatasourceWithHttpInfoAsync(datasouceName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Global Datasource &lt;p&gt;Update the named global-level Datasource. If the update is successful, returns details about the updated Datasource. &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; are required inputs for all types of Datasources. Other required inputs differ based on the type of the Datasource.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasouceName">&lt;p&gt;Datasource name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Updated Datasource details.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Datasource)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Datasource>> GlobalDatasourcesUpdateDatasourceWithHttpInfoAsync(string datasouceName, Datasource body = default(Datasource), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasouceName' is set
            if (datasouceName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'datasouceName' when calling GlobalDatasourcesApi->GlobalDatasourcesUpdateDatasource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasouceName", EssSharp.Client.ClientUtils.ParameterToString(datasouceName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GlobalDatasourcesApi.GlobalDatasourcesUpdateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Datasource>("/datasources/{datasouceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalDatasourcesUpdateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
