/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationConfigurationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigEntry</returns>
        ApplicationConfigEntry ApplicationConfigurationAddConfiguration(string applicationName, ApplicationConfigEntry body, int operationIndex = 0);

        /// <summary>
        /// Add Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigEntry</returns>
        ApiResponse<ApplicationConfigEntry> ApplicationConfigurationAddConfigurationWithHttpInfo(string applicationName, ApplicationConfigEntry body, int operationIndex = 0);
        /// <summary>
        /// Delete Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationConfigurationDeleteConfiguration(string applicationName, string configId, int operationIndex = 0);

        /// <summary>
        /// Delete Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationConfigurationDeleteConfigurationWithHttpInfo(string applicationName, string configId, int operationIndex = 0);
        /// <summary>
        /// Get Application Configuration Property
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigEntry</returns>
        ApplicationConfigEntry ApplicationConfigurationGetConfiguration(string applicationName, string configId, int operationIndex = 0);

        /// <summary>
        /// Get Application Configuration Property
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigEntry</returns>
        ApiResponse<ApplicationConfigEntry> ApplicationConfigurationGetConfigurationWithHttpInfo(string applicationName, string configId, int operationIndex = 0);
        /// <summary>
        /// Get Application Configuration (Filtered)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ApplicationConfigList&gt;</returns>
        List<ApplicationConfigList> ApplicationConfigurationGetConfigurationKeys(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Application Configuration (Filtered)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ApplicationConfigList&gt;</returns>
        ApiResponse<List<ApplicationConfigList>> ApplicationConfigurationGetConfigurationKeysWithHttpInfo(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigList</returns>
        ApplicationConfigList ApplicationConfigurationGetConfigurations(string applicationName, int operationIndex = 0);

        /// <summary>
        /// Get Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigList</returns>
        ApiResponse<ApplicationConfigList> ApplicationConfigurationGetConfigurationsWithHttpInfo(string applicationName, int operationIndex = 0);
        /// <summary>
        /// Update Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigEntry</returns>
        ApplicationConfigEntry ApplicationConfigurationSetConfiguration(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0);

        /// <summary>
        /// Update Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigEntry</returns>
        ApiResponse<ApplicationConfigEntry> ApplicationConfigurationSetConfigurationWithHttpInfo(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0);
        /// <summary>
        /// Updates Application Configurations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigList</returns>
        ApplicationConfigList ApplicationConfigurationSetConfigurations(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0);

        /// <summary>
        /// Updates Application Configurations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigList</returns>
        ApiResponse<ApplicationConfigList> ApplicationConfigurationSetConfigurationsWithHttpInfo(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationConfigurationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigEntry</returns>
        System.Threading.Tasks.Task<ApplicationConfigEntry> ApplicationConfigurationAddConfigurationAsync(string applicationName, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationConfigEntry>> ApplicationConfigurationAddConfigurationWithHttpInfoAsync(string applicationName, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationConfigurationDeleteConfigurationAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationConfigurationDeleteConfigurationWithHttpInfoAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Configuration Property
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigEntry</returns>
        System.Threading.Tasks.Task<ApplicationConfigEntry> ApplicationConfigurationGetConfigurationAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Configuration Property
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationConfigEntry>> ApplicationConfigurationGetConfigurationWithHttpInfoAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Configuration (Filtered)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ApplicationConfigList&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationConfigList>> ApplicationConfigurationGetConfigurationKeysAsync(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Configuration (Filtered)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationConfigList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationConfigList>>> ApplicationConfigurationGetConfigurationKeysWithHttpInfoAsync(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigList</returns>
        System.Threading.Tasks.Task<ApplicationConfigList> ApplicationConfigurationGetConfigurationsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationConfigList>> ApplicationConfigurationGetConfigurationsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigEntry</returns>
        System.Threading.Tasks.Task<ApplicationConfigEntry> ApplicationConfigurationSetConfigurationAsync(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Application Configuration
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationConfigEntry>> ApplicationConfigurationSetConfigurationWithHttpInfoAsync(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates Application Configurations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigList</returns>
        System.Threading.Tasks.Task<ApplicationConfigList> ApplicationConfigurationSetConfigurationsAsync(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates Application Configurations
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationConfigList>> ApplicationConfigurationSetConfigurationsWithHttpInfoAsync(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationConfigurationApi : IApplicationConfigurationApiSync, IApplicationConfigurationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationConfigurationApi : IApplicationConfigurationApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationConfigurationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationConfigurationApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationConfigurationApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationConfigurationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationConfigurationApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Application Configuration &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigEntry</returns>
        public ApplicationConfigEntry ApplicationConfigurationAddConfiguration(string applicationName, ApplicationConfigEntry body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationConfigEntry> localVarResponse = ApplicationConfigurationAddConfigurationWithHttpInfo(applicationName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Application Configuration &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigEntry</returns>
        public EssSharp.Client.ApiResponse<ApplicationConfigEntry> ApplicationConfigurationAddConfigurationWithHttpInfo(string applicationName, ApplicationConfigEntry body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationAddConfiguration");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationConfigurationApi->ApplicationConfigurationAddConfiguration");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationAddConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplicationConfigEntry>("/applications/{applicationName}/configurations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationAddConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Application Configuration &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigEntry</returns>
        public async System.Threading.Tasks.Task<ApplicationConfigEntry> ApplicationConfigurationAddConfigurationAsync(string applicationName, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationConfigEntry> localVarResponse = await ApplicationConfigurationAddConfigurationWithHttpInfoAsync(applicationName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Application Configuration &lt;p&gt;Adds the configuration property to the application and returns the added configuration property name.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigEntry)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationConfigEntry>> ApplicationConfigurationAddConfigurationWithHttpInfoAsync(string applicationName, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationAddConfiguration");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationConfigurationApi->ApplicationConfigurationAddConfiguration");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationAddConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplicationConfigEntry>("/applications/{applicationName}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationAddConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Configuration &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationConfigurationDeleteConfiguration(string applicationName, string configId, int operationIndex = 0)
        {
            ApplicationConfigurationDeleteConfigurationWithHttpInfo(applicationName, configId);
        }

        /// <summary>
        /// Delete Application Configuration &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationConfigurationDeleteConfigurationWithHttpInfo(string applicationName, string configId, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationDeleteConfiguration");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'configId' when calling ApplicationConfigurationApi->ApplicationConfigurationDeleteConfiguration");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", EssSharp.Client.ClientUtils.ParameterToString(configId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationDeleteConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/configurations/{configId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationDeleteConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Configuration &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationConfigurationDeleteConfigurationAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationConfigurationDeleteConfigurationWithHttpInfoAsync(applicationName, configId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Application Configuration &lt;p&gt;Deletes the specified configuration property from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationConfigurationDeleteConfigurationWithHttpInfoAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationDeleteConfiguration");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'configId' when calling ApplicationConfigurationApi->ApplicationConfigurationDeleteConfiguration");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", EssSharp.Client.ClientUtils.ParameterToString(configId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationDeleteConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/configurations/{configId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationDeleteConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Configuration Property &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigEntry</returns>
        public ApplicationConfigEntry ApplicationConfigurationGetConfiguration(string applicationName, string configId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationConfigEntry> localVarResponse = ApplicationConfigurationGetConfigurationWithHttpInfo(applicationName, configId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Configuration Property &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigEntry</returns>
        public EssSharp.Client.ApiResponse<ApplicationConfigEntry> ApplicationConfigurationGetConfigurationWithHttpInfo(string applicationName, string configId, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfiguration");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'configId' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfiguration");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", EssSharp.Client.ClientUtils.ParameterToString(configId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationGetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationConfigEntry>("/applications/{applicationName}/configurations/{configId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationGetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Configuration Property &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigEntry</returns>
        public async System.Threading.Tasks.Task<ApplicationConfigEntry> ApplicationConfigurationGetConfigurationAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationConfigEntry> localVarResponse = await ApplicationConfigurationGetConfigurationWithHttpInfoAsync(applicationName, configId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Configuration Property &lt;p&gt;Returns configuration (based on configuration property name) from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigEntry)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationConfigEntry>> ApplicationConfigurationGetConfigurationWithHttpInfoAsync(string applicationName, string configId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfiguration");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'configId' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfiguration");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", EssSharp.Client.ClientUtils.ParameterToString(configId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationGetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationConfigEntry>("/applications/{applicationName}/configurations/{configId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationGetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Configuration (Filtered) &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ApplicationConfigList&gt;</returns>
        public List<ApplicationConfigList> ApplicationConfigurationGetConfigurationKeys(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<List<ApplicationConfigList>> localVarResponse = ApplicationConfigurationGetConfigurationKeysWithHttpInfo(applicationName, key, configured);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Configuration (Filtered) &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ApplicationConfigList&gt;</returns>
        public EssSharp.Client.ApiResponse<List<ApplicationConfigList>> ApplicationConfigurationGetConfigurationKeysWithHttpInfo(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfigurationKeys");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (configured != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "configured", configured));
            }

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationGetConfigurationKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ApplicationConfigList>>("/applications/{applicationName}/configurationkeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationGetConfigurationKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Configuration (Filtered) &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ApplicationConfigList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationConfigList>> ApplicationConfigurationGetConfigurationKeysAsync(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<List<ApplicationConfigList>> localVarResponse = await ApplicationConfigurationGetConfigurationKeysWithHttpInfoAsync(applicationName, key, configured, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Configuration (Filtered) &lt;p&gt;Returns all the configuration properties currently set for the specified application, with option to filter by configured value.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="key">&lt;p&gt;Filter key to refine the configuration property results.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="configured">&lt;p&gt;Specify &lt;code&gt;all&lt;/code&gt; to return all configured properties. Specify &lt;code&gt;true&lt;/code&gt; to return enabled configuration properties. Specify &lt;code&gt;false&lt;/code&gt; to return configuration properties that are turned off.&lt;/p&gt; (optional, default to all)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationConfigList&gt;)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<List<ApplicationConfigList>>> ApplicationConfigurationGetConfigurationKeysWithHttpInfoAsync(string applicationName, string key = default(string), string configured = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfigurationKeys");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (configured != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "configured", configured));
            }

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationGetConfigurationKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ApplicationConfigList>>("/applications/{applicationName}/configurationkeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationGetConfigurationKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Configuration &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigList</returns>
        public ApplicationConfigList ApplicationConfigurationGetConfigurations(string applicationName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationConfigList> localVarResponse = ApplicationConfigurationGetConfigurationsWithHttpInfo(applicationName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Configuration &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigList</returns>
        public EssSharp.Client.ApiResponse<ApplicationConfigList> ApplicationConfigurationGetConfigurationsWithHttpInfo(string applicationName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfigurations");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationGetConfigurations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationConfigList>("/applications/{applicationName}/configurations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationGetConfigurations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Configuration &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigList</returns>
        public async System.Threading.Tasks.Task<ApplicationConfigList> ApplicationConfigurationGetConfigurationsAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationConfigList> localVarResponse = await ApplicationConfigurationGetConfigurationsWithHttpInfoAsync(applicationName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Configuration &lt;p&gt;Returns all the configuration properties currently set for the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationConfigList>> ApplicationConfigurationGetConfigurationsWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationGetConfigurations");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationGetConfigurations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationConfigList>("/applications/{applicationName}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationGetConfigurations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Configuration &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigEntry</returns>
        public ApplicationConfigEntry ApplicationConfigurationSetConfiguration(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationConfigEntry> localVarResponse = ApplicationConfigurationSetConfigurationWithHttpInfo(applicationName, configId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Configuration &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigEntry</returns>
        public EssSharp.Client.ApiResponse<ApplicationConfigEntry> ApplicationConfigurationSetConfigurationWithHttpInfo(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfiguration");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'configId' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfiguration");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfiguration");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", EssSharp.Client.ClientUtils.ParameterToString(configId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationSetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApplicationConfigEntry>("/applications/{applicationName}/configurations/{configId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationSetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Configuration &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigEntry</returns>
        public async System.Threading.Tasks.Task<ApplicationConfigEntry> ApplicationConfigurationSetConfigurationAsync(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationConfigEntry> localVarResponse = await ApplicationConfigurationSetConfigurationWithHttpInfoAsync(applicationName, configId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Configuration &lt;p&gt;Updates the application configuration and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="configId">&lt;p&gt;Configuration property name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entry.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigEntry)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationConfigEntry>> ApplicationConfigurationSetConfigurationWithHttpInfoAsync(string applicationName, string configId, ApplicationConfigEntry body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfiguration");
            }

            // verify the required parameter 'configId' is set
            if (configId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'configId' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfiguration");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfiguration");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("configId", EssSharp.Client.ClientUtils.ParameterToString(configId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationSetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApplicationConfigEntry>("/applications/{applicationName}/configurations/{configId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationSetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates Application Configurations &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationConfigList</returns>
        public ApplicationConfigList ApplicationConfigurationSetConfigurations(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<ApplicationConfigList> localVarResponse = ApplicationConfigurationSetConfigurationsWithHttpInfo(applicationName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates Application Configurations &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationConfigList</returns>
        public EssSharp.Client.ApiResponse<ApplicationConfigList> ApplicationConfigurationSetConfigurationsWithHttpInfo(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfigurations");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfigurations");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationSetConfigurations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApplicationConfigList>("/applications/{applicationName}/configurations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationSetConfigurations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates Application Configurations &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationConfigList</returns>
        public async System.Threading.Tasks.Task<ApplicationConfigList> ApplicationConfigurationSetConfigurationsAsync(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<ApplicationConfigList> localVarResponse = await ApplicationConfigurationSetConfigurationsWithHttpInfoAsync(applicationName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates Application Configurations &lt;p&gt;Updates the application configurations and returns the updated configuration details.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Configuration property value entries.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationConfigList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<ApplicationConfigList>> ApplicationConfigurationSetConfigurationsWithHttpInfoAsync(string applicationName, List<ApplicationConfigEntry> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfigurations");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationConfigurationApi->ApplicationConfigurationSetConfigurations");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationConfigurationApi.ApplicationConfigurationSetConfigurations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApplicationConfigList>("/applications/{applicationName}/configurations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationConfigurationSetConfigurations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
