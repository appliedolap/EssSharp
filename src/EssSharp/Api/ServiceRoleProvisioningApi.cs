/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceRoleProvisioningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deprovision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ServiceRoleProvisioningDeprovision(string id, bool? group = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Deprovision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ServiceRoleProvisioningDeprovisionWithHttpInfo(string id, bool? group = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfo</returns>
        UserGroupProvisionInfo ServiceRoleProvisioningGetProvision(string id, bool? group = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfo</returns>
        ApiResponse<UserGroupProvisionInfo> ServiceRoleProvisioningGetProvisionWithHttpInfo(string id, bool? group = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ServiceRoleProvisioningProvision(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0);

        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ServiceRoleProvisioningProvisionWithHttpInfo(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0);
        /// <summary>
        /// Search Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfoList</returns>
        UserGroupProvisionInfoList ServiceRoleProvisioningSearchProvision(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfoList</returns>
        ApiResponse<UserGroupProvisionInfoList> ServiceRoleProvisioningSearchProvisionWithHttpInfo(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceRoleProvisioningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deprovision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ServiceRoleProvisioningDeprovisionAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deprovision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ServiceRoleProvisioningDeprovisionWithHttpInfoAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfo</returns>
        System.Threading.Tasks.Task<UserGroupProvisionInfo> ServiceRoleProvisioningGetProvisionAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroupProvisionInfo>> ServiceRoleProvisioningGetProvisionWithHttpInfoAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ServiceRoleProvisioningProvisionAsync(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ServiceRoleProvisioningProvisionWithHttpInfoAsync(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfoList</returns>
        System.Threading.Tasks.Task<UserGroupProvisionInfoList> ServiceRoleProvisioningSearchProvisionAsync(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroupProvisionInfoList>> ServiceRoleProvisioningSearchProvisionWithHttpInfoAsync(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceRoleProvisioningApi : IServiceRoleProvisioningApiSync, IServiceRoleProvisioningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceRoleProvisioningApi : IServiceRoleProvisioningApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRoleProvisioningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceRoleProvisioningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRoleProvisioningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceRoleProvisioningApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRoleProvisioningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceRoleProvisioningApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceRoleProvisioningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServiceRoleProvisioningApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deprovision &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ServiceRoleProvisioningDeprovision(string id, bool? group = default(bool?), int operationIndex = 0)
        {
            ServiceRoleProvisioningDeprovisionWithHttpInfo(id, group);
        }

        /// <summary>
        /// Deprovision &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ServiceRoleProvisioningDeprovisionWithHttpInfo(string id, bool? group = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ServiceRoleProvisioningApi->ServiceRoleProvisioningDeprovision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningDeprovision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/permissions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningDeprovision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprovision &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ServiceRoleProvisioningDeprovisionAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ServiceRoleProvisioningDeprovisionWithHttpInfoAsync(id, group, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deprovision &lt;p&gt;Deprovisions a single user or group from a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ServiceRoleProvisioningDeprovisionWithHttpInfoAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ServiceRoleProvisioningApi->ServiceRoleProvisioningDeprovision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningDeprovision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/permissions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningDeprovision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfo</returns>
        public UserGroupProvisionInfo ServiceRoleProvisioningGetProvision(string id, bool? group = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfo> localVarResponse = ServiceRoleProvisioningGetProvisionWithHttpInfo(id, group);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfo</returns>
        public EssSharp.Client.ApiResponse<UserGroupProvisionInfo> ServiceRoleProvisioningGetProvisionWithHttpInfo(string id, bool? group = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ServiceRoleProvisioningApi->ServiceRoleProvisioningGetProvision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningGetProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGroupProvisionInfo>("/permissions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningGetProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfo</returns>
        public async System.Threading.Tasks.Task<UserGroupProvisionInfo> ServiceRoleProvisioningGetProvisionAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfo> localVarResponse = await ServiceRoleProvisioningGetProvisionWithHttpInfoAsync(id, group, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets service role provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfo)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<UserGroupProvisionInfo>> ServiceRoleProvisioningGetProvisionWithHttpInfoAsync(string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ServiceRoleProvisioningApi->ServiceRoleProvisioningGetProvision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningGetProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGroupProvisionInfo>("/permissions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningGetProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ServiceRoleProvisioningProvision(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0)
        {
            ServiceRoleProvisioningProvisionWithHttpInfo(id, body);
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ServiceRoleProvisioningProvisionWithHttpInfo(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ServiceRoleProvisioningApi->ServiceRoleProvisioningProvision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/permissions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ServiceRoleProvisioningProvisionAsync(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ServiceRoleProvisioningProvisionWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group for a service role.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ServiceRoleProvisioningProvisionWithHttpInfoAsync(string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ServiceRoleProvisioningApi->ServiceRoleProvisioningProvision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/permissions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Provision &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfoList</returns>
        public UserGroupProvisionInfoList ServiceRoleProvisioningSearchProvision(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfoList> localVarResponse = ServiceRoleProvisioningSearchProvisionWithHttpInfo(id, role, filter, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Provision &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfoList</returns>
        public EssSharp.Client.ApiResponse<UserGroupProvisionInfoList> ServiceRoleProvisioningSearchProvisionWithHttpInfo(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningSearchProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGroupProvisionInfoList>("/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningSearchProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Provision &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfoList</returns>
        public async System.Threading.Tasks.Task<UserGroupProvisionInfoList> ServiceRoleProvisioningSearchProvisionAsync(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfoList> localVarResponse = await ServiceRoleProvisioningSearchProvisionWithHttpInfoAsync(id, role, filter, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Provision &lt;p&gt;Search for provisioning information.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern, if not specified, returns all the users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;service_administrator&lt;/code&gt;, &lt;code&gt;power_user&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Search filter. Values available: &lt;code&gt;all/group/user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, then all users and groups having some role will be returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="page">&lt;p&gt;This is used to get the list of users/groups having no service roles in paginated manner. Page number starts with 0&lt;/p&gt; (optional, default to -1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfoList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<UserGroupProvisionInfoList>> ServiceRoleProvisioningSearchProvisionWithHttpInfoAsync(string id = default(string), string role = default(string), string filter = default(string), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "ServiceRoleProvisioningApi.ServiceRoleProvisioningSearchProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGroupProvisionInfoList>("/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ServiceRoleProvisioningSearchProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
