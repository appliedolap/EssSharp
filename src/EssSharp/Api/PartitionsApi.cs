/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartitionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionCreatePartition(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionCreatePartitionWithHttpInfo(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionDeletePartition(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionDeletePartitionWithHttpInfo(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Partition Cell Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PartitionBean</returns>
        PartitionBean PartitionGetPartitionCellCount(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0);

        /// <summary>
        /// Get Partition Cell Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PartitionBean</returns>
        ApiResponse<PartitionBean> PartitionGetPartitionCellCountWithHttpInfo(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0);
        /// <summary>
        /// Get Partitions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PartitionList</returns>
        PartitionList PartitionGetPartitions(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Partitions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PartitionList</returns>
        ApiResponse<PartitionList> PartitionGetPartitionsWithHttpInfo(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Supported Partition Types
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionGetSupportedFederatedTypes(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Supported Partition Types
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionGetSupportedFederatedTypesWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        /// <summary>
        /// Lock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionLockPartition(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Lock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionLockPartitionWithHttpInfo(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Replicate Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionReplicateDataFromSource(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0);

        /// <summary>
        /// Replicate Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionReplicateDataFromSourceWithHttpInfo(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0);
        /// <summary>
        /// Unlock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionUnlockPartition(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Unlock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionUnlockPartitionWithHttpInfo(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// Updates an existing partition
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionUpdatePartition(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// Updates an existing partition
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionUpdatePartitionWithHttpInfo(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Validate Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PartitionValidatePartition(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0);

        /// <summary>
        /// Validate Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PartitionValidatePartitionWithHttpInfo(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartitionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionCreatePartitionAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionCreatePartitionWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionDeletePartitionAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionDeletePartitionWithHttpInfoAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Partition Cell Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartitionBean</returns>
        System.Threading.Tasks.Task<PartitionBean> PartitionGetPartitionCellCountAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Partition Cell Count
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartitionBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartitionBean>> PartitionGetPartitionCellCountWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Partitions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartitionList</returns>
        System.Threading.Tasks.Task<PartitionList> PartitionGetPartitionsAsync(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Partitions
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartitionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartitionList>> PartitionGetPartitionsWithHttpInfoAsync(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Supported Partition Types
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionGetSupportedFederatedTypesAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Supported Partition Types
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionGetSupportedFederatedTypesWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionLockPartitionAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionLockPartitionWithHttpInfoAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replicate Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionReplicateDataFromSourceAsync(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replicate Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionReplicateDataFromSourceWithHttpInfoAsync(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionUnlockPartitionAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlock Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionUnlockPartitionWithHttpInfoAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// Updates an existing partition
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionUpdatePartitionAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// Updates an existing partition
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionUpdatePartitionWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PartitionValidatePartitionAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Partition
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PartitionValidatePartitionWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartitionsApi : IPartitionsApiSync, IPartitionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PartitionsApi : IPartitionsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PartitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PartitionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PartitionsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PartitionsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartitionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PartitionsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Partition &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionCreatePartition(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0)
        {
            PartitionCreatePartitionWithHttpInfo(applicationName, databaseName, body, executeInBackground);
        }

        /// <summary>
        /// Create Partition &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionCreatePartitionWithHttpInfo(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionCreatePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionCreatePartition");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionCreatePartition");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (executeInBackground != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "executeInBackground", executeInBackground));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionCreatePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionCreatePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Partition &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionCreatePartitionAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionCreatePartitionWithHttpInfoAsync(applicationName, databaseName, body, executeInBackground, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Partition &lt;p&gt;Creates a new partition. For partitions across instances, &lt;i&gt;connectionName&lt;/i&gt; must be provided.&lt;/p&gt;&lt;p&gt;If the connection is defined at the application level, the property &lt;i&gt;applicationLevelConnection&lt;/i&gt; must be specified as true.&lt;/p&gt;&lt;p&gt;If the Datasource is defined at the application level, the property &lt;i&gt;applicationLevelDatasource&lt;/i&gt;  must be specified as true.&lt;/p&gt;&lt;p&gt;Examples (with minimum required properties)&lt;/p&gt;&lt;p&gt;&lt;b&gt;TRANSPARENT/REPLICATED&lt;/b&gt; (change type appropriately)&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;TRANSPARENT&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;applicationName&#39;:&#39;Sample_2&#39;,&#39;databaseName&#39;:&#39;Basic&#39;},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}],&#39;mappings&#39;:[]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;FEDERATED&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;type&#39;:&#39;FEDERATED&#39;,&#39;isNew&#39;:true,&#39;sourceInfo&#39;:{&#39;datasourceName&#39;:&#39;federatedDatasourceExcel1&#39;,&#39;measuresDimensionName&#39;:&#39;Measures&#39;,&#39;essbaseToColumnMap&#39;:{&#39;arr&#39;:[{&#39;essbaseName&#39;:&#39;Caffeinated&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Ounces&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Pkg Type&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Population&#39;,&#39;columnName&#39;:&#39;&#39;},{&#39;essbaseName&#39;:&#39;Intro Date&#39;,&#39;columnName&#39;:&#39;&#39;}]}},&#39;areas&#39;:[{&#39;sourceArea&#39;:&#39;Jan&#39;,&#39;targetArea&#39;:&#39;Jan&#39;,&#39;slices&#39;:[]}]}&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionCreatePartitionWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionCreatePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionCreatePartition");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionCreatePartition");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (executeInBackground != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "executeInBackground", executeInBackground));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionCreatePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionCreatePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Partition &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionDeletePartition(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            PartitionDeletePartitionWithHttpInfo(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
        }

        /// <summary>
        /// Delete Partition &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionDeletePartitionWithHttpInfo(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionDeletePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionDeletePartition");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'type' when calling PartitionsApi->PartitionDeletePartition");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionDeletePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionDeletePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Partition &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionDeletePartitionAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionDeletePartitionWithHttpInfoAsync(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Partition &lt;p&gt;Deletes a partition based on the query parameters.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To delete a transparent or replicated partition, the partition type, source server, source application, and source database are required.&lt;/li&gt;&lt;li&gt;To delete a federated partition, the partition type, Datasource name, and measures dimension name are required.&lt;/li&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionDeletePartitionWithHttpInfoAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionDeletePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionDeletePartition");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'type' when calling PartitionsApi->PartitionDeletePartition");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionDeletePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionDeletePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Partition Cell Count &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PartitionBean</returns>
        public PartitionBean PartitionGetPartitionCellCount(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<PartitionBean> localVarResponse = PartitionGetPartitionCellCountWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Partition Cell Count &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PartitionBean</returns>
        public EssSharp.Client.ApiResponse<PartitionBean> PartitionGetPartitionCellCountWithHttpInfo(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionGetPartitionCellCount");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionGetPartitionCellCount");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionGetPartitionCellCount");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionGetPartitionCellCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PartitionBean>("/applications/{applicationName}/databases/{databaseName}/partitions/cellcount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionGetPartitionCellCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Partition Cell Count &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartitionBean</returns>
        public async System.Threading.Tasks.Task<PartitionBean> PartitionGetPartitionCellCountAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<PartitionBean> localVarResponse = await PartitionGetPartitionCellCountWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Partition Cell Count &lt;p&gt;Gets source and target cell counts for the partition area definitions. A partition area must have the same number of cells in the source and target.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartitionBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<PartitionBean>> PartitionGetPartitionCellCountWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionGetPartitionCellCount");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionGetPartitionCellCount");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionGetPartitionCellCount");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionGetPartitionCellCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PartitionBean>("/applications/{applicationName}/databases/{databaseName}/partitions/cellcount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionGetPartitionCellCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Partitions &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PartitionList</returns>
        public PartitionList PartitionGetPartitions(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<PartitionList> localVarResponse = PartitionGetPartitionsWithHttpInfo(applicationName, databaseName, type, offset, limit, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Partitions &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PartitionList</returns>
        public EssSharp.Client.ApiResponse<PartitionList> PartitionGetPartitionsWithHttpInfo(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionGetPartitions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionGetPartitions");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionGetPartitions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PartitionList>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionGetPartitions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Partitions &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartitionList</returns>
        public async System.Threading.Tasks.Task<PartitionList> PartitionGetPartitionsAsync(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<PartitionList> localVarResponse = await PartitionGetPartitionsWithHttpInfoAsync(applicationName, databaseName, type, offset, limit, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Partitions &lt;p&gt;Returns a list of partitions defined on the database, or a specific partition.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;With no parameters: Returns all available partitions.&lt;/li&gt;&lt;li&gt;With &lt;i&gt;type&lt;/i&gt; parameter: Returns filtered partitions list.&lt;/li&gt;&lt;li&gt;With partition type, source server, source application, and source database parameters: Returns the specified partition details.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type. Multiple types can be added with a comma separator.&lt;/p&gt; (optional)</param>
        /// <param name="offset">&lt;p&gt;Number of partitions to omit from the start of the result set.&lt;/p&gt; (optional)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of partitions to return.&lt;/p&gt; (optional)</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartitionList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<PartitionList>> PartitionGetPartitionsWithHttpInfoAsync(string applicationName, string databaseName, List<string> type = default(List<string>), int? offset = default(int?), int? limit = default(int?), string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionGetPartitions");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionGetPartitions");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionGetPartitions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PartitionList>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionGetPartitions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Supported Partition Types &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionGetSupportedFederatedTypes(string applicationName, string databaseName, int operationIndex = 0)
        {
            PartitionGetSupportedFederatedTypesWithHttpInfo(applicationName, databaseName);
        }

        /// <summary>
        /// Get Supported Partition Types &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionGetSupportedFederatedTypesWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionGetSupportedFederatedTypes");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionGetSupportedFederatedTypes");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "PartitionsApi.PartitionGetSupportedFederatedTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/supportedfederatedtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionGetSupportedFederatedTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Supported Partition Types &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionGetSupportedFederatedTypesAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionGetSupportedFederatedTypesWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Supported Partition Types &lt;p&gt;Returns supported partition types.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionGetSupportedFederatedTypesWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionGetSupportedFederatedTypes");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionGetSupportedFederatedTypes");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "PartitionsApi.PartitionGetSupportedFederatedTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/supportedfederatedtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionGetSupportedFederatedTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lock Partition &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionLockPartition(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            PartitionLockPartitionWithHttpInfo(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
        }

        /// <summary>
        /// Lock Partition &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionLockPartitionWithHttpInfo(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionLockPartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionLockPartition");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'type' when calling PartitionsApi->PartitionLockPartition");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionLockPartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/lock", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionLockPartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lock Partition &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionLockPartitionAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionLockPartitionWithHttpInfoAsync(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lock Partition &lt;p&gt;Locks partition object. For non-federated partitions, both the source and target partition objects are  locked.&lt;/p&gt; &lt;p&gt;For federated partitions, the partition type, Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent or replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionLockPartitionWithHttpInfoAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionLockPartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionLockPartition");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'type' when calling PartitionsApi->PartitionLockPartition");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionLockPartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/lock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionLockPartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replicate Data &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionReplicateDataFromSource(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0)
        {
            PartitionReplicateDataFromSourceWithHttpInfo(applicationName, databaseName, applicationName2, databaseName2, serverName, replicateOption);
        }

        /// <summary>
        /// Replicate Data &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionReplicateDataFromSourceWithHttpInfo(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }

            // verify the required parameter 'applicationName2' is set
            if (applicationName2 == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName2' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }

            // verify the required parameter 'databaseName2' is set
            if (databaseName2 == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName2' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            if (replicateOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "replicateOption", replicateOption));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionReplicateDataFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/replicatedata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionReplicateDataFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replicate Data &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionReplicateDataFromSourceAsync(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionReplicateDataFromSourceWithHttpInfoAsync(applicationName, databaseName, applicationName2, databaseName2, serverName, replicateOption, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Replicate Data &lt;p&gt;Replicates data from source to target for a replicated partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt;</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="replicateOption">&lt;p&gt;Replicate data options.&lt;/p&gt; (optional, default to UPDATED_CELLS)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionReplicateDataFromSourceWithHttpInfoAsync(string applicationName, string databaseName, string applicationName2, string databaseName2, string serverName = default(string), string replicateOption = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }

            // verify the required parameter 'applicationName2' is set
            if (applicationName2 == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName2' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }

            // verify the required parameter 'databaseName2' is set
            if (databaseName2 == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName2' when calling PartitionsApi->PartitionReplicateDataFromSource");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            if (replicateOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "replicateOption", replicateOption));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionReplicateDataFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/replicatedata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionReplicateDataFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock Partition &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionUnlockPartition(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            PartitionUnlockPartitionWithHttpInfo(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource);
        }

        /// <summary>
        /// Unlock Partition &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionUnlockPartitionWithHttpInfo(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionUnlockPartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionUnlockPartition");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'type' when calling PartitionsApi->PartitionUnlockPartition");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionUnlockPartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/unlock", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionUnlockPartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock Partition &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionUnlockPartitionAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionUnlockPartitionWithHttpInfoAsync(applicationName, databaseName, type, serverName, applicationName2, databaseName2, datasourceName, measuresDimensionName, applicationLevelDatasource, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unlock Partition &lt;p&gt;Unlocks the partition object. For non-federated partitions, both the source and target partition objects are  unlocked.&lt;/p&gt; &lt;p&gt;For federated partitions, the Datasource name, measures dimension name, and optional application level Datasource are required.&lt;/p&gt;&lt;p&gt;For transparent and replicated partitions, the source server, source application, and source database are required.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="type">&lt;p&gt;Partition type.&lt;/p&gt;</param>
        /// <param name="serverName">&lt;p&gt;Partition source server name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationName2">&lt;p&gt;Partition source application name.&lt;/p&gt; (optional)</param>
        /// <param name="databaseName2">&lt;p&gt;Partition source database name.&lt;/p&gt; (optional)</param>
        /// <param name="datasourceName">&lt;p&gt;Datasource name.&lt;/p&gt; (optional)</param>
        /// <param name="measuresDimensionName">&lt;p&gt;Measures dimension name.&lt;/p&gt; (optional)</param>
        /// <param name="applicationLevelDatasource">&lt;p&gt;Specify whether the Datasource is defined at the application level.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionUnlockPartitionWithHttpInfoAsync(string applicationName, string databaseName, string type, string serverName = default(string), string applicationName2 = default(string), string databaseName2 = default(string), string datasourceName = default(string), string measuresDimensionName = default(string), bool? applicationLevelDatasource = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionUnlockPartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionUnlockPartition");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'type' when calling PartitionsApi->PartitionUnlockPartition");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (serverName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "serverName", serverName));
            }
            if (applicationName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationName", applicationName2));
            }
            if (databaseName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "databaseName", databaseName2));
            }
            if (datasourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "datasourceName", datasourceName));
            }
            if (measuresDimensionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "measuresDimensionName", measuresDimensionName));
            }
            if (applicationLevelDatasource != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "applicationLevelDatasource", applicationLevelDatasource));
            }

            localVarRequestOptions.Operation = "PartitionsApi.PartitionUnlockPartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/unlock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionUnlockPartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Partition Updates an existing partition
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionUpdatePartition(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0)
        {
            PartitionUpdatePartitionWithHttpInfo(applicationName, databaseName, body, executeInBackground);
        }

        /// <summary>
        /// Update Partition Updates an existing partition
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionUpdatePartitionWithHttpInfo(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionUpdatePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionUpdatePartition");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionUpdatePartition");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (executeInBackground != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "executeInBackground", executeInBackground));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionUpdatePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionUpdatePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Partition Updates an existing partition
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionUpdatePartitionAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionUpdatePartitionWithHttpInfoAsync(applicationName, databaseName, body, executeInBackground, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Partition Updates an existing partition
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="executeInBackground">&lt;p&gt;Execute Analytic View federated partition in background&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionUpdatePartitionWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, bool? executeInBackground = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionUpdatePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionUpdatePartition");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionUpdatePartition");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (executeInBackground != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "executeInBackground", executeInBackground));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionUpdatePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionUpdatePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Partition &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PartitionValidatePartition(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0)
        {
            PartitionValidatePartitionWithHttpInfo(applicationName, databaseName, body);
        }

        /// <summary>
        /// Validate Partition &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> PartitionValidatePartitionWithHttpInfo(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionValidatePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionValidatePartition");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionValidatePartition");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionValidatePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionValidatePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Partition &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PartitionValidatePartitionAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PartitionValidatePartitionWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate Partition &lt;p&gt;Validates a new or existing partition.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Partition information.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> PartitionValidatePartitionWithHttpInfoAsync(string applicationName, string databaseName, PartitionBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling PartitionsApi->PartitionValidatePartition");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling PartitionsApi->PartitionValidatePartition");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling PartitionsApi->PartitionValidatePartition");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PartitionsApi.PartitionValidatePartition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{applicationName}/databases/{databaseName}/partitions/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartitionValidatePartition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
