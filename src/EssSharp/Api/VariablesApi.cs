/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariablesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        Variable VariablesCreateAppVariable(string applicationName, Variable body, int operationIndex = 0);

        /// <summary>
        /// Create Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesCreateAppVariableWithHttpInfo(string applicationName, Variable body, int operationIndex = 0);
        /// <summary>
        /// Create Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        Variable VariablesCreateVariable(string applicationName, string databaseName, Variable body, int operationIndex = 0);

        /// <summary>
        /// Create Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesCreateVariableWithHttpInfo(string applicationName, string databaseName, Variable body, int operationIndex = 0);
        /// <summary>
        /// Delete Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void VariablesDeleteAppVariable(string applicationName, string variableName, int operationIndex = 0);

        /// <summary>
        /// Delete Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VariablesDeleteAppVariableWithHttpInfo(string applicationName, string variableName, int operationIndex = 0);
        /// <summary>
        /// Delete Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void VariablesDeleteVariable(string applicationName, string databaseName, string variableName, int operationIndex = 0);

        /// <summary>
        /// Delete Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VariablesDeleteVariableWithHttpInfo(string applicationName, string databaseName, string variableName, int operationIndex = 0);
        /// <summary>
        /// Update Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        Variable VariablesEditAppVariable(string applicationName, string variableName, Variable body, int operationIndex = 0);

        /// <summary>
        /// Update Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesEditAppVariableWithHttpInfo(string applicationName, string variableName, Variable body, int operationIndex = 0);
        /// <summary>
        /// Update Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        Variable VariablesEditVariable(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0);

        /// <summary>
        /// Update Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesEditVariableWithHttpInfo(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0);
        /// <summary>
        /// Get Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        Variable VariablesGetAppVariable(string applicationName, string variableName, int operationIndex = 0);

        /// <summary>
        /// Get Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesGetAppVariableWithHttpInfo(string applicationName, string variableName, int operationIndex = 0);
        /// <summary>
        /// Get Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        Variable VariablesGetVariable(string applicationName, string databaseName, string variableName, int operationIndex = 0);

        /// <summary>
        /// Get Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesGetVariableWithHttpInfo(string applicationName, string databaseName, string variableName, int operationIndex = 0);
        /// <summary>
        /// Get Application Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VariableList</returns>
        VariableList VariablesListAppVariables(string applicationName, int operationIndex = 0);

        /// <summary>
        /// Get Application Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VariableList</returns>
        ApiResponse<VariableList> VariablesListAppVariablesWithHttpInfo(string applicationName, int operationIndex = 0);
        /// <summary>
        /// Get Database Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VariableList</returns>
        VariableList VariablesListVariables(string applicationName, string databaseName, int operationIndex = 0);

        /// <summary>
        /// Get Database Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VariableList</returns>
        ApiResponse<VariableList> VariablesListVariablesWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariablesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesCreateAppVariableAsync(string applicationName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesCreateAppVariableWithHttpInfoAsync(string applicationName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesCreateVariableAsync(string applicationName, string databaseName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesCreateVariableWithHttpInfoAsync(string applicationName, string databaseName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VariablesDeleteAppVariableAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VariablesDeleteAppVariableWithHttpInfoAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VariablesDeleteVariableAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VariablesDeleteVariableWithHttpInfoAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesEditAppVariableAsync(string applicationName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesEditAppVariableWithHttpInfoAsync(string applicationName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesEditVariableAsync(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesEditVariableWithHttpInfoAsync(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesGetAppVariableAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesGetAppVariableWithHttpInfoAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesGetVariableAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Database Variable
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesGetVariableWithHttpInfoAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VariableList</returns>
        System.Threading.Tasks.Task<VariableList> VariablesListAppVariablesAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VariableList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableList>> VariablesListAppVariablesWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Database Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VariableList</returns>
        System.Threading.Tasks.Task<VariableList> VariablesListVariablesAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Database Variables
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VariableList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableList>> VariablesListVariablesWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariablesApi : IVariablesApiSync, IVariablesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VariablesApi : IVariablesApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VariablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VariablesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VariablesApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VariablesApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariablesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VariablesApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Application Variable &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        public Variable VariablesCreateAppVariable(string applicationName, Variable body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = VariablesCreateAppVariableWithHttpInfo(applicationName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Application Variable &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        public EssSharp.Client.ApiResponse<Variable> VariablesCreateAppVariableWithHttpInfo(string applicationName, Variable body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesCreateAppVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesCreateAppVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesCreateAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Variable>("/applications/{applicationName}/variables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesCreateAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Application Variable &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesCreateAppVariableAsync(string applicationName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = await VariablesCreateAppVariableWithHttpInfoAsync(applicationName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Application Variable &lt;p&gt;Creates a substitution variable in the specified application, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Variable>> VariablesCreateAppVariableWithHttpInfoAsync(string applicationName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesCreateAppVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesCreateAppVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesCreateAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Variable>("/applications/{applicationName}/variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesCreateAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Database Variable &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        public Variable VariablesCreateVariable(string applicationName, string databaseName, Variable body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = VariablesCreateVariableWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Database Variable &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        public EssSharp.Client.ApiResponse<Variable> VariablesCreateVariableWithHttpInfo(string applicationName, string databaseName, Variable body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesCreateVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesCreateVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesCreateVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesCreateVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Variable>("/applications/{applicationName}/databases/{databaseName}/variables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesCreateVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Database Variable &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesCreateVariableAsync(string applicationName, string databaseName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = await VariablesCreateVariableWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Database Variable &lt;p&gt;Creates a substitution variable in the specified application and database, and returns the created variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Variable>> VariablesCreateVariableWithHttpInfoAsync(string applicationName, string databaseName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesCreateVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesCreateVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesCreateVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesCreateVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Variable>("/applications/{applicationName}/databases/{databaseName}/variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesCreateVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Variable &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void VariablesDeleteAppVariable(string applicationName, string variableName, int operationIndex = 0)
        {
            VariablesDeleteAppVariableWithHttpInfo(applicationName, variableName);
        }

        /// <summary>
        /// Delete Application Variable &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> VariablesDeleteAppVariableWithHttpInfo(string applicationName, string variableName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesDeleteAppVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesDeleteAppVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesDeleteAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/variables/{variableName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesDeleteAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Variable &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VariablesDeleteAppVariableAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await VariablesDeleteAppVariableWithHttpInfoAsync(applicationName, variableName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Application Variable &lt;p&gt;Deletes the specified substitution variable from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> VariablesDeleteAppVariableWithHttpInfoAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesDeleteAppVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesDeleteAppVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesDeleteAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/variables/{variableName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesDeleteAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Database Variable &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void VariablesDeleteVariable(string applicationName, string databaseName, string variableName, int operationIndex = 0)
        {
            VariablesDeleteVariableWithHttpInfo(applicationName, databaseName, variableName);
        }

        /// <summary>
        /// Delete Database Variable &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> VariablesDeleteVariableWithHttpInfo(string applicationName, string databaseName, string variableName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesDeleteVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesDeleteVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesDeleteVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesDeleteVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{applicationName}/databases/{databaseName}/variables/{variableName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesDeleteVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Database Variable &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VariablesDeleteVariableAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await VariablesDeleteVariableWithHttpInfoAsync(applicationName, databaseName, variableName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Database Variable &lt;p&gt;Deletes the specified substitution variable from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> VariablesDeleteVariableWithHttpInfoAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesDeleteVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesDeleteVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesDeleteVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesDeleteVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{applicationName}/databases/{databaseName}/variables/{variableName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesDeleteVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Variable &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        public Variable VariablesEditAppVariable(string applicationName, string variableName, Variable body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = VariablesEditAppVariableWithHttpInfo(applicationName, variableName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Variable &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        public EssSharp.Client.ApiResponse<Variable> VariablesEditAppVariableWithHttpInfo(string applicationName, string variableName, Variable body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesEditAppVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesEditAppVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesEditAppVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesEditAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Variable>("/applications/{applicationName}/variables/{variableName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesEditAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Variable &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesEditAppVariableAsync(string applicationName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = await VariablesEditAppVariableWithHttpInfoAsync(applicationName, variableName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Variable &lt;p&gt;Updates the substitution variable in the specified application, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Variable>> VariablesEditAppVariableWithHttpInfoAsync(string applicationName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesEditAppVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesEditAppVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesEditAppVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesEditAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Variable>("/applications/{applicationName}/variables/{variableName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesEditAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Database Variable &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        public Variable VariablesEditVariable(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = VariablesEditVariableWithHttpInfo(applicationName, databaseName, variableName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Database Variable &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        public EssSharp.Client.ApiResponse<Variable> VariablesEditVariableWithHttpInfo(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesEditVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesEditVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesEditVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesEditVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesEditVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Variable>("/applications/{applicationName}/databases/{databaseName}/variables/{variableName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesEditVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Database Variable &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesEditVariableAsync(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = await VariablesEditVariableWithHttpInfoAsync(applicationName, databaseName, variableName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Database Variable &lt;p&gt;Updates a substitution variable in the specified application and database, and returns the updated variable.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Variable details.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Variable>> VariablesEditVariableWithHttpInfoAsync(string applicationName, string databaseName, string variableName, Variable body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesEditVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesEditVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesEditVariable");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling VariablesApi->VariablesEditVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "VariablesApi.VariablesEditVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Variable>("/applications/{applicationName}/databases/{databaseName}/variables/{variableName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesEditVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Variable &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        public Variable VariablesGetAppVariable(string applicationName, string variableName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = VariablesGetAppVariableWithHttpInfo(applicationName, variableName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Variable &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        public EssSharp.Client.ApiResponse<Variable> VariablesGetAppVariableWithHttpInfo(string applicationName, string variableName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesGetAppVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesGetAppVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesGetAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Variable>("/applications/{applicationName}/variables/{variableName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesGetAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Variable &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesGetAppVariableAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = await VariablesGetAppVariableWithHttpInfoAsync(applicationName, variableName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Variable &lt;p&gt;Returns substitution variable details from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Variable>> VariablesGetAppVariableWithHttpInfoAsync(string applicationName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesGetAppVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesGetAppVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesGetAppVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Variable>("/applications/{applicationName}/variables/{variableName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesGetAppVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Database Variable &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Variable</returns>
        public Variable VariablesGetVariable(string applicationName, string databaseName, string variableName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = VariablesGetVariableWithHttpInfo(applicationName, databaseName, variableName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Database Variable &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Variable</returns>
        public EssSharp.Client.ApiResponse<Variable> VariablesGetVariableWithHttpInfo(string applicationName, string databaseName, string variableName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesGetVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesGetVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesGetVariable");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesGetVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Variable>("/applications/{applicationName}/databases/{databaseName}/variables/{variableName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesGetVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Database Variable &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesGetVariableAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Variable> localVarResponse = await VariablesGetVariableWithHttpInfoAsync(applicationName, databaseName, variableName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Database Variable &lt;p&gt;Returns the substitution variable details from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="variableName">&lt;p&gt;Variable name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Variable>> VariablesGetVariableWithHttpInfoAsync(string applicationName, string databaseName, string variableName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesGetVariable");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesGetVariable");
            }

            // verify the required parameter 'variableName' is set
            if (variableName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'variableName' when calling VariablesApi->VariablesGetVariable");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("variableName", EssSharp.Client.ClientUtils.ParameterToString(variableName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesGetVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Variable>("/applications/{applicationName}/databases/{databaseName}/variables/{variableName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesGetVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Variables &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VariableList</returns>
        public VariableList VariablesListAppVariables(string applicationName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<VariableList> localVarResponse = VariablesListAppVariablesWithHttpInfo(applicationName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Variables &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VariableList</returns>
        public EssSharp.Client.ApiResponse<VariableList> VariablesListAppVariablesWithHttpInfo(string applicationName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesListAppVariables");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesListAppVariables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VariableList>("/applications/{applicationName}/variables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesListAppVariables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Variables &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VariableList</returns>
        public async System.Threading.Tasks.Task<VariableList> VariablesListAppVariablesAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<VariableList> localVarResponse = await VariablesListAppVariablesWithHttpInfoAsync(applicationName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Variables &lt;p&gt;Returns all substitution variables from the specified application.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VariableList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<VariableList>> VariablesListAppVariablesWithHttpInfoAsync(string applicationName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesListAppVariables");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesListAppVariables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VariableList>("/applications/{applicationName}/variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesListAppVariables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Database Variables &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VariableList</returns>
        public VariableList VariablesListVariables(string applicationName, string databaseName, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<VariableList> localVarResponse = VariablesListVariablesWithHttpInfo(applicationName, databaseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Database Variables &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VariableList</returns>
        public EssSharp.Client.ApiResponse<VariableList> VariablesListVariablesWithHttpInfo(string applicationName, string databaseName, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesListVariables");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesListVariables");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesListVariables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VariableList>("/applications/{applicationName}/databases/{databaseName}/variables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesListVariables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Database Variables &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VariableList</returns>
        public async System.Threading.Tasks.Task<VariableList> VariablesListVariablesAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<VariableList> localVarResponse = await VariablesListVariablesWithHttpInfoAsync(applicationName, databaseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Database Variables &lt;p&gt;Returns all substitution variables from the specified application and database.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VariableList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<VariableList>> VariablesListVariablesWithHttpInfoAsync(string applicationName, string databaseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling VariablesApi->VariablesListVariables");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling VariablesApi->VariablesListVariables");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter

            localVarRequestOptions.Operation = "VariablesApi.VariablesListVariables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VariableList>("/applications/{applicationName}/databases/{databaseName}/variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VariablesListVariables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
