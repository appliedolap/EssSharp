/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Execute Grid Operation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid GridExecute(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0);

        /// <summary>
        /// Execute Grid Operation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GridExecuteWithHttpInfo(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0);
        /// <summary>
        /// Execute Grid Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid GridExecuteLayout(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0);

        /// <summary>
        /// Execute Grid Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GridExecuteLayoutWithHttpInfo(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0);
        /// <summary>
        /// Execute MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid GridExecuteMDX(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0);

        /// <summary>
        /// Execute MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GridExecuteMDXWithHttpInfo(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0);
        /// <summary>
        /// Get Default Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid GridGetDefault(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Default Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GridGetDefaultWithHttpInfo(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Layout Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid GridGetLayoutGrid(string applicationName, string databaseName, Grid body, int operationIndex = 0);

        /// <summary>
        /// Get Layout Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GridGetLayoutGridWithHttpInfo(string applicationName, string databaseName, Grid body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Execute Grid Operation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GridExecuteAsync(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute Grid Operation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GridExecuteWithHttpInfoAsync(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute Grid Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GridExecuteLayoutAsync(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute Grid Layout
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GridExecuteLayoutWithHttpInfoAsync(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GridExecuteMDXAsync(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute MDX Report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GridExecuteMDXWithHttpInfoAsync(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Default Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GridGetDefaultAsync(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Default Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GridGetDefaultWithHttpInfoAsync(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Layout Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GridGetLayoutGridAsync(string applicationName, string databaseName, Grid body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Layout Grid
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GridGetLayoutGridWithHttpInfoAsync(string applicationName, string databaseName, Grid body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApi : IGridApiSync, IGridApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GridApi : IGridApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GridApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GridApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GridApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GridApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Execute Grid Operation &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid GridExecute(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = GridExecuteWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Grid Operation &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public EssSharp.Client.ApiResponse<Grid> GridExecuteWithHttpInfo(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridExecute");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridExecute");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GridApi.GridExecute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Grid>("/applications/{applicationName}/databases/{databaseName}/grid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridExecute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Grid Operation &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GridExecuteAsync(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = await GridExecuteWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Grid Operation &lt;p&gt;Returns the grid for specified operation. Supported grid operations are Zoom In (zoomin), Zoom Out (zoomout), Refresh (refresh), Keep Only (keeponly), Remove Only (removeonly), Submit (submit), Pivot (pivot), and Pivot To POV (pivotToPOV).&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid operation.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid operation.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;Grid Operation to be performed.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Grid>> GridExecuteWithHttpInfoAsync(string applicationName, string databaseName, GridOperation body = default(GridOperation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridExecute");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridExecute");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GridApi.GridExecute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Grid>("/applications/{applicationName}/databases/{databaseName}/grid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridExecute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Grid Layout &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid GridExecuteLayout(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = GridExecuteLayoutWithHttpInfo(applicationName, databaseName, layout, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Grid Layout &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public EssSharp.Client.ApiResponse<Grid> GridExecuteLayoutWithHttpInfo(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridExecuteLayout");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridExecuteLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling GridApi->GridExecuteLayout");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            localVarRequestOptions.Operation = "GridApi.GridExecuteLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Grid>("/applications/{applicationName}/databases/{databaseName}/grid/layout/{layout}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridExecuteLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Grid Layout &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GridExecuteLayoutAsync(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = await GridExecuteLayoutWithHttpInfoAsync(applicationName, databaseName, layout, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Grid Layout &lt;p&gt;Renders the grid for the specified layout.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid layout.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid layout.&lt;/p&gt;</param>
        /// <param name="layout">&lt;p&gt;Layout name to be executed.&lt;/p&gt;</param>
        /// <param name="user">&lt;p&gt;Owner of the layout.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Grid>> GridExecuteLayoutWithHttpInfoAsync(string applicationName, string databaseName, string layout, string user = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridExecuteLayout");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridExecuteLayout");
            }

            // verify the required parameter 'layout' is set
            if (layout == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'layout' when calling GridApi->GridExecuteLayout");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("layout", EssSharp.Client.ClientUtils.ParameterToString(layout)); // path parameter
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            localVarRequestOptions.Operation = "GridApi.GridExecuteLayout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Grid>("/applications/{applicationName}/databases/{databaseName}/grid/layout/{layout}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridExecuteLayout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute MDX Report &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid GridExecuteMDX(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = GridExecuteMDXWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute MDX Report &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public EssSharp.Client.ApiResponse<Grid> GridExecuteMDXWithHttpInfo(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridExecuteMDX");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridExecuteMDX");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GridApi->GridExecuteMDX");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GridApi.GridExecuteMDX";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Grid>("/applications/{applicationName}/databases/{databaseName}/grid/mdx", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridExecuteMDX", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute MDX Report &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GridExecuteMDXAsync(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = await GridExecuteMDXWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute MDX Report &lt;p&gt;Returns an output grid from the specified MDX report.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;MDX report for grid.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Grid>> GridExecuteMDXWithHttpInfoAsync(string applicationName, string databaseName, MDXOperation body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridExecuteMDX");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridExecuteMDX");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GridApi->GridExecuteMDX");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GridApi.GridExecuteMDX";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Grid>("/applications/{applicationName}/databases/{databaseName}/grid/mdx", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridExecuteMDX", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Default Grid &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid GridGetDefault(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = GridGetDefaultWithHttpInfo(applicationName, databaseName, reset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Default Grid &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public EssSharp.Client.ApiResponse<Grid> GridGetDefaultWithHttpInfo(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridGetDefault");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridGetDefault");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (reset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "reset", reset));
            }

            localVarRequestOptions.Operation = "GridApi.GridGetDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Grid>("/applications/{applicationName}/databases/{databaseName}/grid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridGetDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Default Grid &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GridGetDefaultAsync(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = await GridGetDefaultWithHttpInfoAsync(applicationName, databaseName, reset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Default Grid &lt;p&gt;Returns the default grid layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="reset">&lt;p&gt;Reset flag to avoid saved grid layout.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Grid>> GridGetDefaultWithHttpInfoAsync(string applicationName, string databaseName, bool? reset = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridGetDefault");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridGetDefault");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            if (reset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "reset", reset));
            }

            localVarRequestOptions.Operation = "GridApi.GridGetDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Grid>("/applications/{applicationName}/databases/{databaseName}/grid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridGetDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Layout Grid &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid GridGetLayoutGrid(string applicationName, string databaseName, Grid body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = GridGetLayoutGridWithHttpInfo(applicationName, databaseName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Layout Grid &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public EssSharp.Client.ApiResponse<Grid> GridGetLayoutGridWithHttpInfo(string applicationName, string databaseName, Grid body, int operationIndex = 0)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridGetLayoutGrid");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridGetLayoutGrid");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GridApi->GridGetLayoutGrid");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GridApi.GridGetLayoutGrid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Grid>("/applications/{applicationName}/databases/{databaseName}/grid/layout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridGetLayoutGrid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Layout Grid &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GridGetLayoutGridAsync(string applicationName, string databaseName, Grid body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<Grid> localVarResponse = await GridGetLayoutGridWithHttpInfoAsync(applicationName, databaseName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Layout Grid &lt;p&gt;Returns the layout grid for the current grid to be saved as layout for the specified cube.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName">&lt;p&gt;Application name for default grid.&lt;/p&gt;</param>
        /// <param name="databaseName">&lt;p&gt;Database/Cube name for default grid.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;The current grid displayed.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Grid>> GridGetLayoutGridWithHttpInfoAsync(string applicationName, string databaseName, Grid body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'applicationName' when calling GridApi->GridGetLayoutGrid");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'databaseName' when calling GridApi->GridGetLayoutGrid");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling GridApi->GridGetLayoutGrid");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("applicationName", EssSharp.Client.ClientUtils.ParameterToString(applicationName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", EssSharp.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GridApi.GridGetLayoutGrid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Grid>("/applications/{applicationName}/databases/{databaseName}/grid/layout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridGetLayoutGrid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
