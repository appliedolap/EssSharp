/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationRoleProvisioningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deprovision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationRoleProvisioningDeprovision(string app, string id, bool? group = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Deprovision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationRoleProvisioningDeprovisionWithHttpInfo(string app, string id, bool? group = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfo</returns>
        UserGroupProvisionInfo ApplicationRoleProvisioningGetProvision(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfo</returns>
        ApiResponse<UserGroupProvisionInfo> ApplicationRoleProvisioningGetProvisionWithHttpInfo(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Import Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationRoleProvisioningImportProvision(string app, int operationIndex = 0);

        /// <summary>
        /// Import Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationRoleProvisioningImportProvisionWithHttpInfo(string app, int operationIndex = 0);
        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApplicationRoleProvisioningProvision(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0);

        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationRoleProvisioningProvisionWithHttpInfo(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0);
        /// <summary>
        /// Search Application Provisioning
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfoList</returns>
        UserGroupProvisionInfoList ApplicationRoleProvisioningSearchProvision(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Search Application Provisioning
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfoList</returns>
        ApiResponse<UserGroupProvisionInfoList> ApplicationRoleProvisioningSearchProvisionWithHttpInfo(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationRoleProvisioningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deprovision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationRoleProvisioningDeprovisionAsync(string app, string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deprovision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationRoleProvisioningDeprovisionWithHttpInfoAsync(string app, string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfo</returns>
        System.Threading.Tasks.Task<UserGroupProvisionInfo> ApplicationRoleProvisioningGetProvisionAsync(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroupProvisionInfo>> ApplicationRoleProvisioningGetProvisionWithHttpInfoAsync(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationRoleProvisioningImportProvisionAsync(string app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Provision
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationRoleProvisioningImportProvisionWithHttpInfoAsync(string app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationRoleProvisioningProvisionAsync(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provision User or Group
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationRoleProvisioningProvisionWithHttpInfoAsync(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Application Provisioning
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfoList</returns>
        System.Threading.Tasks.Task<UserGroupProvisionInfoList> ApplicationRoleProvisioningSearchProvisionAsync(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Application Provisioning
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroupProvisionInfoList>> ApplicationRoleProvisioningSearchProvisionWithHttpInfoAsync(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationRoleProvisioningApi : IApplicationRoleProvisioningApiSync, IApplicationRoleProvisioningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationRoleProvisioningApi : IApplicationRoleProvisioningApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationRoleProvisioningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationRoleProvisioningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationRoleProvisioningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationRoleProvisioningApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationRoleProvisioningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationRoleProvisioningApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationRoleProvisioningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationRoleProvisioningApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deprovision User or Group &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationRoleProvisioningDeprovision(string app, string id, bool? group = default(bool?), int operationIndex = 0)
        {
            ApplicationRoleProvisioningDeprovisionWithHttpInfo(app, id, group);
        }

        /// <summary>
        /// Deprovision User or Group &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationRoleProvisioningDeprovisionWithHttpInfo(string app, string id, bool? group = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningDeprovision");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningDeprovision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningDeprovision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/applications/{app}/permissions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningDeprovision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprovision User or Group &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationRoleProvisioningDeprovisionAsync(string app, string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationRoleProvisioningDeprovisionWithHttpInfoAsync(app, id, group, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deprovision User or Group &lt;p&gt;Deprovisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationRoleProvisioningDeprovisionWithHttpInfoAsync(string app, string id, bool? group = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningDeprovision");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningDeprovision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningDeprovision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/applications/{app}/permissions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningDeprovision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfo</returns>
        public UserGroupProvisionInfo ApplicationRoleProvisioningGetProvision(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfo> localVarResponse = ApplicationRoleProvisioningGetProvisionWithHttpInfo(app, id, group, inherited);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfo</returns>
        public EssSharp.Client.ApiResponse<UserGroupProvisionInfo> ApplicationRoleProvisioningGetProvisionWithHttpInfo(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningGetProvision");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningGetProvision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (inherited != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "inherited", inherited));
            }

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningGetProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGroupProvisionInfo>("/applications/{app}/permissions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningGetProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfo</returns>
        public async System.Threading.Tasks.Task<UserGroupProvisionInfo> ApplicationRoleProvisioningGetProvisionAsync(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfo> localVarResponse = await ApplicationRoleProvisioningGetProvisionWithHttpInfoAsync(app, id, group, inherited, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Provision &lt;p&gt;Gets provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="group">&lt;p&gt;If true, ID is for a group. If false, ID is for a user. Default is false (ID is considered to be for a user.)&lt;/p&gt; (optional, default to false)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfo)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<UserGroupProvisionInfo>> ApplicationRoleProvisioningGetProvisionWithHttpInfoAsync(string app, string id, bool? group = default(bool?), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningGetProvision");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningGetProvision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (inherited != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "inherited", inherited));
            }

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningGetProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGroupProvisionInfo>("/applications/{app}/permissions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningGetProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Provision &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationRoleProvisioningImportProvision(string app, int operationIndex = 0)
        {
            ApplicationRoleProvisioningImportProvisionWithHttpInfo(app);
        }

        /// <summary>
        /// Import Provision &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationRoleProvisioningImportProvisionWithHttpInfo(string app, int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningImportProvision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningImportProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/applications/{app}/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningImportProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Provision &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationRoleProvisioningImportProvisionAsync(string app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationRoleProvisioningImportProvisionWithHttpInfoAsync(app, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Import Provision &lt;p&gt;Imports provisioning information for multiple users or groups on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationRoleProvisioningImportProvisionWithHttpInfoAsync(string app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningImportProvision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningImportProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/applications/{app}/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningImportProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApplicationRoleProvisioningProvision(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0)
        {
            ApplicationRoleProvisioningProvisionWithHttpInfo(app, id, body);
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> ApplicationRoleProvisioningProvisionWithHttpInfo(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningProvision");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningProvision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/applications/{app}/permissions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationRoleProvisioningProvisionAsync(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplicationRoleProvisioningProvisionWithHttpInfoAsync(app, id, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Provision User or Group &lt;p&gt;Provisions a single user or group on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID.&lt;/p&gt;</param>
        /// <param name="body">&lt;p&gt;User or group provisioning information.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> ApplicationRoleProvisioningProvisionWithHttpInfoAsync(string app, string id, UserGroupProvisionInfo body = default(UserGroupProvisionInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningProvision");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningProvision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/applications/{app}/permissions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Application Provisioning &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGroupProvisionInfoList</returns>
        public UserGroupProvisionInfoList ApplicationRoleProvisioningSearchProvision(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfoList> localVarResponse = ApplicationRoleProvisioningSearchProvisionWithHttpInfo(app, id, role, filter, inherited);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Application Provisioning &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGroupProvisionInfoList</returns>
        public EssSharp.Client.ApiResponse<UserGroupProvisionInfoList> ApplicationRoleProvisioningSearchProvisionWithHttpInfo(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningSearchProvision");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (inherited != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "inherited", inherited));
            }

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningSearchProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGroupProvisionInfoList>("/applications/{app}/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningSearchProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Application Provisioning &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroupProvisionInfoList</returns>
        public async System.Threading.Tasks.Task<UserGroupProvisionInfoList> ApplicationRoleProvisioningSearchProvisionAsync(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<UserGroupProvisionInfoList> localVarResponse = await ApplicationRoleProvisioningSearchProvisionWithHttpInfoAsync(app, id, role, filter, inherited, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Application Provisioning &lt;p&gt;Search for provisioning information on the specified application.&lt;/p&gt; &lt;p&gt;If you are using EPM Shared Services security mode, this operation is not available. Instead, manage users, groups, and permissions in the Shared Services Console.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app">&lt;p&gt;Application name.&lt;/p&gt;</param>
        /// <param name="id">&lt;p&gt;User or group ID wildcard pattern. if specified, returns users and groups matching the pattern. If not specified, returns all users and groups having some role. Users or groups having no role are not returned.&lt;/p&gt; (optional, default to &quot;*&quot;)</param>
        /// <param name="role">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, or a comma-separated list of roles (for example, &lt;code&gt;app_manager&lt;/code&gt;, &lt;code&gt;db_manager&lt;/code&gt;, &lt;code&gt;db_update&lt;/code&gt;,or &lt;code&gt;db_access&lt;/code&gt;). Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups having some role are returned. If &lt;code&gt;none&lt;/code&gt; is specified, only users and groups having no role will be returned. If named roles are specified, then only users and groups having any of the named roles are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="filter">&lt;p&gt;Input may include &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;. Default value is &lt;code&gt;all&lt;/code&gt;, so if this query parameter is not specified, all users and groups are returned.&lt;/p&gt; (optional, default to &quot;all&quot;)</param>
        /// <param name="inherited">&lt;p&gt;If true, consider roles derived through parent groups. Default is false.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroupProvisionInfoList)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<UserGroupProvisionInfoList>> ApplicationRoleProvisioningSearchProvisionWithHttpInfoAsync(string app, string id = default(string), string role = default(string), string filter = default(string), bool? inherited = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'app' when calling ApplicationRoleProvisioningApi->ApplicationRoleProvisioningSearchProvision");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app", EssSharp.Client.ClientUtils.ParameterToString(app)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "role", role));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (inherited != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "inherited", inherited));
            }

            localVarRequestOptions.Operation = "ApplicationRoleProvisioningApi.ApplicationRoleProvisioningSearchProvision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGroupProvisionInfoList>("/applications/{app}/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationRoleProvisioningSearchProvision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
