/*
 * The REST API for Oracle Essbase enables you to automate management of Essbase resources and operations. All requests and responses are communicated over secured HTTP.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EssSharp.Client;
using EssSharp.Model;

namespace EssSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Rerun Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordBean</returns>
        JobRecordBean JobsExecuteByJobId(long id, int operationIndex = 0);

        /// <summary>
        /// Rerun Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordBean</returns>
        ApiResponse<JobRecordBean> JobsExecuteByJobIdWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordBean</returns>
        JobRecordBean JobsExecuteJob(JobsInputBean body, int operationIndex = 0);

        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordBean</returns>
        ApiResponse<JobRecordBean> JobsExecuteJobWithHttpInfo(JobsInputBean body, int operationIndex = 0);
        /// <summary>
        /// Get Job List
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordPaginatedResultWrapper</returns>
        JobRecordPaginatedResultWrapper JobsGetAllJobRecords(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Job List
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordPaginatedResultWrapper</returns>
        ApiResponse<JobRecordPaginatedResultWrapper> JobsGetAllJobRecordsWithHttpInfo(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordBean</returns>
        JobRecordBean JobsGetJobInfo(string id, int operationIndex = 0);

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordBean</returns>
        ApiResponse<JobRecordBean> JobsGetJobInfoWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get Job Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobStatisticsBean</returns>
        JobStatisticsBean JobsGetJobStatistics(string userId, int operationIndex = 0);

        /// <summary>
        /// Get Job Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobStatisticsBean</returns>
        ApiResponse<JobStatisticsBean> JobsGetJobStatisticsWithHttpInfo(string userId, int operationIndex = 0);
        /// <summary>
        /// Delete jobs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void JobsPurge(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0);

        /// <summary>
        /// Delete jobs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> JobsPurgeWithHttpInfo(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Rerun Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordBean</returns>
        System.Threading.Tasks.Task<JobRecordBean> JobsExecuteByJobIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rerun Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRecordBean>> JobsExecuteByJobIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordBean</returns>
        System.Threading.Tasks.Task<JobRecordBean> JobsExecuteJobAsync(JobsInputBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRecordBean>> JobsExecuteJobWithHttpInfoAsync(JobsInputBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job List
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordPaginatedResultWrapper</returns>
        System.Threading.Tasks.Task<JobRecordPaginatedResultWrapper> JobsGetAllJobRecordsAsync(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job List
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordPaginatedResultWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRecordPaginatedResultWrapper>> JobsGetAllJobRecordsWithHttpInfoAsync(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordBean</returns>
        System.Threading.Tasks.Task<JobRecordBean> JobsGetJobInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRecordBean>> JobsGetJobInfoWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatisticsBean</returns>
        System.Threading.Tasks.Task<JobStatisticsBean> JobsGetJobStatisticsAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatisticsBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatisticsBean>> JobsGetJobStatisticsWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete jobs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task JobsPurgeAsync(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete jobs
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> JobsPurgeWithHttpInfoAsync(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IJobsApiSync, IJobsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private EssSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(string basePath)
        {
            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                new EssSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(EssSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EssSharp.Client.Configuration.MergeConfigurations(
                EssSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EssSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobsApi(EssSharp.Client.ISynchronousClient client, EssSharp.Client.IAsynchronousClient asyncClient, EssSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EssSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EssSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EssSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EssSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EssSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Rerun Job &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordBean</returns>
        public JobRecordBean JobsExecuteByJobId(long id, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<JobRecordBean> localVarResponse = JobsExecuteByJobIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rerun Job &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordBean</returns>
        public EssSharp.Client.ApiResponse<JobRecordBean> JobsExecuteByJobIdWithHttpInfo(long id, int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JobsApi.JobsExecuteByJobId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobRecordBean>("/jobs/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsExecuteByJobId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rerun Job &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordBean</returns>
        public async System.Threading.Tasks.Task<JobRecordBean> JobsExecuteByJobIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<JobRecordBean> localVarResponse = await JobsExecuteByJobIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rerun Job &lt;p&gt;Reruns the job, returning job information and new job ID.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">&lt;p&gt;Job ID.&lt;/p&gt;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<JobRecordBean>> JobsExecuteByJobIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JobsApi.JobsExecuteByJobId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobRecordBean>("/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsExecuteByJobId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Job &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordBean</returns>
        public JobRecordBean JobsExecuteJob(JobsInputBean body, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<JobRecordBean> localVarResponse = JobsExecuteJobWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Job &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordBean</returns>
        public EssSharp.Client.ApiResponse<JobRecordBean> JobsExecuteJobWithHttpInfo(JobsInputBean body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling JobsApi->JobsExecuteJob");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JobsApi.JobsExecuteJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobRecordBean>("/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsExecuteJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Job &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordBean</returns>
        public async System.Threading.Tasks.Task<JobRecordBean> JobsExecuteJobAsync(JobsInputBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<JobRecordBean> localVarResponse = await JobsExecuteJobWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Job &lt;p&gt;Executes the job and returns the record containing job information, such as job ID, status, inputs, and output information for the current job.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">parameter provided as json string in the request body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<JobRecordBean>> JobsExecuteJobWithHttpInfoAsync(JobsInputBean body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'body' when calling JobsApi->JobsExecuteJob");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JobsApi.JobsExecuteJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobRecordBean>("/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsExecuteJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job List &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordPaginatedResultWrapper</returns>
        public JobRecordPaginatedResultWrapper JobsGetAllJobRecords(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<JobRecordPaginatedResultWrapper> localVarResponse = JobsGetAllJobRecordsWithHttpInfo(keyword, fullAppName, orderBy, offset, limit, systemjobs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job List &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordPaginatedResultWrapper</returns>
        public EssSharp.Client.ApiResponse<JobRecordPaginatedResultWrapper> JobsGetAllJobRecordsWithHttpInfo(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (fullAppName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fullAppName", fullAppName));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (systemjobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "systemjobs", systemjobs));
            }

            localVarRequestOptions.Operation = "JobsApi.JobsGetAllJobRecords";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobRecordPaginatedResultWrapper>("/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsGetAllJobRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job List &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordPaginatedResultWrapper</returns>
        public async System.Threading.Tasks.Task<JobRecordPaginatedResultWrapper> JobsGetAllJobRecordsAsync(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<JobRecordPaginatedResultWrapper> localVarResponse = await JobsGetAllJobRecordsWithHttpInfoAsync(keyword, fullAppName, orderBy, offset, limit, systemjobs, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job List &lt;p&gt;Returns job list for the given query parameters, including job status, type, and input and output information. If no query parameter is specified, returns a list of all the jobs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">&lt;p&gt;Filter the job records using a keyword that may be part of the job ID, application name, database name, job file name (script), or user name. If this parameter and fullAppName are both specified, fullAppName takes precedence.&lt;/p&gt; (optional)</param>
        /// <param name="fullAppName">&lt;p&gt;Application name for which to retrieve job records.&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">&lt;p&gt;Order By specification. By default, jobs records are returned by job IDs in descending order.&lt;/p&gt; (optional, default to &quot;job_ID:desc&quot;)</param>
        /// <param name="offset">&lt;p&gt;Number of jobs to omit from the start of the result set.&lt;/p&gt; (optional, default to 0)</param>
        /// <param name="limit">&lt;p&gt;Maximum number of jobs to fetch. &lt;/p&gt; (optional, default to 50)</param>
        /// <param name="systemjobs">&lt;p&gt;Include backup jobs in jobs records.&lt;/p&gt; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordPaginatedResultWrapper)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<JobRecordPaginatedResultWrapper>> JobsGetAllJobRecordsWithHttpInfoAsync(string keyword = default(string), string fullAppName = default(string), string orderBy = default(string), long? offset = default(long?), long? limit = default(long?), bool? systemjobs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (fullAppName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "fullAppName", fullAppName));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (systemjobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "systemjobs", systemjobs));
            }

            localVarRequestOptions.Operation = "JobsApi.JobsGetAllJobRecords";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobRecordPaginatedResultWrapper>("/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsGetAllJobRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRecordBean</returns>
        public JobRecordBean JobsGetJobInfo(string id, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<JobRecordBean> localVarResponse = JobsGetJobInfoWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRecordBean</returns>
        public EssSharp.Client.ApiResponse<JobRecordBean> JobsGetJobInfoWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobsGetJobInfo");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JobsApi.JobsGetJobInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobRecordBean>("/jobs/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsGetJobInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRecordBean</returns>
        public async System.Threading.Tasks.Task<JobRecordBean> JobsGetJobInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<JobRecordBean> localVarResponse = await JobsGetJobInfoWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job &lt;p&gt;Returns job information for given job ID, including job status, type, and input and output information.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Job ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRecordBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<JobRecordBean>> JobsGetJobInfoWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobsGetJobInfo");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EssSharp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "JobsApi.JobsGetJobInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobRecordBean>("/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsGetJobInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Statistics &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobStatisticsBean</returns>
        public JobStatisticsBean JobsGetJobStatistics(string userId, int operationIndex = 0)
        {
            EssSharp.Client.ApiResponse<JobStatisticsBean> localVarResponse = JobsGetJobStatisticsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Statistics &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobStatisticsBean</returns>
        public EssSharp.Client.ApiResponse<JobStatisticsBean> JobsGetJobStatisticsWithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling JobsApi->JobsGetJobStatistics");
            }

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "JobsApi.JobsGetJobStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobStatisticsBean>("/jobs/statistics/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsGetJobStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Statistics &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatisticsBean</returns>
        public async System.Threading.Tasks.Task<JobStatisticsBean> JobsGetJobStatisticsAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EssSharp.Client.ApiResponse<JobStatisticsBean> localVarResponse = await JobsGetJobStatisticsWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Statistics &lt;p&gt;Returns the job statistics for the currently logged in user, including number of jobs that are successful, number of jobs containing errors, number of jobs containing warnings, and the number of jobs running.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id of the logged in user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatisticsBean)</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<JobStatisticsBean>> JobsGetJobStatisticsWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EssSharp.Client.ApiException(400, "Missing required parameter 'userId' when calling JobsApi->JobsGetJobStatistics");
            }


            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", EssSharp.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "JobsApi.JobsGetJobStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatisticsBean>("/jobs/statistics/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsGetJobStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete jobs &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void JobsPurge(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0)
        {
            JobsPurgeWithHttpInfo(olderthan, rangeStartTime, rangeEndTime, application, database, jobtype, jobstatus);
        }

        /// <summary>
        /// Delete jobs &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EssSharp.Client.ApiResponse<Object> JobsPurgeWithHttpInfo(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0)
        {
            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (olderthan != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "olderthan", olderthan));
            }
            if (rangeStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "rangeStartTime", rangeStartTime));
            }
            if (rangeEndTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "rangeEndTime", rangeEndTime));
            }
            if (application != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "application", application));
            }
            if (database != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "database", database));
            }
            if (jobtype != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "jobtype", jobtype));
            }
            if (jobstatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "jobstatus", jobstatus));
            }

            localVarRequestOptions.Operation = "JobsApi.JobsPurge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/jobs/purge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsPurge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete jobs &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task JobsPurgeAsync(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await JobsPurgeWithHttpInfoAsync(olderthan, rangeStartTime, rangeEndTime, application, database, jobtype, jobstatus, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete jobs &lt;p&gt;Deletes jobs data older than the specified time.&lt;/p&gt;
        /// </summary>
        /// <exception cref="EssSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="olderthan">&lt;p&gt;Time in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeStartTime">&lt;p&gt;Start Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="rangeEndTime">&lt;p&gt;End Time range in milliseconds.&lt;/p&gt; (optional)</param>
        /// <param name="application">&lt;p&gt;Application name.&lt;/p&gt; (optional)</param>
        /// <param name="database">&lt;p&gt;Database name.&lt;/p&gt; (optional)</param>
        /// <param name="jobtype">&lt;p&gt;Job Type.&lt;/p&gt; (optional)</param>
        /// <param name="jobstatus">&lt;p&gt;Job Status.&lt;/p&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EssSharp.Client.ApiResponse<Object>> JobsPurgeWithHttpInfoAsync(long? olderthan = default(long?), long? rangeStartTime = default(long?), long? rangeEndTime = default(long?), string application = default(string), string database = default(string), string jobtype = default(string), int? jobstatus = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EssSharp.Client.RequestOptions localVarRequestOptions = new EssSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EssSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EssSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (olderthan != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "olderthan", olderthan));
            }
            if (rangeStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "rangeStartTime", rangeStartTime));
            }
            if (rangeEndTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "rangeEndTime", rangeEndTime));
            }
            if (application != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "application", application));
            }
            if (database != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "database", database));
            }
            if (jobtype != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "jobtype", jobtype));
            }
            if (jobstatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(EssSharp.Client.ClientUtils.ParameterToMultiMap("", "jobstatus", jobstatus));
            }

            localVarRequestOptions.Operation = "JobsApi.JobsPurge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + EssSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/jobs/purge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsPurge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
